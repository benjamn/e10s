diff --git a/js/src/ipc/ObjectWrapperChild.cpp b/js/src/ipc/ObjectWrapperChild.cpp
--- a/js/src/ipc/ObjectWrapperChild.cpp
+++ b/js/src/ipc/ObjectWrapperChild.cpp
@@ -8,33 +8,46 @@
 
 namespace mozilla {
 namespace jsipc {
 
 namespace {
 
     class AutoContextPusher {
         ContextWrapperChild* const mContextWrapper;
+        const uint32 mSavedOptions;
         JS_DECL_USE_GUARD_OBJECT_NOTIFIER;
     public:
         AutoContextPusher(ContextWrapperChild* cwc
                           JS_GUARD_OBJECT_NOTIFIER_PARAM)
             : mContextWrapper(cwc)
+            , mSavedOptions(JS_SetOptions(GetContext(),
+                                          (JS_GetOptions(GetContext()) |
+                                           JSOPTION_DONT_REPORT_UNCAUGHT)))
         {
             JS_GUARD_OBJECT_NOTIFIER_INIT;
             nsresult rv =
                 nsContentUtils::ThreadJSContextStack()->Push(GetContext());
             NS_ASSERTION(NS_SUCCEEDED(rv), "Failed to push our context");
         }
         ~AutoContextPusher() {
             JSContext* popped;
             nsresult rv =
                 nsContentUtils::ThreadJSContextStack()->Pop(&popped);
             NS_ASSERTION(NS_SUCCEEDED(rv) && GetContext() == popped,
                          "Failed to pop our context");
+#ifdef DEBUG
+            uint32 options =
+#endif
+                JS_SetOptions(GetContext(), mSavedOptions);
+            NS_ASSERTION(options & JSOPTION_DONT_REPORT_UNCAUGHT,
+                         "Probably clobbering context options.");
+            jsval thrown;
+            if (JS_GetPendingException(GetContext(), &thrown))
+                CPOW_LOG(("Threw an exception!!!"));
         }
         JSContext* GetContext() const {
             return mContextWrapper->GetContext();
         }
     };
 
 }
     
diff --git a/js/src/ipc/tests/adhoc/child.html b/js/src/ipc/tests/adhoc/child.html
--- a/js/src/ipc/tests/adhoc/child.html
+++ b/js/src/ipc/tests/adhoc/child.html
@@ -13,15 +13,18 @@
           window[name] = "oyez";
           this[name] = value;
           return window;
         },
         f: function(x) {
           document.body.appendChild(document.createElement("div")).innerHTML =
             "called f(" + x + ")";
           return x + Math.PI;
+        },
+        pitch: function(ball) {
+          throw ball;
         }
       };
       window.foo.self = window.foo;
     </script>
     oyez
   </body>
 </html>
