diff --git a/js/src/ipc/ContextWrapperChild.h b/js/src/ipc/ContextWrapperChild.h
--- a/js/src/ipc/ContextWrapperChild.h
+++ b/js/src/ipc/ContextWrapperChild.h
@@ -37,26 +37,16 @@ public:
     }
     
     PObjectWrapperChild* GetOrCreateGlobalWrapper() {
         return GetOrCreateWrapper(JS_GetGlobalObject(mContext), true);
     }
 
 protected:
 
-    bool AnswerBeginRequest() {
-        JS_BeginRequest(mContext);
-        return true;
-    }
-
-    bool AnswerEndRequest() {
-        JS_EndRequest(mContext);
-        return true;
-    }
-
     PObjectWrapperChild* AllocPObjectWrapper(JSObject* obj) {
         return new ObjectWrapperChild(mContext, obj);
     }
     
     PObjectWrapperChild* AllocPObjectWrapper(const bool&) {
         return AllocPObjectWrapper(JS_GetGlobalObject(mContext));
     }
 
diff --git a/js/src/ipc/ContextWrapperParent.h b/js/src/ipc/ContextWrapperParent.h
--- a/js/src/ipc/ContextWrapperParent.h
+++ b/js/src/ipc/ContextWrapperParent.h
@@ -18,57 +18,39 @@ using mozilla::dom::ContentProcessParent
 class ContextWrapperParent
     : public PContextWrapperParent
 {
 public:
 
     ContextWrapperParent(ContentProcessParent* cpp)
         : mContentProcess(cpp)
         , mGlobal(NULL)
-        , mRequestDepth(0)
     {}
 
     bool GetGlobalJSObject(JSContext* cx, JSObject** globalp) {
         if (!mGlobal)
             return false;
         mGlobalHolder.Hold(cx);
         mGlobalHolder = *globalp = mGlobal->GetJSObject(cx);
         return true;
     }
 
     ObjectWrapperParent* GetGlobalObjectWrapper() const {
         return mGlobal;
     }
 
-    bool CallBeginRequest() {
-        CPOW_LOG(("Calling BeginRequest (depth: %d -> %d)...",
-                  mRequestDepth, mRequestDepth + 1));
-        if (mRequestDepth++ == 0) {
-            mContentProcess->RequestRunToCompletion();
-            PContextWrapperParent::CallBeginRequest();
-        }
-        return true;
-    }
-
-    bool CallEndRequest() {
-        CPOW_LOG(("Calling EndRequest (depth: %d -> %d)...",
-                  mRequestDepth, mRequestDepth - 1));
-        NS_ASSERTION(mRequestDepth > 0,
-                     "Unbalanced ObjectWrapperParent::CallEndRequest");
-        if (--mRequestDepth == 0)
-            PContextWrapperParent::CallEndRequest();
-        return true;
+    bool RequestRunToCompletion() {
+        return mContentProcess->RequestRunToCompletion();
     }
 
 private:
 
     ContentProcessParent* mContentProcess;
     ObjectWrapperParent* mGlobal;
     nsAutoJSValHolder mGlobalHolder;
-    int mRequestDepth;
 
     PObjectWrapperParent* AllocPObjectWrapper(const bool&) {
         return new ObjectWrapperParent();
     }
 
     bool RecvPObjectWrapperConstructor(PObjectWrapperParent* actor,
                                        const bool& makeGlobal)
     {
diff --git a/js/src/ipc/ObjectWrapperChild.cpp b/js/src/ipc/ObjectWrapperChild.cpp
--- a/js/src/ipc/ObjectWrapperChild.cpp
+++ b/js/src/ipc/ObjectWrapperChild.cpp
@@ -1,34 +1,37 @@
 #include "mozilla/jsipc/ContextWrapperChild.h"
 #include "mozilla/jsipc/ObjectWrapperChild.h"
 #include "mozilla/jsipc/CPOWTypes.h"
 
+#include "jsapi.h"
 #include "nsAutoPtr.h"
 #include "nsTArray.h"
 #include "nsContentUtils.h"
 #include "nsIJSContextStack.h"
 
 using namespace mozilla::jsipc;
 
 namespace {
 
     class AutoContextPusher {
 
         JSContext* const mContext;
         nsRefPtr<nsIThreadJSContextStack> mStack;
+        JSAutoRequest mRequest;
 
         JS_DECL_USE_GUARD_OBJECT_NOTIFIER;
 
     public:
 
         AutoContextPusher(JSContext* cx
                           JS_GUARD_OBJECT_NOTIFIER_PARAM)
             : mContext(cx)
             , mStack(nsContentUtils::ThreadJSContextStack())
+            , mRequest(cx)
         {
             JS_GUARD_OBJECT_NOTIFIER_INIT;
             if (mStack) {
                 nsresult rv = mStack->Push(mContext);
                 NS_ASSERTION(NS_SUCCEEDED(rv), "Failed to push our context");
             }
         }
 
diff --git a/js/src/ipc/ObjectWrapperParent.cpp b/js/src/ipc/ObjectWrapperParent.cpp
--- a/js/src/ipc/ObjectWrapperParent.cpp
+++ b/js/src/ipc/ObjectWrapperParent.cpp
@@ -56,37 +56,16 @@ namespace {
         }
 
         static JSBool IsSet(JSContext* cx, JSObject* obj) {
             return GetFlags(cx, obj) & CPOW_FLAG_RESOLVING;
         }
 
     };
 
-    class AutoRequest
-    {
-        ContextWrapperParent* mManager;
-        JS_DECL_USE_GUARD_OBJECT_NOTIFIER;
-
-    public:
-
-        AutoRequest(ContextWrapperParent* cwp
-                    JS_GUARD_OBJECT_NOTIFIER_PARAM)
-            : mManager(cwp)
-        {
-            JS_GUARD_OBJECT_NOTIFIER_INIT;
-            mManager->CallBeginRequest();
-        }
-
-        ~AutoRequest() {
-            mManager->CallEndRequest();
-        }
-
-    };
-
 }
 
 const JSExtendedClass _::sCPOW_JSClass = {
     // JSClass (JSExtendedClass.base) initialization
     { "CrossProcessObjectWrapper",
       JSCLASS_NEW_RESOLVE | JSCLASS_NEW_ENUMERATE | JSCLASS_IS_EXTENDED |
       JSCLASS_HAS_RESERVED_SLOTS(sNumSlots),
       _::CPOW_AddProperty,
@@ -317,19 +296,18 @@ ObjectWrapperParent::CPOW_AddProperty(JS
     if (AutoResolveFlag::IsSet(cx, obj))
         return JS_TRUE;
     
     nsString in_id;
 
     if (!jsval_to_nsString(cx, id, &in_id))
         return JS_FALSE;
 
-    AutoRequest request(self->Manager());
-
-    return self->CallAddProperty(in_id);
+    return (self->Manager()->RequestRunToCompletion() &&
+            self->CallAddProperty(in_id));
 }    
 
 /*static*/ JSBool
 ObjectWrapperParent::CPOW_GetProperty(JSContext *cx, JSObject *obj, jsval id,
                                       jsval *vp)
 {
     CPOW_LOG(("Calling CPOW_GetProperty (%s)...",
               JSVAL_TO_CSTR(cx, id)));
@@ -341,19 +319,18 @@ ObjectWrapperParent::CPOW_GetProperty(JS
     nsString in_id;
 
     if (!jsval_to_nsString(cx, id, &in_id))
         return JS_FALSE;
 
     JSBool out_ok;
     JSVariant out_v;
     
-    AutoRequest request(self->Manager());
-
-    return (self->CallGetProperty(in_id,
+    return (self->Manager()->RequestRunToCompletion() &&
+            self->CallGetProperty(in_id,
                                   &out_ok, &out_v) &&
             out_ok &&
             self->jsval_from_JSVariant(cx, out_v, vp));
 }
 
 /*static*/ JSBool
 ObjectWrapperParent::CPOW_SetProperty(JSContext *cx, JSObject *obj, jsval id,
                                       jsval *vp)
@@ -370,19 +347,18 @@ ObjectWrapperParent::CPOW_SetProperty(JS
 
     if (!jsval_to_nsString(cx, id, &in_id) ||
         !self->jsval_to_JSVariant(cx, *vp, &in_v))
         return JS_FALSE;
     
     JSBool out_ok;
     JSVariant out_v;
 
-    AutoRequest request(self->Manager());
-
-    return (self->CallSetProperty(in_id, in_v,
+    return (self->Manager()->RequestRunToCompletion() &&
+            self->CallSetProperty(in_id, in_v,
                                   &out_ok, &out_v) &&
             out_ok &&
             self->jsval_from_JSVariant(cx, out_v, vp));
 }    
     
 /*static*/ JSBool
 ObjectWrapperParent::CPOW_DelProperty(JSContext *cx, JSObject *obj, jsval id,
                                       jsval *vp)
@@ -397,19 +373,18 @@ ObjectWrapperParent::CPOW_DelProperty(JS
     nsString in_id;
 
     if (!jsval_to_nsString(cx, id, &in_id))
         return JS_FALSE;
 
     JSBool out_ok;
     JSVariant out_v;
     
-    AutoRequest request(self->Manager());
-
-    return (self->CallDelProperty(in_id,
+    return (self->Manager()->RequestRunToCompletion() &&
+            self->CallDelProperty(in_id,
                                   &out_ok, &out_v) &&
             out_ok &&
             jsval_from_JSVariant(cx, out_v, vp));
 }
 
 JSBool
 ObjectWrapperParent::NewEnumerateInit(JSContext* cx, jsval* statep, jsid* idp)
 {
@@ -468,27 +443,24 @@ ObjectWrapperParent::CPOW_NewEnumerate(J
     JSBool ok = JS_FALSE;
 
     ObjectWrapperParent* self = Unwrap(cx, obj);
     if (!self)
         return ok;
 
     switch (enum_op) {
     case JSENUMERATE_INIT:
-        self->Manager()->CallBeginRequest();
+        self->Manager()->RequestRunToCompletion();
         ok = self->NewEnumerateInit(cx, statep, idp);
         break;
     case JSENUMERATE_NEXT:
         ok = self->NewEnumerateNext(cx, statep, idp);
-        if (*statep == JSVAL_NULL)
-            self->Manager()->CallEndRequest();
         break;
     case JSENUMERATE_DESTROY:
         ok = self->NewEnumerateDestroy(cx, *statep);
-        self->Manager()->CallEndRequest();
         break;
     }
     return ok;
 }
 
 /*static*/ JSBool
 ObjectWrapperParent::CPOW_NewResolve(JSContext *cx, JSObject *obj, jsval id,
                                      uintN flags, JSObject **objp)
@@ -502,24 +474,24 @@ ObjectWrapperParent::CPOW_NewResolve(JSC
 
     nsString in_id;
 
     if (!jsval_to_nsString(cx, id, &in_id))
         return JS_FALSE;
 
     JSBool out_ok;
     PObjectWrapperParent* out_pobj;
-    {
-        AutoRequest request(self->Manager());
-        if (!self->CallNewResolve(in_id, flags,
-                                  &out_ok, &out_pobj) ||
-            !out_ok ||
-            !JSObject_from_PObjectWrapperParent(cx, out_pobj, objp))
-            return JS_FALSE;
-    }
+
+    if (!self->Manager()->RequestRunToCompletion() ||
+        !self->CallNewResolve(in_id, flags,
+                              &out_ok, &out_pobj) ||
+        !out_ok ||
+        !JSObject_from_PObjectWrapperParent(cx, out_pobj, objp))
+        return JS_FALSE;
+
     jsid interned_id;
     if (*objp &&
         JS_ValueToId(cx, id, &interned_id)) {
         AutoResolveFlag arf(cx, *objp);
         JS_DefinePropertyById(cx, *objp, interned_id, JSVAL_VOID, NULL, NULL,
                               JSPROP_ENUMERATE);
     }
     return JS_TRUE;
@@ -574,19 +546,18 @@ ObjectWrapperParent::CPOW_Call(JSContext
     nsTArray<JSVariant> in_argv(argc);
     for (uintN i = 0; i < argc; i++)
         if (!jsval_to_JSVariant(cx, argv[i], in_argv.AppendElement()))
             return JS_FALSE;
     
     JSBool out_ok;
     JSVariant out_rval;
 
-    AutoRequest request(function->Manager());
-
-    return (function->CallCall(receiver, in_argv,
+    return (function->Manager()->RequestRunToCompletion() &&
+            function->CallCall(receiver, in_argv,
                                &out_ok, &out_rval) &&
             out_ok &&
             jsval_from_JSVariant(cx, out_rval, rval));
 }
 
 /*static*/ JSBool
 ObjectWrapperParent::CPOW_Construct(JSContext *cx, JSObject *obj, uintN argc,
                                     jsval *argv, jsval *rval)
@@ -601,19 +572,18 @@ ObjectWrapperParent::CPOW_Construct(JSCo
     nsTArray<JSVariant> in_argv(argc);
     for (uintN i = 0; i < argc; i++)
         if (!jsval_to_JSVariant(cx, argv[i], in_argv.AppendElement()))
             return JS_FALSE;
 
     JSBool out_ok;
     PObjectWrapperParent* out_powp;
 
-    AutoRequest request(constructor->Manager());
-
-    return (constructor->CallConstruct(in_argv,
+    return (constructor->Manager()->RequestRunToCompletion() &&
+            constructor->CallConstruct(in_argv,
                                        &out_ok, &out_powp) &&
             out_ok &&
             jsval_from_PObjectWrapperParent(cx, out_powp, rval));
 }
 
 /*static*/ JSBool
 ObjectWrapperParent::CPOW_HasInstance(JSContext *cx, JSObject *obj, jsval v,
                                       JSBool *bp)
@@ -628,19 +598,18 @@ ObjectWrapperParent::CPOW_HasInstance(JS
 
     JSVariant in_v;
 
     if (!jsval_to_JSVariant(cx, v, &in_v))
         return JS_FALSE;
 
     JSBool out_ok;
 
-    AutoRequest request(self->Manager());
-
-    return (self->CallHasInstance(in_v,
+    return (self->Manager()->RequestRunToCompletion() &&
+            self->CallHasInstance(in_v,
                                   &out_ok, bp) &&
             out_ok);
 }
 
 /*static*/ JSBool
 ObjectWrapperParent::CPOW_Equality(JSContext *cx, JSObject *obj, jsval v,
                                    JSBool *bp)
 {
diff --git a/js/src/ipc/PContextWrapper.ipdl b/js/src/ipc/PContextWrapper.ipdl
--- a/js/src/ipc/PContextWrapper.ipdl
+++ b/js/src/ipc/PContextWrapper.ipdl
@@ -7,16 +7,11 @@ namespace jsipc {
 
 rpc protocol PContextWrapper
 {
     manager PIFrameEmbedding or PTestShell;
     manages PObjectWrapper;
 parent:
     __delete__();
     sync PObjectWrapper(bool makeGlobal);
-child:
-    // Request depth managed locally, so only the first/last
-    // BeginRequest/EndRequest calls cause IPC traffic.
-    rpc BeginRequest();
-    rpc EndRequest();
 };
 
 }}
