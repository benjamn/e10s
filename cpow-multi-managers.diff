diff --git a/dom/ipc/ContentProcessChild.cpp b/dom/ipc/ContentProcessChild.cpp
--- a/dom/ipc/ContentProcessChild.cpp
+++ b/dom/ipc/ContentProcessChild.cpp
@@ -37,26 +37,25 @@
  * ***** END LICENSE BLOCK ***** */
 
 #include "ContentProcessChild.h"
 #include "TabChild.h"
 
 #include "mozilla/ipc/TestShellChild.h"
 #include "mozilla/net/NeckoChild.h"
 #include "mozilla/ipc/XPCShellEnvironment.h"
-#include "mozilla/jsipc/ContextWrapperChild.h"
+#include "mozilla/jsipc/PContextWrapperChild.h"
 
 #include "nsXULAppAPI.h"
 
 #include "base/message_loop.h"
 #include "base/task.h"
 
 using namespace mozilla::ipc;
 using namespace mozilla::net;
-using namespace mozilla::jsipc;
 
 namespace mozilla {
 namespace dom {
 
 ContentProcessChild* ContentProcessChild::sSingleton;
 
 ContentProcessChild::ContentProcessChild()
     : mQuit(PR_FALSE)
@@ -112,63 +111,38 @@ ContentProcessChild::AllocPTestShell()
 }
 
 bool
 ContentProcessChild::DeallocPTestShell(PTestShellChild* shell)
 {
     mTestShells.RemoveElement(shell);
     return true;
 }
-    
+
 bool
 ContentProcessChild::RecvPTestShellConstructor(PTestShellChild* actor)
 {
-    XPCShellEnvironment* env;
-    ContextWrapperChild* cwc;
-    JSContext* cx;
-
-    if ((env = static_cast<TestShellChild*>(actor)->GetXPCShell()) &&
-        (cx = env->GetContext()) &&
-        (cwc = new ContextWrapperChild(cx)))
-        this->SendPContextWrapperConstructor(cwc, actor)
-            ->SendPObjectWrapperConstructor(true);
-
+    actor->SendPContextWrapperConstructor()
+        ->SendPObjectWrapperConstructor(true);
     return true;
 }
 
 PNeckoChild* 
 ContentProcessChild::AllocPNecko()
 {
     return new NeckoChild();
 }
 
 bool 
 ContentProcessChild::DeallocPNecko(PNeckoChild* necko)
 {
     delete necko;
     return true;
 }
 
-PContextWrapperChild*
-ContentProcessChild::AllocPContextWrapper(const ContextWrapperOwner&)
-{
-    NS_NOTREACHED("ContentProcessChild::AllocPContextWrapper does not "
-                  "have enough information to allocate instances of "
-                  "ContextWrapperChild (see "
-                  "TabChild::CreateContextWrapperAndSetGlobalObject).");
-    return NULL;
-}
-
-bool
-ContentProcessChild::DeallocPContextWrapper(PContextWrapperChild* actor)
-{
-    delete actor;
-    return true;
-}
-    
 void
 ContentProcessChild::Quit()
 {
     NS_ASSERTION(mQuit, "Exiting uncleanly!");
     mIFrames.Clear();
     mTestShells.Clear();
 }
 
diff --git a/dom/ipc/ContentProcessChild.h b/dom/ipc/ContentProcessChild.h
--- a/dom/ipc/ContentProcessChild.h
+++ b/dom/ipc/ContentProcessChild.h
@@ -39,18 +39,16 @@
 #ifndef mozilla_dom_ContentProcessChild_h
 #define mozilla_dom_ContentProcessChild_h
 
 #include "mozilla/dom/PContentProcessChild.h"
 
 #include "nsTArray.h"
 #include "nsAutoPtr.h"
 
-using namespace mozilla::jsipc;
-
 namespace mozilla {
 namespace dom {
 
 class ContentProcessChild : public PContentProcessChild
 {
 public:
     ContentProcessChild();
     virtual ~ContentProcessChild();
@@ -64,25 +62,21 @@ public:
         return sSingleton;
     }
 
     virtual PIFrameEmbeddingChild* AllocPIFrameEmbedding();
     virtual bool DeallocPIFrameEmbedding(PIFrameEmbeddingChild*);
 
     virtual PTestShellChild* AllocPTestShell();
     virtual bool DeallocPTestShell(PTestShellChild*);
-    virtual bool RecvPTestShellConstructor(PTestShellChild* actor);
+    virtual bool RecvPTestShellConstructor(PTestShellChild*);
 
     virtual PNeckoChild* AllocPNecko();
     virtual bool DeallocPNecko(PNeckoChild*);
 
-protected:
-    virtual PContextWrapperChild* AllocPContextWrapper(const ContextWrapperOwner&);
-    virtual bool DeallocPContextWrapper(PContextWrapperChild* actor);
-    
 private:
     NS_OVERRIDE
     virtual void ActorDestroy(ActorDestroyReason why);
 
     void Quit();
 
     static ContentProcessChild* sSingleton;
 
diff --git a/dom/ipc/ContentProcessParent.cpp b/dom/ipc/ContentProcessParent.cpp
--- a/dom/ipc/ContentProcessParent.cpp
+++ b/dom/ipc/ContentProcessParent.cpp
@@ -48,17 +48,16 @@
 
 #include "nsAutoPtr.h"
 #include "nsCOMPtr.h"
 #include "nsServiceManagerUtils.h"
 #include "nsThreadUtils.h"
 
 using namespace mozilla::ipc;
 using namespace mozilla::net;
-using namespace mozilla::jsipc;
     
 using mozilla::MonitorAutoEnter;
 
 namespace {
 PRBool gSingletonDied = PR_FALSE;
 }
 
 namespace mozilla {
@@ -179,53 +178,10 @@ ContentProcessParent::AllocPNecko()
 
 bool 
 ContentProcessParent::DeallocPNecko(PNeckoParent* necko)
 {
     delete necko;
     return true;
 }
 
-PContextWrapperParent*
-ContentProcessParent::AllocPContextWrapper(const ContextWrapperOwner&)
-{
-    return new ContextWrapperParent();
-}
-
-bool
-ContentProcessParent::DeallocPContextWrapper(PContextWrapperParent* actor)
-{
-    delete actor;
-    return true;
-}
-
-bool
-ContentProcessParent::
-RecvPContextWrapperConstructor(PContextWrapperParent* actor,
-                               const ContextWrapperOwner& cwo)
-{
-    // TODO This method can go away once IPDL supports multiple managers,
-    // for then PObjectWrapper can be managed by PIFrameEmbeddingParent
-    // and PTestShellParent, instead of their common parent
-    // PContentProcess.
-    
-    switch (cwo.type()) {
-    case ContextWrapperOwner::TPIFrameEmbeddingParent:
-        {
-            const TabParent* tp =
-                static_cast<const TabParent*>(cwo.get_PIFrameEmbeddingParent());
-            const_cast<TabParent*>(tp)->SetContextWrapper(actor);
-            return true;
-        }
-    case ContextWrapperOwner::TPTestShellParent:
-        {
-            const TestShellParent* tsp =
-                static_cast<const TestShellParent*>(cwo.get_PTestShellParent());
-            const_cast<TestShellParent*>(tsp)->SetContextWrapper(actor);
-            return true;
-        }
-    default:
-        return false;
-    }
-}   
-
 } // namespace dom
 } // namespace mozilla
diff --git a/dom/ipc/ContentProcessParent.h b/dom/ipc/ContentProcessParent.h
--- a/dom/ipc/ContentProcessParent.h
+++ b/dom/ipc/ContentProcessParent.h
@@ -42,18 +42,16 @@
 #include "base/waitable_event_watcher.h"
 
 #include "mozilla/dom/PContentProcessParent.h"
 #include "mozilla/ipc/GeckoChildProcessHost.h"
 
 #include "nsIObserver.h"
 #include "mozilla/Monitor.h"
 
-using namespace mozilla::jsipc;
-
 namespace mozilla {
 
 namespace ipc {
 class TestShellParent;
 }
 
 namespace dom {
 
@@ -97,20 +95,16 @@ private:
     virtual bool DeallocPIFrameEmbedding(PIFrameEmbeddingParent* frame);
 
     virtual PTestShellParent* AllocPTestShell();
     virtual bool DeallocPTestShell(PTestShellParent* shell);
 
     virtual PNeckoParent* AllocPNecko();
     virtual bool DeallocPNecko(PNeckoParent* necko);
 
-    virtual PContextWrapperParent* AllocPContextWrapper(const ContextWrapperOwner&);
-    virtual bool DeallocPContextWrapper(PContextWrapperParent* actor);
-    virtual bool RecvPContextWrapperConstructor(PContextWrapperParent* actor,
-                                                const ContextWrapperOwner& cwo);
     mozilla::Monitor mMonitor;
 
     GeckoChildProcessHost* mSubprocess;
 };
 
 } // namespace dom
 } // namespace mozilla
 
diff --git a/dom/ipc/PContentProcess.ipdl b/dom/ipc/PContentProcess.ipdl
--- a/dom/ipc/PContentProcess.ipdl
+++ b/dom/ipc/PContentProcess.ipdl
@@ -34,62 +34,32 @@
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 include protocol "PIFrameEmbedding.ipdl";
 include protocol "PTestShell.ipdl";
 include protocol "PNecko.ipdl";
-include protocol "PContextWrapper.ipdl";
 
 include "mozilla/TabTypes.h";
 
 namespace mozilla {
 namespace dom {
 
-/* Although PContentProcess manages PContextWrapper, PContextWrapper
- * instances are always created by (or on behalf of) a particular
- * PIFrameEmbedding or PTestShell, since each instance of these
- * subprotocols has its own JSContext (and distinct PContextWrappers are
- * needed for distinct JSContexts).
- *
- * It would be more natural to allow both PIFrameEmbedding and PTestShell
- * to manage PContextWrapper, but as far as I can tell IPDL protocols
- * cannot have multiple managers (bug 540111 may change this).
- *
- * So that we can later determine which PContextWrapperParent is
- * associated with a given PIFrameEmbeddingParent or PTestShellParent, the
- * PContextWrapper constructor message must convey to the
- * PContentProcessParent which PIFrameEmbeddingChild or PTestShellChild
- * sent the PContextWrapper constructor message.
- *
- * We might like to have two separate PContextWrapper constructors, one
- * accepting a PIFrameEmbeddingChild and the other a PTestShell.  Alas,
- * IPDL constructors can't be overloaded, so we'll settle for a single
- * constructor that accepts a union-type parameter.
- */
-union ContextWrapperOwner {
-    PIFrameEmbedding;
-    PTestShell;
-};
-    
 rpc protocol PContentProcess
 {
     manages PIFrameEmbedding;
     manages PTestShell;
     manages PNecko;
-    manages PContextWrapper;
 
 child:
     PIFrameEmbedding();
 
     PTestShell();
 
 parent:
     PNecko();
 
-    PContextWrapper(ContextWrapperOwner cwo);
-
 };
 
 }
 }
diff --git a/dom/ipc/PIFrameEmbedding.ipdl b/dom/ipc/PIFrameEmbedding.ipdl
--- a/dom/ipc/PIFrameEmbedding.ipdl
+++ b/dom/ipc/PIFrameEmbedding.ipdl
@@ -34,44 +34,49 @@
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 include protocol "PContentProcess.ipdl";
 include protocol "PDocumentRenderer.ipdl";
+include protocol "PContextWrapper.ipdl";
 
 include "mozilla/TabTypes.h";
 include "TabMessageUtils.h";
 
 using MagicWindowHandle;
 using RemoteDOMEvent;
 
 namespace mozilla {
 namespace dom {
 
 rpc protocol PIFrameEmbedding
 {
     manager PContentProcess;
     manages PDocumentRenderer;
+    manages PContextWrapper;
 
 child:
     __delete__();
 
 parent:
     /**
      * When child sends this message, parent should move focus to
      * the next or previous focusable element.
      */
     moveFocus(bool forward);
 
     sendEvent(RemoteDOMEvent aEvent);
 
     rpc createWindow() returns (PIFrameEmbedding window);
+
+    PContextWrapper();
+
 child:
     createWidget(MagicWindowHandle parentWidget);
 
     loadURL(nsCString uri);
 
     move(PRUint32 x,
          PRUint32 y,
          PRUint32 width,
diff --git a/dom/ipc/TabChild.cpp b/dom/ipc/TabChild.cpp
--- a/dom/ipc/TabChild.cpp
+++ b/dom/ipc/TabChild.cpp
@@ -64,16 +64,17 @@
 #include "jscntxt.h"
 
 #ifdef MOZ_WIDGET_GTK2
 #include <gdk/gdkx.h>
 #include <gtk/gtk.h>
 #endif
 
 using namespace mozilla::dom;
+using namespace mozilla::jsipc;
 
 NS_IMPL_ISUPPORTS1(ContentListener, nsIDOMEventListener)
 
 NS_IMETHODIMP
 ContentListener::HandleEvent(nsIDOMEvent* aEvent)
 {
   RemoteDOMEvent remoteEvent;
   remoteEvent.mEvent = do_QueryInterface(aEvent);
@@ -340,17 +341,18 @@ TabChild::RecvloadURL(const nsCString& u
 
     nsresult rv = mWebNav->LoadURI(NS_ConvertUTF8toUTF16(uri).get(),
                                    nsIWebNavigation::LOAD_FLAGS_NONE,
                                    NULL, NULL, NULL);
     if (NS_FAILED(rv)) {
         NS_WARNING("mWebNav->LoadURI failed. Eating exception, what else can I do?");
     }
 
-    CreateContextWrapperAndSetGlobalObject();
+    SendPContextWrapperConstructor()
+        ->SendPObjectWrapperConstructor(true);
     
     return true;
 }
 
 bool
 TabChild::Recvmove(const PRUint32& x,
                      const PRUint32& y,
                      const PRUint32& width,
@@ -401,29 +403,27 @@ GetJSContext(nsIWebNavigation* webNav)
         (document = do_QueryInterface(domDocument)) &&
         (global = do_QueryInterface(document->GetScriptGlobalObject())) &&
         (context = do_QueryInterface(global->GetContext())))
         return static_cast<JSContext*>(context->GetNativeContext());
 
     return NULL;
 }
 
-void
-TabChild::CreateContextWrapperAndSetGlobalObject()
+PContextWrapperChild*
+TabChild::AllocPContextWrapper()
 {
-    JSContext* cx;
-    PContentProcessChild* manager;
-    mozilla::jsipc::ContextWrapperChild* cwc;
+    return new ContextWrapperChild(GetJSContext(mWebNav));
+}
 
-    if ((cx = GetJSContext(mWebNav)) &&
-        (manager = Manager()) &&
-        (cwc = new mozilla::jsipc::ContextWrapperChild(cx)))
-        manager
-            ->SendPContextWrapperConstructor(cwc, this)
-            ->SendPObjectWrapperConstructor(true);
+bool
+TabChild::DeallocPContextWrapper(PContextWrapperChild* actor)
+{
+    delete actor;
+    return true;
 }
 
 mozilla::ipc::PDocumentRendererChild*
 TabChild::AllocPDocumentRenderer(
         const PRInt32& x,
         const PRInt32& y,
         const PRInt32& w,
         const PRInt32& h,
diff --git a/dom/ipc/TabChild.h b/dom/ipc/TabChild.h
--- a/dom/ipc/TabChild.h
+++ b/dom/ipc/TabChild.h
@@ -47,16 +47,21 @@
 #include "nsIEmbeddingSiteWindow2.h"
 #include "nsIWebBrowserChromeFocus.h"
 #include "nsIDOMEventListener.h"
 #include "nsIDOMEventTarget.h"
 #include "nsIInterfaceRequestor.h"
 #include "nsIWindowProvider.h"
 
 namespace mozilla {
+
+namespace jsipc {
+class PContextWrapperChild;
+}
+
 namespace dom {
 
 class TabChild;
 
 class ContentListener : public nsIDOMEventListener
 {
 public:
   ContentListener(TabChild* aTabChild) : mTabChild(aTabChild) {}
@@ -117,19 +122,21 @@ public:
             const PRInt32& x,
             const PRInt32& y,
             const PRInt32& w,
             const PRInt32& h,
             const nsString& bgcolor,
             const PRUint32& flags,
             const bool& flush);
 
+    virtual PContextWrapperChild* AllocPContextWrapper();
+    virtual bool DeallocPContextWrapper(PContextWrapperChild* actor);
+
 private:
     nsCOMPtr<nsIWebNavigation> mWebNav;
-    void CreateContextWrapperAndSetGlobalObject();
 
     DISALLOW_EVIL_CONSTRUCTORS(TabChild);
 };
 
 }
 }
 
 #endif // mozilla_tabs_TabChild_h
diff --git a/dom/ipc/TabParent.cpp b/dom/ipc/TabParent.cpp
--- a/dom/ipc/TabParent.cpp
+++ b/dom/ipc/TabParent.cpp
@@ -35,36 +35,38 @@
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 #include "TabParent.h"
 
 #include "mozilla/ipc/GeckoThread.h"
 #include "mozilla/ipc/DocumentRendererParent.h"
+#include "mozilla/jsipc/ContextWrapperParent.h"
 
 #include "nsIURI.h"
 #include "nsFocusManager.h"
 #include "nsCOMPtr.h"
 #include "nsServiceManagerUtils.h"
 #include "nsIDOMElement.h"
 #include "nsEventDispatcher.h"
 #include "nsIDOMEventTarget.h"
 #include "nsIDOMEvent.h"
 #include "nsIPrivateDOMEvent.h"
 #include "nsFrameLoader.h"
 
 using mozilla::ipc::BrowserProcessSubThread;
 using mozilla::ipc::DocumentRendererParent;
+using mozilla::jsipc::PContextWrapperParent;
+using mozilla::jsipc::ContextWrapperParent;
 
 namespace mozilla {
 namespace dom {
 
 TabParent::TabParent()
-  : mContextWrapper(nsnull)
 {
 }
 
 TabParent::~TabParent()
 {
 }
 
 bool
@@ -153,16 +155,42 @@ TabParent::AllocPDocumentRenderer(const 
 
 bool
 TabParent::DeallocPDocumentRenderer(PDocumentRendererParent* actor)
 {
     delete actor;
     return true;
 }
 
+PContextWrapperParent*
+TabParent::AllocPContextWrapper()
+{
+    return new ContextWrapperParent();
+}
+
+bool
+TabParent::DeallocPContextWrapper(PContextWrapperParent* actor)
+{
+    delete actor;
+    return true;
+}
+
+bool
+TabParent::GetGlobalJSObject(JSContext* cx, JSObject** globalp)
+{
+    // TODO Unify this code with TestShellParent::GetGlobalJSObject.
+    nsTArray<PContextWrapperParent*> cwps(1);
+    ManagedPContextWrapperParent(cwps);
+    if (cwps.Length() < 1)
+        return false;
+    NS_ASSERTION(cwps.Length() == 1, "More than one PContextWrapper?");
+    return (static_cast<ContextWrapperParent*>(cwps[0])
+            ->GetGlobalJSObject(cx, globalp));
+}
+
 void
 TabParent::SendMouseEvent(const nsAString& aType, float aX, float aY,
                           PRInt32 aButton, PRInt32 aClickCount,
                           PRInt32 aModifiers, PRBool aIgnoreRootScrollFrame)
 {
   SendsendMouseEvent(nsString(aType), aX, aY, aButton, aClickCount,
                      aModifiers, aIgnoreRootScrollFrame);
 }
diff --git a/dom/ipc/TabParent.h b/dom/ipc/TabParent.h
--- a/dom/ipc/TabParent.h
+++ b/dom/ipc/TabParent.h
@@ -35,31 +35,34 @@
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 #ifndef mozilla_tabs_TabParent_h
 #define mozilla_tabs_TabParent_h
 
 #include "mozilla/dom/PIFrameEmbeddingParent.h"
-#include "mozilla/jsipc/ContextWrapperParent.h"
 
 #include "mozilla/ipc/GeckoChildProcessHost.h"
 
 #include "nsCOMPtr.h"
 #include "nsIBrowserDOMWindow.h"
 
 class nsIURI;
 class nsIDOMElement;
 
-using namespace mozilla::jsipc;
 struct JSContext;
 struct JSObject;
 
 namespace mozilla {
+
+namespace jsipc {
+class PContextWrapperParent;
+}
+
 namespace dom {
 
 class TabParent : public PIFrameEmbeddingParent
 {
 public:
     TabParent();
     virtual ~TabParent();
     void SetOwnerElement(nsIDOMElement* aElement) { mFrameElement = aElement; }
@@ -83,27 +86,22 @@ public:
             const PRInt32& y,
             const PRInt32& w,
             const PRInt32& h,
             const nsString& bgcolor,
             const PRUint32& flags,
             const bool& flush);
     virtual bool DeallocPDocumentRenderer(PDocumentRendererParent* actor);
 
-    void SetContextWrapper(PContextWrapperParent* pcwp) {
-        mContextWrapper = static_cast<ContextWrapperParent*>(pcwp);
-    }
-
-    bool GetGlobalJSObject(JSContext* cx, JSObject** globalp) {
-        return (mContextWrapper &&
-                mContextWrapper->GetGlobalJSObject(cx, globalp));
-    }
+    virtual PContextWrapperParent* AllocPContextWrapper();
+    virtual bool DeallocPContextWrapper(PContextWrapperParent* actor);
+    
+    bool GetGlobalJSObject(JSContext* cx, JSObject** globalp);
 
 protected:
     nsIDOMElement* mFrameElement;
     nsCOMPtr<nsIBrowserDOMWindow> mBrowserDOMWindow;
-    ContextWrapperParent* mContextWrapper;
 };
 
 } // namespace dom
 } // namespace mozilla
 
 #endif
diff --git a/ipc/testshell/PTestShell.ipdl b/ipc/testshell/PTestShell.ipdl
--- a/ipc/testshell/PTestShell.ipdl
+++ b/ipc/testshell/PTestShell.ipdl
@@ -32,28 +32,34 @@
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 include protocol "PContentProcess.ipdl";
 include protocol "PTestShellCommand.ipdl";
+include protocol "PContextWrapper.ipdl";
 
 namespace mozilla {
 namespace ipc {
 
-protocol PTestShell
+rpc protocol PTestShell
 {
   manager PContentProcess;
 
   manages PTestShellCommand;
+  manages PContextWrapper;
 
 child:
   __delete__();
 
   ExecuteCommand(nsString aCommand);
 
   PTestShellCommand(nsString aCommand);
+
+parent:
+  PContextWrapper();
+
 };
 
 } // namespace ipc
 } // namespace mozilla
diff --git a/ipc/testshell/TestShellChild.cpp b/ipc/testshell/TestShellChild.cpp
--- a/ipc/testshell/TestShellChild.cpp
+++ b/ipc/testshell/TestShellChild.cpp
@@ -30,20 +30,23 @@
  * decision by deleting the provisions above and replace them with the notice
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 #include "TestShellChild.h"
+#include "mozilla/jsipc/ContextWrapperChild.h"
 
 using mozilla::ipc::TestShellChild;
 using mozilla::ipc::PTestShellCommandChild;
 using mozilla::ipc::XPCShellEnvironment;
+using mozilla::jsipc::PContextWrapperChild;
+using mozilla::jsipc::ContextWrapperChild;
 
 TestShellChild::TestShellChild()
 : mXPCShell(XPCShellEnvironment::CreateEnvironment())
 {
 }
 
 bool
 TestShellChild::RecvExecuteCommand(const nsString& aCommand)
@@ -80,8 +83,25 @@ TestShellChild::RecvPTestShellCommandCon
 
   nsString response;
   if (!mXPCShell->EvaluateString(aCommand, &response)) {
     return false;
   }
 
   return PTestShellCommandChild::Send__delete__(aActor, response);
 }
+
+PContextWrapperChild*
+TestShellChild::AllocPContextWrapper()
+{
+  JSContext* cx;
+  if (mXPCShell &&
+      (cx = mXPCShell->GetContext()))
+    return new ContextWrapperChild(cx);
+  return NULL;
+}
+
+bool
+TestShellChild::DeallocPContextWrapper(PContextWrapperChild* actor)
+{
+  delete actor;
+  return true;
+}
diff --git a/ipc/testshell/TestShellChild.h b/ipc/testshell/TestShellChild.h
--- a/ipc/testshell/TestShellChild.h
+++ b/ipc/testshell/TestShellChild.h
@@ -39,16 +39,21 @@
 
 #include "mozilla/ipc/PTestShellChild.h"
 #include "mozilla/ipc/PTestShellCommandChild.h"
 #include "mozilla/ipc/XPCShellEnvironment.h"
 
 #include "nsAutoPtr.h"
 
 namespace mozilla {
+
+namespace jsipc {
+class PContextWrapperChild;
+}
+
 namespace ipc {
 
 class XPCShellEnvironment;
 
 class TestShellChild : public PTestShellChild
 {
 public:
   TestShellChild();
@@ -61,21 +66,19 @@ public:
 
   bool
   RecvPTestShellCommandConstructor(PTestShellCommandChild* aActor,
                                    const nsString& aCommand);
 
   bool
   DeallocPTestShellCommand(PTestShellCommandChild* aCommand);
 
-  XPCShellEnvironment* GetXPCShell() const { return mXPCShell; }
-  void SetXPCShell(XPCShellEnvironment* aXPCShell) {
-    mXPCShell = aXPCShell;
-  }
-
+  PContextWrapperChild* AllocPContextWrapper();
+  bool DeallocPContextWrapper(PContextWrapperChild* actor);
+  
 private:
   nsAutoPtr<XPCShellEnvironment> mXPCShell;
 };
 
 } /* namespace ipc */
 } /* namespace mozilla */
 
 #endif /* ipc_testshell_TestShellChild_h */
diff --git a/ipc/testshell/TestShellParent.cpp b/ipc/testshell/TestShellParent.cpp
--- a/ipc/testshell/TestShellParent.cpp
+++ b/ipc/testshell/TestShellParent.cpp
@@ -30,22 +30,25 @@
  * decision by deleting the provisions above and replace them with the notice
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 #include "TestShellParent.h"
+#include "mozilla/jsipc/ContextWrapperParent.h"
 
 #include "nsAutoPtr.h"
 
 using mozilla::ipc::TestShellParent;
 using mozilla::ipc::TestShellCommandParent;
 using mozilla::ipc::PTestShellCommandParent;
+using mozilla::jsipc::PContextWrapperParent;
+using mozilla::jsipc::ContextWrapperParent;
 
 PTestShellCommandParent*
 TestShellParent::AllocPTestShellCommand(const nsString& aCommand)
 {
   return new TestShellCommandParent();
 }
 
 bool
@@ -61,16 +64,42 @@ TestShellParent::CommandDone(TestShellCo
 {
   // XXX what should happen if the callback fails?
   /*JSBool ok = */command->RunCallback(aResponse);
   command->ReleaseCallback();
 
   return true;
 }
 
+PContextWrapperParent*
+TestShellParent::AllocPContextWrapper()
+{
+    return new ContextWrapperParent();
+}
+
+bool
+TestShellParent::DeallocPContextWrapper(PContextWrapperParent* actor)
+{
+    delete actor;
+    return true;
+}
+
+bool
+TestShellParent::GetGlobalJSObject(JSContext* cx, JSObject** globalp)
+{
+    // TODO Unify this code with TabParent::GetGlobalJSObject.
+    nsTArray<PContextWrapperParent*> cwps(1);
+    ManagedPContextWrapperParent(cwps);
+    if (cwps.Length() < 1)
+        return false;
+    NS_ASSERTION(cwps.Length() == 1, "More than one PContextWrapper?");
+    return (static_cast<ContextWrapperParent*>(cwps[0])
+            ->GetGlobalJSObject(cx, globalp));
+}
+
 JSBool
 TestShellCommandParent::SetCallback(JSContext* aCx,
                                     jsval aCallback)
 {
   if (!mCallback.Hold(aCx)) {
     return JS_FALSE;
   }
 
diff --git a/ipc/testshell/TestShellParent.h b/ipc/testshell/TestShellParent.h
--- a/ipc/testshell/TestShellParent.h
+++ b/ipc/testshell/TestShellParent.h
@@ -42,49 +42,45 @@
 
 #include "mozilla/ipc/PTestShellParent.h"
 #include "mozilla/ipc/PTestShellCommandParent.h"
 
 #include "jsapi.h"
 #include "nsAutoJSValHolder.h"
 #include "nsStringGlue.h"
 
+struct JSContext;
+struct JSObject;
+
 namespace mozilla {
 
 namespace jsipc {
 class PContextWrapperParent;
 }
 
 namespace ipc {
 
-using namespace mozilla::jsipc;
-
 class TestShellCommandParent;
 
 class TestShellParent : public PTestShellParent
 {
 public:
   PTestShellCommandParent*
   AllocPTestShellCommand(const nsString& aCommand);
 
   bool
   DeallocPTestShellCommand(PTestShellCommandParent* aActor);
 
   bool
   CommandDone(TestShellCommandParent* aActor, const nsString& aResponse);
 
-  void SetContextWrapper(PContextWrapperParent* pcwp) {
-    mContextWrapper = pcwp;
-  }
-  PContextWrapperParent* GetContextWrapper() const {
-    return mContextWrapper;
-  }
+  PContextWrapperParent* AllocPContextWrapper();
+  bool DeallocPContextWrapper(PContextWrapperParent* actor);
 
-private:
-  PContextWrapperParent* mContextWrapper;
+  bool GetGlobalJSObject(JSContext* cx, JSObject** globalp);
 };
 
 
 class TestShellCommandParent : public PTestShellCommandParent
 {
 public:
   TestShellCommandParent() : mCx(NULL) { }
 
diff --git a/js/src/ipc/PContextWrapper.ipdl b/js/src/ipc/PContextWrapper.ipdl
--- a/js/src/ipc/PContextWrapper.ipdl
+++ b/js/src/ipc/PContextWrapper.ipdl
@@ -1,17 +1,18 @@
-include protocol "PContentProcess.ipdl";
+include protocol "PIFrameEmbedding.ipdl";
+include protocol "PTestShell.ipdl";
 include protocol "PObjectWrapper.ipdl";
 
 namespace mozilla {
 namespace jsipc {
 
 rpc protocol PContextWrapper
 {
-    manager PContentProcess;
+    manager PIFrameEmbedding or PTestShell;
     manages PObjectWrapper;
 parent:
     __delete__();
     sync PObjectWrapper(bool makeGlobal);
  child:
     // Request depth managed locally, so only the first/last
     // BeginRequest/EndRequest calls cause IPC traffic.
     rpc BeginRequest();
diff --git a/toolkit/xre/nsEmbedFunctions.cpp b/toolkit/xre/nsEmbedFunctions.cpp
--- a/toolkit/xre/nsEmbedFunctions.cpp
+++ b/toolkit/xre/nsEmbedFunctions.cpp
@@ -564,23 +564,17 @@ XRE_SendTestShellCommand(JSContext* aCx,
 
     return true;
 }
 
 bool
 XRE_GetChildGlobalObject(JSContext* aCx, JSObject** aGlobalP)
 {
     TestShellParent* tsp = GetOrCreateTestShellParent();
-    NS_ENSURE_TRUE(tsp, false);
-
-    PContextWrapperParent* pcwp = tsp->GetContextWrapper();
-    ContextWrapperParent* cwp =
-        static_cast<ContextWrapperParent*>(pcwp);
-    
-    return cwp->GetGlobalJSObject(aCx, aGlobalP);
+    return tsp && tsp->GetGlobalJSObject(aCx, aGlobalP);
 }
 
 bool
 XRE_ShutdownTestShell()
 {
   if (!gTestShellParent)
     return true;
   return ContentProcessParent::GetSingleton()->DestroyTestShell(gTestShellParent);
