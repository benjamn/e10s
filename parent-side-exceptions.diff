diff --git a/js/src/ipc/ObjectWrapperParent.cpp b/js/src/ipc/ObjectWrapperParent.cpp
--- a/js/src/ipc/ObjectWrapperParent.cpp
+++ b/js/src/ipc/ObjectWrapperParent.cpp
@@ -94,16 +94,34 @@ namespace {
             return (mStatus.type() == OperationStatus::TJSBool &&
                     mStatus.get_JSBool());
         }
 
     };
 
 }
 
+template <typename RType>
+static RType
+with_exception(JSContext* cx,
+               RType rval,
+               const char* error = NULL)
+{
+    if (!JS_IsExceptionPending(cx)) {
+        jsval x = JSVAL_VOID;
+        if (!error)
+            error = "Unspecified CPOW error";
+        JSString* str = JS_NewStringCopyZ(cx, error);
+        if (str)
+            x = STRING_TO_JSVAL(str);
+        JS_SetPendingException(cx, x);
+    }
+    return rval;
+}
+
 void
 ObjectWrapperParent::CheckOperation(JSContext* cx,
                                     OperationStatus* status)
 {
     NS_PRECONDITION(status->type() != OperationStatus::T__None,
                     "Checking an uninitialized operation.");
 
     switch (status->type()) {
@@ -111,17 +129,18 @@ ObjectWrapperParent::CheckOperation(JSCo
         {
             jsval thrown;
             if (jsval_from_JSVariant(cx, status->get_JSVariant(), &thrown))
                 JS_SetPendingException(cx, thrown);
             *status = JS_FALSE;
         }
         break;
     case OperationStatus::TJSBool:
-        NS_ASSERTION(status->get_JSBool(), "Failed without setting an exception.");
+        if (!status->get_JSBool() && !JS_IsExceptionPending(cx))
+            NS_WARNING("CPOW operation failed without setting an exception");
         break;
     default:
         NS_NOTREACHED("Invalid or uninitialized OperationStatus type.");
         break;
     }
 }
 
 const JSExtendedClass ObjectWrapperParent::sCPOW_JSClass = {
@@ -204,45 +223,46 @@ ObjectWrapperParent::jsval_to_JSVariant(
     switch (JS_TypeOfValue(cx, from)) {
     case JSTYPE_VOID:
         *to = void_t();
         return true;
     case JSTYPE_NULL:
         if (from != JSVAL_NULL)
             return false;
         // fall through
+    case JSTYPE_FUNCTION:
+        // CPOWs can fool JS_TypeOfValue into returning JSTYPE_FUNCTION
+        // because they have a call hook, but CPOWs are really objects, so
+        // fall through to the JSTYPE_OBJECT case:
     case JSTYPE_OBJECT:
         {
             PObjectWrapperParent* powp;
             if (!JSObject_to_PObjectWrapperParent(cx, JSVAL_TO_OBJECT(from), &powp))
-                return false;
+                return with_exception(cx, false, "Cannot pass parent-created object to child");
             *to = powp;
         }
         return true;
-    case JSTYPE_FUNCTION:
-        // CPOW-wrapped functions have JSTYPE_OBJECT, so this function
-        // must be unknown to the child process.
-        return false;
     case JSTYPE_STRING:
         *to = nsDependentString((PRUnichar*)JS_GetStringChars(JSVAL_TO_STRING(from)),
                                 JS_GetStringLength(JSVAL_TO_STRING(from)));
         return true;
     case JSTYPE_NUMBER:
         if (JSVAL_IS_INT(from))
             *to = JSVAL_TO_INT(from);
         else if (JSVAL_IS_DOUBLE(from))
             *to = *JSVAL_TO_DOUBLE(from);
         else return false;
         return true;
     case JSTYPE_BOOLEAN:
         *to = !!JSVAL_TO_BOOLEAN(from);
         return true;
     case JSTYPE_XML:
+        return with_exception(cx, false, "CPOWs currently cannot handle JSTYPE_XML");
     default:
-        return false;
+        return with_exception(cx, false, "Bad jsval type");
     }
 }
 
 /*static*/ bool
 ObjectWrapperParent::jsval_from_JSVariant(JSContext* cx, const JSVariant& from,
                                           jsval* to)
 {
     switch (from.type()) {
@@ -250,30 +270,32 @@ ObjectWrapperParent::jsval_from_JSVarian
         *to = JSVAL_VOID;
         return true;
     case JSVariant::TPObjectWrapperParent:
         return jsval_from_PObjectWrapperParent(cx, from.get_PObjectWrapperParent(), to);
     case JSVariant::TnsString:
         {
             JSString* str = JS_NewUCStringCopyZ(cx, from.get_nsString().BeginReading());
             if (!str)
-                return false;
+                return with_exception(cx, false, "Could not create string from JSVariant");
             *to = STRING_TO_JSVAL(str);
             return true;
         }
     case JSVariant::Tint:
         *to = INT_TO_JSVAL(from.get_int());
         return true;
     case JSVariant::Tdouble:
-        return !!JS_NewDoubleValue(cx, from.get_double(), to);
+        if (!JS_NewDoubleValue(cx, from.get_double(), to))
+            return with_exception(cx, false, "Bad double value from JSVariant");
+        return true;
     case JSVariant::Tbool:
         *to = BOOLEAN_TO_JSVAL(from.get_bool());
         return true;
     default:
-        return false;
+        return with_exception(cx, false, "Bad JSVariant type");
     }
 }
 
 /*static*/ bool
 ObjectWrapperParent::
 JSObject_to_PObjectWrapperParent(JSContext* cx, JSObject* from,
                                  PObjectWrapperParent** to)
 {
@@ -305,35 +327,35 @@ JSObject_from_PObjectWrapperParent(JSCon
 /*static*/ bool
 ObjectWrapperParent::
 jsval_from_PObjectWrapperParent(JSContext* cx,
                                 const PObjectWrapperParent* from,
                                 jsval* to)
 {
     JSObject* obj;
     if (!JSObject_from_PObjectWrapperParent(cx, from, &obj))
-        return false;
+        return with_exception(cx, false, "CPOW could not be converted to a jsval, bizarre");
     *to = OBJECT_TO_JSVAL(obj);
     return true;
 }
     
 static bool
 jsid_from_int(JSContext* cx, int from, jsid* to)
 {
     jsval v = INT_TO_JSVAL(from);
-    return JS_ValueToId(cx, v, to);
+    return (JS_ValueToId(cx, v, to) ||
+            with_exception(cx, false, "int could not be converted to a jsid"));
 }
 
 static bool
 jsid_from_nsString(JSContext* cx, const nsString& from, jsid* to)
 {
     JSString* str = JS_NewUCStringCopyZ(cx, from.BeginReading());
-    if (!str)
-        return false;
-    return JS_ValueToId(cx, STRING_TO_JSVAL(str), to);
+    return ((str && JS_ValueToId(cx, STRING_TO_JSVAL(str), to)) ||
+            with_exception(cx, false, "nsString could not be converted to jsid"));
 }
 
 static bool
 jsval_to_nsString(JSContext* cx, jsval from, nsString* to)
 {
     JSString* str;
     if ((str = JS_ValueToString(cx, from))) {
         *to = JS_GetStringChars(str);
@@ -346,52 +368,55 @@ jsval_to_nsString(JSContext* cx, jsval f
 ObjectWrapperParent::CPOW_AddProperty(JSContext *cx, JSObject *obj, jsval id,
                                       jsval *vp)
 {
     CPOW_LOG(("Calling CPOW_AddProperty (%s)...",
               JSVAL_TO_CSTR(cx, id)));
 
     ObjectWrapperParent* self = Unwrap(cx, obj);
     if (!self)
-        return JS_FALSE;
+        return with_exception(cx, JS_FALSE,
+                              "Unwrapping failed in CPOW_AddProperty");
 
     if (AutoResolveFlag::IsSet(cx, obj))
         return JS_TRUE;
 
     AutoCheckOperation aco(cx, self);
 
     nsString in_id;
 
     if (!jsval_to_nsString(cx, id, &in_id))
-        return JS_FALSE;
+        return with_exception(cx, JS_FALSE,
+                              "Could not convert id to nsString in CPOW_AddProperty");
 
     return (self->Manager()->RequestRunToCompletion() &&
             self->CallAddProperty(in_id,
                                   aco.StatusPtr()) &&
             aco.Ok());
 }
 
 /*static*/ JSBool
 ObjectWrapperParent::CPOW_GetProperty(JSContext *cx, JSObject *obj, jsval id,
                                       jsval *vp)
 {
     CPOW_LOG(("Calling CPOW_GetProperty (%s)...",
               JSVAL_TO_CSTR(cx, id)));
 
     ObjectWrapperParent* self = Unwrap(cx, obj);
     if (!self)
-        return JS_FALSE;
+        return with_exception(cx, JS_FALSE,
+                              "Unwrapping failed in CPOW_GetProperty");
 
     AutoCheckOperation aco(cx, self);
 
     nsString in_id;
 
     if (!jsval_to_nsString(cx, id, &in_id))
-        return JS_FALSE;
-
+        return with_exception(cx, JS_FALSE,
+                              "Could not convert id to nsString in CPOW_GetProperty");
     JSVariant out_v;
     
     return (self->Manager()->RequestRunToCompletion() &&
             self->CallGetProperty(in_id,
                                   aco.StatusPtr(), &out_v) &&
             aco.Ok() &&
             self->jsval_from_JSVariant(cx, out_v, vp));
 }
@@ -400,27 +425,31 @@ ObjectWrapperParent::CPOW_GetProperty(JS
 ObjectWrapperParent::CPOW_SetProperty(JSContext *cx, JSObject *obj, jsval id,
                                       jsval *vp)
 {
     CPOW_LOG(("Calling CPOW_SetProperty (%s)...",
               JSVAL_TO_CSTR(cx, id)));
 
     ObjectWrapperParent* self = Unwrap(cx, obj);
     if (!self)
-        return JS_FALSE;
+        return with_exception(cx, JS_FALSE,
+                              "Unwrapping failed in CPOW_SetProperty");
 
     AutoCheckOperation aco(cx, self);
 
     nsString in_id;
     JSVariant in_v;
 
-    if (!jsval_to_nsString(cx, id, &in_id) ||
-        !self->jsval_to_JSVariant(cx, *vp, &in_v))
-        return JS_FALSE;
+    if (!jsval_to_nsString(cx, id, &in_id))
+        return with_exception(cx, JS_FALSE,
+                              "Could not convert id to nsString in CPOW_SetProperty");
     
+    if (!self->jsval_to_JSVariant(cx, *vp, &in_v))
+        return with_exception(cx, JS_FALSE,
+                              "Could not convert *vp to JSVariant in CPOW_SetProperty");
     JSVariant out_v;
 
     return (self->Manager()->RequestRunToCompletion() &&
             self->CallSetProperty(in_id, in_v,
                                   aco.StatusPtr(), &out_v) &&
             aco.Ok() &&
             self->jsval_from_JSVariant(cx, out_v, vp));
 }    
@@ -429,25 +458,26 @@ ObjectWrapperParent::CPOW_SetProperty(JS
 ObjectWrapperParent::CPOW_DelProperty(JSContext *cx, JSObject *obj, jsval id,
                                       jsval *vp)
 {
     CPOW_LOG(("Calling CPOW_DelProperty (%s)...",
               JSVAL_TO_CSTR(cx, id)));
 
     ObjectWrapperParent* self = Unwrap(cx, obj);
     if (!self)
-        return JS_FALSE;
+        return with_exception(cx, JS_FALSE,
+                              "Unwrapping failed in CPOW_DelProperty");
 
     AutoCheckOperation aco(cx, self);
 
     nsString in_id;
 
     if (!jsval_to_nsString(cx, id, &in_id))
-        return JS_FALSE;
-
+        return with_exception(cx, JS_FALSE,
+                              "Could not convert id to nsString in CPOW_DelProperty");
     JSVariant out_v;
     
     return (self->Manager()->RequestRunToCompletion() &&
             self->CallDelProperty(in_id,
                                   aco.StatusPtr(), &out_v) &&
             aco.Ok() &&
             jsval_from_JSVariant(cx, out_v, vp));
 }
@@ -469,18 +499,18 @@ ObjectWrapperParent::NewEnumerateInit(JS
 JSBool
 ObjectWrapperParent::NewEnumerateNext(JSContext* cx, jsval* statep, jsid* idp)
 {
     AutoCheckOperation aco(cx, this);
 
     JSVariant in_state;
 
     if (!jsval_to_JSVariant(cx, *statep, &in_state))
-        return JS_FALSE;
-
+        return with_exception(cx, JS_FALSE,
+                              "Could not convert *statep to JSVariant in NewEnumerateNext");
     JSVariant out_state;
     nsString out_id;
 
     if (CallNewEnumerateNext(in_state,
                              aco.StatusPtr(), &out_state, &out_id) &&
         aco.Ok() &&
         jsval_from_JSVariant(cx, out_state, statep) &&
         jsid_from_nsString(cx, out_id, idp))
@@ -510,48 +540,51 @@ ObjectWrapperParent::NewEnumerateDestroy
 ObjectWrapperParent::CPOW_NewEnumerate(JSContext *cx, JSObject *obj,
                                        JSIterateOp enum_op, jsval *statep,
                                        jsid *idp)
 {
     CPOW_LOG(("Calling CPOW_NewEnumerate..."));
 
     ObjectWrapperParent* self = Unwrap(cx, obj);
     if (!self)
-        return JS_FALSE;
-
+        return with_exception(cx, JS_FALSE,
+                              "Unwrapping failed in CPOW_NewEnumerate");
     switch (enum_op) {
     case JSENUMERATE_INIT:
         self->Manager()->RequestRunToCompletion();
         return self->NewEnumerateInit(cx, statep, idp);
     case JSENUMERATE_NEXT:
         return self->NewEnumerateNext(cx, statep, idp);
     case JSENUMERATE_DESTROY:
         return self->NewEnumerateDestroy(cx, *statep);
     }
 
-    return JS_FALSE;
+    return with_exception(cx, JS_FALSE,
+                          "Unknown enum_op value in CPOW_NewEnumerate");
 }
 
 /*static*/ JSBool
 ObjectWrapperParent::CPOW_NewResolve(JSContext *cx, JSObject *obj, jsval id,
                                      uintN flags, JSObject **objp)
 {
     CPOW_LOG(("Calling CPOW_NewResolve (%s)...",
               JSVAL_TO_CSTR(cx, id)));
 
     ObjectWrapperParent* self = Unwrap(cx, obj);
     if (!self)
-        return JS_FALSE;
+        return with_exception(cx, JS_FALSE,
+                              "Unwrapping failed in CPOW_NewResolve");
 
     AutoCheckOperation aco(cx, self);
 
     nsString in_id;
 
     if (!jsval_to_nsString(cx, id, &in_id))
-        return JS_FALSE;
+        return with_exception(cx, JS_FALSE,
+                              "Could not convert id to nsString in CPOW_NewResolve");
 
     PObjectWrapperParent* out_pobj;
 
     if (!self->Manager()->RequestRunToCompletion() ||
         !self->CallNewResolve(in_id, flags,
                               aco.StatusPtr(), &out_pobj) ||
         !aco.Ok() ||
         !JSObject_from_PObjectWrapperParent(cx, out_pobj, objp))
@@ -571,17 +604,18 @@ ObjectWrapperParent::CPOW_NewResolve(JSC
 ObjectWrapperParent::CPOW_Convert(JSContext *cx, JSObject *obj, JSType type,
                                   jsval *vp)
 {
     CPOW_LOG(("Calling CPOW_Convert (to %s)...",
               JS_GetTypeName(cx, type)));
 
     ObjectWrapperParent* self = Unwrap(cx, obj);
     if (!self)
-        return JS_FALSE;
+        return with_exception(cx, JS_FALSE,
+                              "Unwrapping failed in CPOW_Convert");
 
     *vp = OBJECT_TO_JSVAL(obj);
 
     return JS_TRUE;
 }
 
 /*static*/ void
 ObjectWrapperParent::CPOW_Finalize(JSContext* cx, JSObject* obj)
@@ -597,34 +631,36 @@ ObjectWrapperParent::CPOW_Finalize(JSCon
 ObjectWrapperParent::CPOW_Call(JSContext* cx, JSObject* obj, uintN argc,
                                jsval* argv, jsval* rval)
 {
     CPOW_LOG(("Calling CPOW_Call..."));
 
     ObjectWrapperParent* function =
         Unwrap(cx, JSVAL_TO_OBJECT(JS_ARGV_CALLEE(argv)));
     if (!function)
-        return JS_FALSE;
+        return with_exception(cx, JS_FALSE,
+                              "Could not unwrap CPOW function");
 
     AutoCheckOperation aco(cx, function);
 
     ObjectWrapperParent* receiver = Unwrap(cx, obj);
     if (!receiver) {
         // Substitute child global for parent global object.
         // TODO First make sure we're really replacing the global object?
         ContextWrapperParent* manager =
             static_cast<ContextWrapperParent*>(function->Manager());
         receiver = manager->GetGlobalObjectWrapper();
     }
 
     nsTArray<JSVariant> in_argv(argc);
     for (uintN i = 0; i < argc; i++)
         if (!jsval_to_JSVariant(cx, argv[i], in_argv.AppendElement()))
-            return JS_FALSE;
-    
+            return with_exception(cx, JS_FALSE,
+                                  "Passing an invalid argument when calling a "
+                                  "CPOW as a function");
     JSVariant out_rval;
 
     return (function->Manager()->RequestRunToCompletion() &&
             function->CallCall(receiver, in_argv,
                                aco.StatusPtr(), &out_rval) &&
             aco.Ok() &&
             jsval_from_JSVariant(cx, out_rval, rval));
 }
@@ -633,24 +669,27 @@ ObjectWrapperParent::CPOW_Call(JSContext
 ObjectWrapperParent::CPOW_Construct(JSContext *cx, JSObject *obj, uintN argc,
                                     jsval *argv, jsval *rval)
 {
     CPOW_LOG(("Calling CPOW_Construct..."));
     
     ObjectWrapperParent* constructor =
         Unwrap(cx, JSVAL_TO_OBJECT(JS_ARGV_CALLEE(argv)));
     if (!constructor)
-        return JS_FALSE;
+        return with_exception(cx, JS_FALSE,
+                              "Could not unwrap CPOW constructor function");
 
     AutoCheckOperation aco(cx, constructor);
 
     nsTArray<JSVariant> in_argv(argc);
     for (uintN i = 0; i < argc; i++)
         if (!jsval_to_JSVariant(cx, argv[i], in_argv.AppendElement()))
-            return JS_FALSE;
+            return with_exception(cx, JS_FALSE,
+                                  "Passing an invalid argument when using a "
+                                  "CPOW as a constructor");
 
     PObjectWrapperParent* out_powp;
 
     return (constructor->Manager()->RequestRunToCompletion() &&
             constructor->CallConstruct(in_argv,
                                        aco.StatusPtr(), &out_powp) &&
             aco.Ok() &&
             jsval_from_PObjectWrapperParent(cx, out_powp, rval));
@@ -661,24 +700,26 @@ ObjectWrapperParent::CPOW_HasInstance(JS
                                       JSBool *bp)
 {
     CPOW_LOG(("Calling CPOW_HasInstance..."));
 
     *bp = JS_FALSE;
 
     ObjectWrapperParent* self = Unwrap(cx, obj);
     if (!self)
-        return JS_FALSE;
+        return with_exception(cx, JS_FALSE,
+                              "Unwrapping failed in CPOW_HasInstance");
 
     AutoCheckOperation aco(cx, self);
 
     JSVariant in_v;
 
     if (!jsval_to_JSVariant(cx, v, &in_v))
-        return JS_FALSE;
+        return with_exception(cx, JS_FALSE,
+                              "Could not convert instance to JSVariant in CPOW_HasInstance");
 
     return (self->Manager()->RequestRunToCompletion() &&
             self->CallHasInstance(in_v,
                                   aco.StatusPtr(), bp) &&
             aco.Ok());
 }
 
 /*static*/ JSBool
@@ -686,17 +727,18 @@ ObjectWrapperParent::CPOW_Equality(JSCon
                                    JSBool *bp)
 {
     CPOW_LOG(("Calling CPOW_Equality..."));
 
     *bp = JS_FALSE;
     
     ObjectWrapperParent* self = Unwrap(cx, obj);
     if (!self)
-        return JS_FALSE;
+        return with_exception(cx, JS_FALSE,
+                              "Unwrapping failed in CPOW_Equality");
 
     if (JSVAL_IS_PRIMITIVE(v))
         return JS_TRUE;
 
     ObjectWrapperParent* other = Unwrap(cx, JSVAL_TO_OBJECT(v));
     if (!other)
         return JS_TRUE;
 
