CPOW-specific exceptions (bug 541003).

diff --git a/js/src/ipc/ObjectWrapperParent.cpp b/js/src/ipc/ObjectWrapperParent.cpp
--- a/js/src/ipc/ObjectWrapperParent.cpp
+++ b/js/src/ipc/ObjectWrapperParent.cpp
@@ -142,26 +142,37 @@ ObjectWrapperParent::CheckOperation(JSCo
         {
             jsval thrown;
             if (jsval_from_JSVariant(cx, status->get_JSVariant(), &thrown))
                 JS_SetPendingException(cx, thrown);
             *status = JS_FALSE;
         }
         break;
     case OperationStatus::TJSBool:
-        if (!status->get_JSBool()) {
+        if (!status->get_JSBool() && !JS_IsExceptionPending(cx)) {
             NS_WARNING("CPOW operation failed without setting an exception.");
         }
         break;
     default:
         NS_NOTREACHED("Invalid or uninitialized OperationStatus type.");
         break;
     }
 }
 
+template <typename RType>
+static RType
+with_error(JSContext* cx,
+               RType rval,
+               const char* error = NULL)
+{
+    if (!JS_IsExceptionPending(cx))
+        JS_ReportError(cx, error ? error : "Unspecified CPOW error");
+    return rval;
+}
+
 const JSExtendedClass ObjectWrapperParent::sCPOW_JSClass = {
     // JSClass (JSExtendedClass.base) initialization
     { "CrossProcessObjectWrapper",
       JSCLASS_NEW_RESOLVE | JSCLASS_NEW_ENUMERATE | JSCLASS_IS_EXTENDED |
       JSCLASS_HAS_PRIVATE | JSCLASS_HAS_RESERVED_SLOTS(sNumSlots),
       ObjectWrapperParent::CPOW_AddProperty,
       ObjectWrapperParent::CPOW_DelProperty,
       ObjectWrapperParent::CPOW_GetProperty,
@@ -245,17 +256,17 @@ ObjectWrapperParent::jsval_to_JSVariant(
     case JSTYPE_FUNCTION:
         // CPOWs can fool JS_TypeOfValue into returning JSTYPE_FUNCTION
         // because they have a call hook, but CPOWs are really objects, so
         // fall through to the JSTYPE_OBJECT case:
     case JSTYPE_OBJECT:
         {
             PObjectWrapperParent* powp;
             if (!JSObject_to_PObjectWrapperParent(cx, JSVAL_TO_OBJECT(from), &powp))
-                return false;
+                return with_error(cx, false, "Cannot pass parent-created object to child");
             *to = powp;
         }
         return true;
     case JSTYPE_STRING:
         *to = nsDependentString((PRUnichar*)JS_GetStringChars(JSVAL_TO_STRING(from)),
                                 JS_GetStringLength(JSVAL_TO_STRING(from)));
         return true;
     case JSTYPE_NUMBER:
@@ -264,18 +275,19 @@ ObjectWrapperParent::jsval_to_JSVariant(
         else if (JSVAL_IS_DOUBLE(from))
             *to = *JSVAL_TO_DOUBLE(from);
         else return false;
         return true;
     case JSTYPE_BOOLEAN:
         *to = !!JSVAL_TO_BOOLEAN(from);
         return true;
     case JSTYPE_XML:
+        return with_error(cx, false, "CPOWs currently cannot handle JSTYPE_XML");
     default:
-        return false;
+        return with_error(cx, false, "Bad jsval type");
     }
 }
 
 /*static*/ bool
 ObjectWrapperParent::jsval_from_JSVariant(JSContext* cx, const JSVariant& from,
                                           jsval* to)
 {
     switch (from.type()) {
@@ -379,17 +391,17 @@ jsval_to_nsString(JSContext* cx, jsval f
 ObjectWrapperParent::CPOW_AddProperty(JSContext *cx, JSObject *obj, jsval id,
                                       jsval *vp)
 {
     CPOW_LOG(("Calling CPOW_AddProperty (%s)...",
               JSVAL_TO_CSTR(cx, id)));
 
     ObjectWrapperParent* self = Unwrap(cx, obj);
     if (!self)
-        return JS_FALSE;
+        return with_error(cx, JS_FALSE, "Unwrapping failed in CPOW_AddProperty");
 
     if (AutoResolveFlag::IsSet(cx, obj))
         return JS_TRUE;
 
     AutoCheckOperation aco(cx, self);
 
     nsString in_id;
 
@@ -406,17 +418,17 @@ ObjectWrapperParent::CPOW_AddProperty(JS
 ObjectWrapperParent::CPOW_GetProperty(JSContext *cx, JSObject *obj, jsval id,
                                       jsval *vp)
 {
     CPOW_LOG(("Calling CPOW_GetProperty (%s)...",
               JSVAL_TO_CSTR(cx, id)));
 
     ObjectWrapperParent* self = Unwrap(cx, obj);
     if (!self)
-        return JS_FALSE;
+        return with_error(cx, JS_FALSE, "Unwrapping failed in CPOW_GetProperty");
 
     AutoCheckOperation aco(cx, self);
 
     nsString in_id;
 
     if (!jsval_to_nsString(cx, id, &in_id))
         return JS_FALSE;
 
@@ -433,27 +445,27 @@ ObjectWrapperParent::CPOW_GetProperty(JS
 ObjectWrapperParent::CPOW_SetProperty(JSContext *cx, JSObject *obj, jsval id,
                                       jsval *vp)
 {
     CPOW_LOG(("Calling CPOW_SetProperty (%s)...",
               JSVAL_TO_CSTR(cx, id)));
 
     ObjectWrapperParent* self = Unwrap(cx, obj);
     if (!self)
-        return JS_FALSE;
+        return with_error(cx, JS_FALSE, "Unwrapping failed in CPOW_SetProperty");
 
     AutoCheckOperation aco(cx, self);
 
     nsString in_id;
     JSVariant in_v;
 
     if (!jsval_to_nsString(cx, id, &in_id) ||
         !self->jsval_to_JSVariant(cx, *vp, &in_v))
         return JS_FALSE;
-    
+
     JSVariant out_v;
 
     return (self->Manager()->RequestRunToCompletion() &&
             self->CallSetProperty(in_id, in_v,
                                   aco.StatusPtr(), &out_v) &&
             aco.Ok() &&
             self->jsval_from_JSVariant(cx, out_v, vp));
 }    
@@ -462,17 +474,17 @@ ObjectWrapperParent::CPOW_SetProperty(JS
 ObjectWrapperParent::CPOW_DelProperty(JSContext *cx, JSObject *obj, jsval id,
                                       jsval *vp)
 {
     CPOW_LOG(("Calling CPOW_DelProperty (%s)...",
               JSVAL_TO_CSTR(cx, id)));
 
     ObjectWrapperParent* self = Unwrap(cx, obj);
     if (!self)
-        return JS_FALSE;
+        return with_error(cx, JS_FALSE, "Unwrapping failed in CPOW_DelProperty");
 
     AutoCheckOperation aco(cx, self);
 
     nsString in_id;
 
     if (!jsval_to_nsString(cx, id, &in_id))
         return JS_FALSE;
 
@@ -543,41 +555,42 @@ ObjectWrapperParent::NewEnumerateDestroy
 ObjectWrapperParent::CPOW_NewEnumerate(JSContext *cx, JSObject *obj,
                                        JSIterateOp enum_op, jsval *statep,
                                        jsid *idp)
 {
     CPOW_LOG(("Calling CPOW_NewEnumerate..."));
 
     ObjectWrapperParent* self = Unwrap(cx, obj);
     if (!self)
-        return JS_FALSE;
+        return with_error(cx, JS_FALSE, "Unwrapping failed in CPOW_NewEnumerate");
 
     switch (enum_op) {
     case JSENUMERATE_INIT:
         self->Manager()->RequestRunToCompletion();
         return self->NewEnumerateInit(cx, statep, idp);
     case JSENUMERATE_NEXT:
         return self->NewEnumerateNext(cx, statep, idp);
     case JSENUMERATE_DESTROY:
         return self->NewEnumerateDestroy(cx, *statep);
     }
 
+    NS_NOTREACHED("Unknown enum_op value in CPOW_NewEnumerate");
     return JS_FALSE;
 }
 
 /*static*/ JSBool
 ObjectWrapperParent::CPOW_NewResolve(JSContext *cx, JSObject *obj, jsval id,
                                      uintN flags, JSObject **objp)
 {
     CPOW_LOG(("Calling CPOW_NewResolve (%s)...",
               JSVAL_TO_CSTR(cx, id)));
 
     ObjectWrapperParent* self = Unwrap(cx, obj);
     if (!self)
-        return JS_FALSE;
+        return with_error(cx, JS_FALSE, "Unwrapping failed in CPOW_NewResolve");
 
     AutoCheckOperation aco(cx, self);
 
     nsString in_id;
 
     if (!jsval_to_nsString(cx, id, &in_id))
         return JS_FALSE;
 
@@ -604,17 +617,17 @@ ObjectWrapperParent::CPOW_NewResolve(JSC
 ObjectWrapperParent::CPOW_Convert(JSContext *cx, JSObject *obj, JSType type,
                                   jsval *vp)
 {
     CPOW_LOG(("Calling CPOW_Convert (to %s)...",
               JS_GetTypeName(cx, type)));
 
     ObjectWrapperParent* self = Unwrap(cx, obj);
     if (!self)
-        return JS_FALSE;
+        return with_error(cx, JS_FALSE, "Unwrapping failed in CPOW_Convert");
 
     *vp = OBJECT_TO_JSVAL(obj);
 
     return JS_TRUE;
 }
 
 /*static*/ void
 ObjectWrapperParent::CPOW_Finalize(JSContext* cx, JSObject* obj)
@@ -630,34 +643,34 @@ ObjectWrapperParent::CPOW_Finalize(JSCon
 ObjectWrapperParent::CPOW_Call(JSContext* cx, JSObject* obj, uintN argc,
                                jsval* argv, jsval* rval)
 {
     CPOW_LOG(("Calling CPOW_Call..."));
 
     ObjectWrapperParent* function =
         Unwrap(cx, JSVAL_TO_OBJECT(JS_ARGV_CALLEE(argv)));
     if (!function)
-        return JS_FALSE;
+        return with_error(cx, JS_FALSE, "Could not unwrap CPOW function");
 
     AutoCheckOperation aco(cx, function);
 
     ObjectWrapperParent* receiver = Unwrap(cx, obj);
     if (!receiver) {
         // Substitute child global for parent global object.
         // TODO First make sure we're really replacing the global object?
         ContextWrapperParent* manager =
             static_cast<ContextWrapperParent*>(function->Manager());
         receiver = manager->GetGlobalObjectWrapper();
     }
 
     nsTArray<JSVariant> in_argv(argc);
     for (uintN i = 0; i < argc; i++)
         if (!jsval_to_JSVariant(cx, argv[i], in_argv.AppendElement()))
             return JS_FALSE;
-    
+
     JSVariant out_rval;
 
     return (function->Manager()->RequestRunToCompletion() &&
             function->CallCall(receiver, in_argv,
                                aco.StatusPtr(), &out_rval) &&
             aco.Ok() &&
             jsval_from_JSVariant(cx, out_rval, rval));
 }
@@ -666,17 +679,17 @@ ObjectWrapperParent::CPOW_Call(JSContext
 ObjectWrapperParent::CPOW_Construct(JSContext *cx, JSObject *obj, uintN argc,
                                     jsval *argv, jsval *rval)
 {
     CPOW_LOG(("Calling CPOW_Construct..."));
     
     ObjectWrapperParent* constructor =
         Unwrap(cx, JSVAL_TO_OBJECT(JS_ARGV_CALLEE(argv)));
     if (!constructor)
-        return JS_FALSE;
+        return with_error(cx, JS_FALSE, "Could not unwrap CPOW constructor function");
 
     AutoCheckOperation aco(cx, constructor);
 
     nsTArray<JSVariant> in_argv(argc);
     for (uintN i = 0; i < argc; i++)
         if (!jsval_to_JSVariant(cx, argv[i], in_argv.AppendElement()))
             return JS_FALSE;
 
@@ -694,17 +707,17 @@ ObjectWrapperParent::CPOW_HasInstance(JS
                                       JSBool *bp)
 {
     CPOW_LOG(("Calling CPOW_HasInstance..."));
 
     *bp = JS_FALSE;
 
     ObjectWrapperParent* self = Unwrap(cx, obj);
     if (!self)
-        return JS_FALSE;
+        return with_error(cx, JS_FALSE, "Unwrapping failed in CPOW_HasInstance");
 
     AutoCheckOperation aco(cx, self);
 
     JSVariant in_v;
 
     if (!jsval_to_JSVariant(cx, v, &in_v))
         return JS_FALSE;
 
@@ -719,17 +732,17 @@ ObjectWrapperParent::CPOW_Equality(JSCon
                                    JSBool *bp)
 {
     CPOW_LOG(("Calling CPOW_Equality..."));
 
     *bp = JS_FALSE;
     
     ObjectWrapperParent* self = Unwrap(cx, obj);
     if (!self)
-        return JS_FALSE;
+        return with_error(cx, JS_FALSE, "Unwrapping failed in CPOW_Equality");
 
     if (JSVAL_IS_PRIMITIVE(v))
         return JS_TRUE;
 
     ObjectWrapperParent* other = Unwrap(cx, JSVAL_TO_OBJECT(v));
     if (!other)
         return JS_TRUE;
 
