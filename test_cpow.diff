diff --git a/dom/ipc/ContentProcessChild.cpp b/dom/ipc/ContentProcessChild.cpp
--- a/dom/ipc/ContentProcessChild.cpp
+++ b/dom/ipc/ContentProcessChild.cpp
@@ -36,16 +36,18 @@
  *
  * ***** END LICENSE BLOCK ***** */
 
 #include "ContentProcessChild.h"
 #include "TabChild.h"
 
 #include "mozilla/ipc/TestShellChild.h"
 #include "mozilla/net/NeckoChild.h"
+#include "mozilla/ipc/XPCShellEnvironment.h"
+#include "mozilla/jsipc/ObjectWrapperLiaisonChild.h"
 
 #include "nsXULAppAPI.h"
 
 #include "base/message_loop.h"
 #include "base/task.h"
 
 using namespace mozilla::ipc;
 using namespace mozilla::net;
@@ -110,16 +112,30 @@ ContentProcessChild::AllocPTestShell()
 }
 
 bool
 ContentProcessChild::DeallocPTestShell(PTestShellChild* shell)
 {
     mTestShells.RemoveElement(shell);
     return true;
 }
+    
+bool
+ContentProcessChild::RecvPTestShellConstructor(PTestShellChild* actor)
+{
+    XPCShellEnvironment* env;
+    ObjectWrapperLiaisonChild* owlc;
+    JSContext* cx;
+
+    if ((env = static_cast<TestShellChild*>(actor)->GetXPCShell()) &&
+        (cx = env->GetContext()) &&
+        (owlc = new ObjectWrapperLiaisonChild(cx)))
+        SendPObjectWrapperLiaisonConstructor(owlc, actor)
+            ->SendPObjectWrapperConstructor(true);
+}
 
 PNeckoChild* 
 ContentProcessChild::AllocPNecko()
 {
     return new NeckoChild();
 }
 
 bool 
diff --git a/dom/ipc/ContentProcessChild.h b/dom/ipc/ContentProcessChild.h
--- a/dom/ipc/ContentProcessChild.h
+++ b/dom/ipc/ContentProcessChild.h
@@ -67,16 +67,17 @@ public:
         return sSingleton;
     }
 
     virtual PIFrameEmbeddingChild* AllocPIFrameEmbedding();
     virtual bool DeallocPIFrameEmbedding(PIFrameEmbeddingChild*);
 
     virtual PTestShellChild* AllocPTestShell();
     virtual bool DeallocPTestShell(PTestShellChild*);
+    virtual bool RecvPTestShellConstructor(PTestShellChild* actor);
 
     virtual PNeckoChild* AllocPNecko();
     virtual bool DeallocPNecko(PNeckoChild*);
 
 protected:
     virtual PObjectWrapperLiaisonChild* AllocPObjectWrapperLiaison(const JSRuntimeOwner&);
     virtual bool DeallocPObjectWrapperLiaison(PObjectWrapperLiaisonChild* actor);
     
diff --git a/dom/ipc/ContentProcessParent.cpp b/dom/ipc/ContentProcessParent.cpp
--- a/dom/ipc/ContentProcessParent.cpp
+++ b/dom/ipc/ContentProcessParent.cpp
@@ -206,17 +206,21 @@ RecvPObjectWrapperLiaisonConstructor(POb
     case JSRuntimeOwner::TPIFrameEmbeddingParent:
         {
             const TabParent* tp =
                 static_cast<const TabParent*>(jsro.get_PIFrameEmbeddingParent());
             const_cast<TabParent*>(tp)->SetObjectWrapperLiaison(actor);
             return true;
         }
     case JSRuntimeOwner::TPTestShellParent:
-        // TODO
-        return true;
+        {
+            const TestShellParent* tsp =
+                static_cast<const TestShellParent*>(jsro.get_PTestShellParent());
+            const_cast<TestShellParent*>(tsp)->SetObjectWrapperLiaison(actor);
+            return true;
+        }
     default:
         return false;
     }
 }   
 
 } // namespace dom
 } // namespace mozilla
diff --git a/ipc/testshell/TestShellChild.cpp b/ipc/testshell/TestShellChild.cpp
--- a/ipc/testshell/TestShellChild.cpp
+++ b/ipc/testshell/TestShellChild.cpp
@@ -30,16 +30,17 @@
  * decision by deleting the provisions above and replace them with the notice
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 #include "TestShellChild.h"
+#include "mozilla/dom/PContentProcessChild.h"
 
 using mozilla::ipc::TestShellChild;
 using mozilla::ipc::PTestShellCommandChild;
 using mozilla::ipc::XPCShellEnvironment;
 
 TestShellChild::TestShellChild()
 : mXPCShell(XPCShellEnvironment::CreateEnvironment())
 {
diff --git a/ipc/testshell/TestShellChild.h b/ipc/testshell/TestShellChild.h
--- a/ipc/testshell/TestShellChild.h
+++ b/ipc/testshell/TestShellChild.h
@@ -61,16 +61,17 @@ public:
 
   bool
   RecvPTestShellCommandConstructor(PTestShellCommandChild* aActor,
                                    const nsString& aCommand);
 
   bool
   DeallocPTestShellCommand(PTestShellCommandChild* aCommand);
 
+  XPCShellEnvironment* GetXPCShell() const { return mXPCShell; }
   void SetXPCShell(XPCShellEnvironment* aXPCShell) {
     mXPCShell = aXPCShell;
   }
 
 private:
   nsAutoPtr<XPCShellEnvironment> mXPCShell;
 };
 
diff --git a/ipc/testshell/TestShellParent.h b/ipc/testshell/TestShellParent.h
--- a/ipc/testshell/TestShellParent.h
+++ b/ipc/testshell/TestShellParent.h
@@ -43,32 +43,48 @@
 #include "mozilla/ipc/PTestShellParent.h"
 #include "mozilla/ipc/PTestShellCommandParent.h"
 
 #include "jsapi.h"
 #include "nsAutoJSValHolder.h"
 #include "nsStringGlue.h"
 
 namespace mozilla {
+
+namespace jsipc {
+class PObjectWrapperLiaisonParent;
+}
+
 namespace ipc {
 
+using namespace mozilla::jsipc;
+
 class TestShellCommandParent;
 
-
 class TestShellParent : public PTestShellParent
 {
 public:
   PTestShellCommandParent*
   AllocPTestShellCommand(const nsString& aCommand);
 
   bool
   DeallocPTestShellCommand(PTestShellCommandParent* aActor);
 
   bool
   CommandDone(TestShellCommandParent* aActor, const nsString& aResponse);
+
+  void SetObjectWrapperLiaison(PObjectWrapperLiaisonParent* powlp) {
+    mObjectWrapperLiaison = powlp;
+  }
+  PObjectWrapperLiaisonParent* GetObjectWrapperLiaison() const {
+    return mObjectWrapperLiaison;
+  }
+
+private:
+  PObjectWrapperLiaisonParent* mObjectWrapperLiaison;
 };
 
 
 class TestShellCommandParent : public PTestShellCommandParent
 {
 public:
   TestShellCommandParent() : mCx(NULL) { }
 
diff --git a/ipc/testshell/XPCShellEnvironment.h b/ipc/testshell/XPCShellEnvironment.h
--- a/ipc/testshell/XPCShellEnvironment.h
+++ b/ipc/testshell/XPCShellEnvironment.h
@@ -68,16 +68,20 @@ public:
     JSPrincipals* GetPrincipal() {
         return mJSPrincipals;
     }
 
     JSObject* GetGlobalObject() {
         return mGlobalHolder.ToJSObject();
     }
 
+    JSContext* GetContext() {
+        return mCx;
+    }
+
     void SetExitCode(int aExitCode) {
         mExitCode = aExitCode;
     }
     int ExitCode() {
         return mExitCode;
     }
 
     void SetIsQuitting() {
@@ -124,9 +128,9 @@ private:
     JSBool mQuitting;
     JSBool mReportWarnings;
     JSBool mCompileOnly;
 };
 
 } /* namespace ipc */
 } /* namespace mozilla */
 
-#endif /* _IPC_TESTSHELL_XPCSHELLENVIRONMENT_H_ */
\ No newline at end of file
+#endif /* _IPC_TESTSHELL_XPCSHELLENVIRONMENT_H_ */
diff --git a/js/src/ipc/Makefile.in b/js/src/ipc/Makefile.in
--- a/js/src/ipc/Makefile.in
+++ b/js/src/ipc/Makefile.in
@@ -58,13 +58,17 @@ EXPORTS_mozilla/jsipc = \
   ObjectWrapperChild.h \
   $(NULL)
 
 CPPSRCS = \
   ObjectWrapperParent.cpp \
   ObjectWrapperChild.cpp \
   $(NULL)
 
+ifdef ENABLE_TESTS
+TOOL_DIRS  += tests
+endif
+
 include $(topsrcdir)/config/config.mk
 include $(topsrcdir)/ipc/chromium/chromium-config.mk
 include $(topsrcdir)/config/rules.mk
 
 DEFINES += -DBIN_SUFFIX='"$(BIN_SUFFIX)"'
diff --git a/js/src/ipc/ObjectWrapperChild.cpp b/js/src/ipc/ObjectWrapperChild.cpp
--- a/js/src/ipc/ObjectWrapperChild.cpp
+++ b/js/src/ipc/ObjectWrapperChild.cpp
@@ -1,10 +1,11 @@
 #include "mozilla/jsipc/ObjectWrapperLiaisonChild.h"
 #include "mozilla/jsipc/ObjectWrapperChild.h"
+#include "mozilla/jsipc/CPOWTypes.h"
 
 #include "nsTArray.h"
 
 namespace mozilla {
 namespace jsipc {
 
 ObjectWrapperChild::ObjectWrapperChild(JSContext* cx, JSObject* obj)
     : mContext(cx)
@@ -386,18 +387,18 @@ ObjectWrapperChild::AnswerNewResolve(con
 {
     jsid interned_id;
     
     *ok = false;
     *obj2 = NULL;
     
     JSAutoRequest request(mContext);
 
-    printf("new-resolving \"%s\"...\n", NS_ConvertUTF16toUTF8(id).get());
-    fflush(0);
+    CLOG(("new-resolving \"%s\"...\n",
+          NS_ConvertUTF16toUTF8(id).get()));
 
     if (!jsid_from_nsString(mContext, id, &interned_id))
         return false;
 
     JSPropertyDescriptor desc;
     if (!JS_GetPropertyDescriptorById(mContext, mObj, interned_id, flags, &desc))
         return true;
 
diff --git a/js/src/ipc/ObjectWrapperLiaisonParent.h b/js/src/ipc/ObjectWrapperLiaisonParent.h
--- a/js/src/ipc/ObjectWrapperLiaisonParent.h
+++ b/js/src/ipc/ObjectWrapperLiaisonParent.h
@@ -55,16 +55,24 @@ public:
 
     bool AttachGlobal(JSContext* cx, JSObject* to, jsid id)
     {
         return (mGlobal &&
                 JS_DefinePropertyById(cx, to, id, mGlobal->GetJSVal(cx), NULL,
                                       NULL, 0));
     }
 
+    bool GetGlobal(JSContext* cx, JSObject** globalp)
+    {
+        if (!mGlobal)
+            return false;
+        *globalp = mGlobal->GetJSObject(cx);
+        return true;
+    }
+
 private:
 
     ObjectWrapperParent* mGlobal;
 
     PObjectWrapperParent* AllocPObjectWrapper(const bool&) {
         return new ObjectWrapperParent();
     }
 
diff --git a/js/src/ipc/ObjectWrapperParent.cpp b/js/src/ipc/ObjectWrapperParent.cpp
--- a/js/src/ipc/ObjectWrapperParent.cpp
+++ b/js/src/ipc/ObjectWrapperParent.cpp
@@ -1,12 +1,13 @@
 #include "mozilla/jsipc/ObjectWrapperParent.h"
 #include "mozilla/jsipc/CPOWTypes.h"
 
 #include "jsobj.h"
+#include "jsfun.h"
 
 namespace mozilla {
 namespace jsipc {
 
 namespace {
 
     typedef ObjectWrapperParent _;
 
@@ -253,21 +254,25 @@ jsval_to_nsString(JSContext* cx, jsval f
     JSString* str;
     if ((str = JS_ValueToString(cx, from))) {
         *to = JS_GetStringChars(str);
         return true;
     }
     return false;
 }
 
+#define JSVAL_TO_CSTR(CX, V) \
+    NS_ConvertUTF16toUTF8(nsString(JS_GetStringChars(JS_ValueToString(CX, V)))).get()
+
 /*static*/ JSBool
 ObjectWrapperParent::CPOW_AddProperty(JSContext *cx, JSObject *obj, jsval id,
                                       jsval *vp)
 {
-    CLOG(("Calling CPOW_AddProperty...\n"));
+    CLOG(("Calling CPOW_AddProperty (%s)...\n",
+          JSVAL_TO_CSTR(cx, id)));
 
     // Unwrap always has to come first!
     ObjectWrapperParent* self = Unwrap(cx, obj);
     if (!self)
         return JS_FALSE;
 
     if (AutoResolveFlag::IsSet(cx, obj))
         return JS_TRUE;
@@ -279,17 +284,18 @@ ObjectWrapperParent::CPOW_AddProperty(JS
 
     return self->CallAddProperty(in_id);
 }    
 
 /*static*/ JSBool
 ObjectWrapperParent::CPOW_GetProperty(JSContext *cx, JSObject *obj, jsval id,
                                       jsval *vp)
 {
-    CLOG(("Calling CPOW_GetProperty...\n"));
+    CLOG(("Calling CPOW_GetProperty (%s)...\n",
+          JSVAL_TO_CSTR(cx, id)));
 
     ObjectWrapperParent* self = Unwrap(cx, obj);
     if (!self)
         return JS_FALSE;
 
     nsString in_id;
 
     if (!jsval_to_nsString(cx, id, &in_id))
@@ -303,17 +309,18 @@ ObjectWrapperParent::CPOW_GetProperty(JS
             out_ok &&
             self->jsval_from_JSVariant(cx, out_v, vp));
 }
 
 /*static*/ JSBool
 ObjectWrapperParent::CPOW_SetProperty(JSContext *cx, JSObject *obj, jsval id,
                                       jsval *vp)
 {
-    CLOG(("Calling CPOW_SetProperty...\n"));
+    CLOG(("Calling CPOW_SetProperty (%s)...\n",
+          JSVAL_TO_CSTR(cx, id)));
 
     ObjectWrapperParent* self = Unwrap(cx, obj);
     if (!self)
         return JS_FALSE;
 
     nsString in_id;
     JSVariant in_v;
 
@@ -329,17 +336,18 @@ ObjectWrapperParent::CPOW_SetProperty(JS
             out_ok &&
             self->jsval_from_JSVariant(cx, out_v, vp));
 }    
     
 /*static*/ JSBool
 ObjectWrapperParent::CPOW_DelProperty(JSContext *cx, JSObject *obj, jsval id,
                                       jsval *vp)
 {
-    CLOG(("Calling CPOW_DelProperty...\n"));
+    CLOG(("Calling CPOW_DelProperty (%s)...\n",
+          JSVAL_TO_CSTR(cx, id)));
 
     ObjectWrapperParent* self = Unwrap(cx, obj);
     if (!self)
         return JS_FALSE;
 
     nsString in_id;
 
     if (!jsval_to_nsString(cx, id, &in_id))
diff --git a/js/src/ipc/ObjectWrapperParent.h b/js/src/ipc/ObjectWrapperParent.h
--- a/js/src/ipc/ObjectWrapperParent.h
+++ b/js/src/ipc/ObjectWrapperParent.h
@@ -12,25 +12,25 @@ class ObjectWrapperParent
     : public PObjectWrapperParent
 {
 public:
 
     ObjectWrapperParent()
         : mObj(NULL)
         , mObjSlotContents(new ObjectWrapperParent const*(NULL))
     {}
-    
+
     JSObject* GetJSObject(JSContext* cx) const;
 
     jsval GetJSVal(JSContext* cx) const {
         return OBJECT_TO_JSVAL(GetJSObject(cx));
     }
 
     static const JSExtendedClass sCPOW_JSClass;    
-    
+
 protected:
 
     void ActorDestroy(ActorDestroyReason why);
 
 private:
 
     mutable JSObject* mObj;
     ObjectWrapperParent const** const mObjSlotContents;
diff --git a/js/src/ipc/tests/Makefile.in b/js/src/ipc/tests/Makefile.in
new file mode 100644
--- /dev/null
+++ b/js/src/ipc/tests/Makefile.in
@@ -0,0 +1,13 @@
+DEPTH		= ../../../..
+topsrcdir	= /home/ben/dev/electrolysis
+srcdir		= /home/ben/dev/electrolysis/js/src/ipc/tests
+VPATH		= /home/ben/dev/electrolysis/js/src/ipc/tests
+
+include $(DEPTH)/config/autoconf.mk
+
+MODULE = test_jsipc
+
+XPCSHELL_TESTS = unit
+
+include $(topsrcdir)/config/config.mk
+include $(topsrcdir)/config/rules.mk
diff --git a/js/src/ipc/tests/unit/cpow_child.js b/js/src/ipc/tests/unit/cpow_child.js
new file mode 100644
--- /dev/null
+++ b/js/src/ipc/tests/unit/cpow_child.js
@@ -0,0 +1,21 @@
+var data = {
+  answer: 42,
+  nested: { objects: { work: "yes they do" } },
+  arr: [
+    "zeroeth",
+    { foo: "bar" },
+    function() { return data },
+    { toString: function() { return "last" } }
+  ]
+};
+
+var empty = function() {};
+empty.prototype = {
+  inherited: "inherited",
+  method: function() {
+    return "called"
+  }
+};
+data.derived = new empty;
+
+function run_test() {}
diff --git a/js/src/ipc/tests/unit/test_cpow.js b/js/src/ipc/tests/unit/test_cpow.js
new file mode 100644
--- /dev/null
+++ b/js/src/ipc/tests/unit/test_cpow.js
@@ -0,0 +1,41 @@
+function run_test() {
+  run_test_in_child("cpow_child.js", run_actual_tests);
+}
+
+function run_actual_tests() {
+  var obj = getChildGlobalObject();
+
+  test_inheritance(obj.data);
+  test_toString(obj.data);
+  test_properties(obj.data);
+
+  do_test_finished();
+}
+
+function test_properties(data) {
+  do_check_eq(data.answer, 42);
+  do_check_eq(data.nested.objects.work,
+              "yes they do");
+  do_check_eq(data.asodfijasdiofj, void(0));
+
+  do_check_eq(data.arr.length, 4);
+  do_check_eq(data.arr[4], void(0));
+  do_check_eq(data.arr[0], "zeroeth");
+  do_check_eq(data.arr[1].foo, "bar");
+
+  do_check_eq(data.arr[2], data.arr[2]); // ensure reuse
+  do_check_true(data.arr[2]() === data);
+  do_check_eq(data.arr[2]().arr[0], "zeroeth");
+
+  do_check_eq(data.arr[3], "last");
+}
+
+function test_toString(data) {
+  do_check_eq(data.nested.toString(), "CPOW");
+  do_check_eq(data + "asdf", "CPOWasdf");
+}
+
+function test_inheritance(data) {
+  do_check_eq(data.derived.inherited, "inherited");
+  do_check_eq(data.derived.method(), "called");
+}
\ No newline at end of file
diff --git a/js/src/xpconnect/shell/xpcshell.cpp b/js/src/xpconnect/shell/xpcshell.cpp
--- a/js/src/xpconnect/shell/xpcshell.cpp
+++ b/js/src/xpconnect/shell/xpcshell.cpp
@@ -688,16 +688,31 @@ SendCommand(JSContext* cx,
     if (!XRE_SendTestShellCommand(cx, str, argc > 1 ? &argv[1] : nsnull)) {
         JS_ReportError(cx, "Couldn't send command!");
         return JS_FALSE;
     }
 
     return JS_TRUE;
 }
 
+static JSBool
+GetChildGlobalObject(JSContext* cx,
+                     JSObject* obj,
+                     uintN argc,
+                     jsval* argv,
+                     jsval* rval)
+{
+    JSObject* global;
+    if (XRE_GetChildGlobalObject(cx, &global)) {
+        *rval = OBJECT_TO_JSVAL(global);
+        return JS_TRUE;
+    }
+    return JS_FALSE;
+}
+
 #endif // MOZ_IPC
 
 /*
  * JSContext option name to flag map. The option names are in alphabetical
  * order for better reporting.
  */
 static const struct {
     const char  *name;
@@ -805,16 +820,17 @@ static JSFunctionSpec glob_functions[] =
     {"gc",              GC,             0,0,0},
     {"clear",           Clear,          1,0,0},
     {"options",         Options,        0,0,0},
 #ifdef DEBUG
     {"dumpHeap",        DumpHeap,       5,0,0},
 #endif
 #ifdef MOZ_IPC
     {"sendCommand",     SendCommand,    1,0,0},
+    {"getChildGlobalObject", GetChildGlobalObject, 0,0,0},
 #endif
 #ifdef MOZ_SHARK
     {"startShark",      js_StartShark,      0,0,0},
     {"stopShark",       js_StopShark,       0,0,0},
     {"connectShark",    js_ConnectShark,    0,0,0},
     {"disconnectShark", js_DisconnectShark, 0,0,0},
 #endif
 #ifdef MOZ_CALLGRIND
diff --git a/toolkit/xre/nsEmbedFunctions.cpp b/toolkit/xre/nsEmbedFunctions.cpp
--- a/toolkit/xre/nsEmbedFunctions.cpp
+++ b/toolkit/xre/nsEmbedFunctions.cpp
@@ -77,16 +77,18 @@
 #include "mozilla/ipc/GeckoThread.h"
 #include "ScopedXREEmbed.h"
 
 #include "mozilla/plugins/PluginThreadChild.h"
 #include "mozilla/dom/ContentProcessThread.h"
 #include "mozilla/dom/ContentProcessParent.h"
 #include "mozilla/dom/ContentProcessChild.h"
 
+#include "mozilla/jsipc/ObjectWrapperLiaisonParent.h"
+
 #include "mozilla/ipc/TestShellParent.h"
 #include "mozilla/ipc/XPCShellEnvironment.h"
 #include "mozilla/Monitor.h"
 
 #ifdef MOZ_IPDL_TESTS
 #include "mozilla/_ipdltest/IPDLUnitTests.h"
 #include "mozilla/_ipdltest/IPDLUnitTestThreadChild.h"
 
@@ -97,16 +99,20 @@ using mozilla::ipc::GeckoChildProcessHos
 using mozilla::ipc::GeckoThread;
 using mozilla::ipc::BrowserProcessSubThread;
 using mozilla::ipc::ScopedXREEmbed;
 
 using mozilla::plugins::PluginThreadChild;
 using mozilla::dom::ContentProcessThread;
 using mozilla::dom::ContentProcessParent;
 using mozilla::dom::ContentProcessChild;
+
+using mozilla::jsipc::PObjectWrapperLiaisonParent;
+using mozilla::jsipc::ObjectWrapperLiaisonParent;
+
 using mozilla::ipc::TestShellParent;
 using mozilla::ipc::TestShellCommandParent;
 using mozilla::ipc::XPCShellEnvironment;
 
 using mozilla::Monitor;
 using mozilla::MonitorAutoEnter;
 
 using mozilla::startup::sChildProcessType;
@@ -474,48 +480,67 @@ XRE_ShutdownChildProcess()
     MessageLoop* ioLoop = XRE_GetIOMessageLoop();
     NS_ABORT_IF_FALSE(!!ioLoop, "Bad shutdown order");
 
     ioLoop->PostTask(FROM_HERE, new MessageLoop::QuitTask());
 }
 
 namespace {
 TestShellParent* gTestShellParent = nsnull;
+TestShellParent* GetOrCreateTestShellParent()
+{
+    if (!gTestShellParent) {
+        ContentProcessParent* parent = ContentProcessParent::GetSingleton();
+        NS_ENSURE_TRUE(parent, nsnull);
+        gTestShellParent = parent->CreateTestShell();
+        NS_ENSURE_TRUE(gTestShellParent, nsnull);
+    }
+    return gTestShellParent;
+}
 }
 
 bool
 XRE_SendTestShellCommand(JSContext* aCx,
                          JSString* aCommand,
                          void* aCallback)
 {
-    if (!gTestShellParent) {
-        ContentProcessParent* parent = ContentProcessParent::GetSingleton();
-        NS_ENSURE_TRUE(parent, false);
-
-        gTestShellParent = parent->CreateTestShell();
-        NS_ENSURE_TRUE(gTestShellParent, false);
-    }
+    TestShellParent* tsp = GetOrCreateTestShellParent();
+    NS_ENSURE_TRUE(tsp, false);
 
     nsDependentString command((PRUnichar*)JS_GetStringChars(aCommand),
                               JS_GetStringLength(aCommand));
     if (!aCallback) {
-        return gTestShellParent->SendExecuteCommand(command);
+        return tsp->SendExecuteCommand(command);
     }
 
     TestShellCommandParent* callback = static_cast<TestShellCommandParent*>(
-        gTestShellParent->SendPTestShellCommandConstructor(command));
+        tsp->SendPTestShellCommandConstructor(command));
     NS_ENSURE_TRUE(callback, false);
 
     jsval callbackVal = *reinterpret_cast<jsval*>(aCallback);
     NS_ENSURE_TRUE(callback->SetCallback(aCx, callbackVal), false);
 
     return true;
 }
 
 bool
+XRE_GetChildGlobalObject(JSContext* aCx,
+                         JSObject** globalp)
+{
+    TestShellParent* tsp = GetOrCreateTestShellParent();
+    NS_ENSURE_TRUE(tsp, false);
+
+    PObjectWrapperLiaisonParent* powlp = tsp->GetObjectWrapperLiaison();
+    ObjectWrapperLiaisonParent* owlp =
+        static_cast<ObjectWrapperLiaisonParent*>(powlp);
+    
+    return owlp->GetGlobal(aCx, globalp);
+}
+
+bool
 XRE_ShutdownTestShell()
 {
   if (!gTestShellParent)
     return true;
   return ContentProcessParent::GetSingleton()->DestroyTestShell(gTestShellParent);
 }
 
 #endif // MOZ_IPC
diff --git a/xpcom/build/nsXULAppAPI.h b/xpcom/build/nsXULAppAPI.h
--- a/xpcom/build/nsXULAppAPI.h
+++ b/xpcom/build/nsXULAppAPI.h
@@ -488,12 +488,18 @@ XRE_API(MessageLoop*,
 
 struct JSContext;
 struct JSString;
 
 XRE_API(bool,
         XRE_SendTestShellCommand, (JSContext* aCx,
                                    JSString* aCommand,
                                    void* aCallback))
+struct JSObject;
+
+XRE_API(bool,
+        XRE_GetChildGlobalObject, (JSContext* aCX,
+                                   JSObject** globalp))
+
 XRE_API(bool,
         XRE_ShutdownTestShell, ())
 
 #endif // _nsXULAppAPI_h__
