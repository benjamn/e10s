diff --git a/dom/ipc/ContentProcessParent.cpp b/dom/ipc/ContentProcessParent.cpp
--- a/dom/ipc/ContentProcessParent.cpp
+++ b/dom/ipc/ContentProcessParent.cpp
@@ -206,17 +206,21 @@ RecvPObjectWrapperLiaisonConstructor(POb
     case JSRuntimeOwner::TPIFrameEmbeddingParent:
         {
             const TabParent* tp =
                 static_cast<const TabParent*>(jsro.get_PIFrameEmbeddingParent());
             const_cast<TabParent*>(tp)->SetObjectWrapperLiaison(actor);
             return true;
         }
     case JSRuntimeOwner::TPTestShellParent:
-        // TODO
-        return true;
+        {
+            const TestShellParent* tsp =
+                static_cast<const TestShellParent*>(jsro.get_PTestShellParent());
+            const_cast<TestShellParent*>(tsp)->SetObjectWrapperLiaison(actor);
+            return true;
+        }
     default:
         return false;
     }
 }   
 
 } // namespace dom
 } // namespace mozilla
diff --git a/dom/ipc/TabChild.cpp b/dom/ipc/TabChild.cpp
--- a/dom/ipc/TabChild.cpp
+++ b/dom/ipc/TabChild.cpp
@@ -382,34 +382,42 @@ TabChild::RecvsendMouseEvent(const nsStr
   nsCOMPtr<nsPIDOMWindow> window = do_GetInterface(mWebNav);
   nsCOMPtr<nsIDOMWindowUtils> utils = do_GetInterface(window);
   NS_ENSURE_TRUE(utils, true);
   utils->SendMouseEvent(aType, aX, aY, aButton, aClickCount, aModifiers,
                         aIgnoreRootScrollFrame);
   return true;
 }
 
-#include "nsIScriptGlobalObjectOwner.h"
-
-void
-TabChild::CreateObjectWrapperLiaisonAndAttachGlobalObject()
+static JSContext*
+GetJSContext(nsIWebNavigation* webNav)
 {
     nsCOMPtr<nsIDOMDocument> domDocument;
     nsCOMPtr<nsIDocument> document;
     nsCOMPtr<nsIScriptGlobalObject> global;
     nsCOMPtr<nsIScriptContext> context;
+
+    if (NS_SUCCEEDED(webNav->GetDocument(getter_AddRefs(domDocument))) &&
+        (document = do_QueryInterface(domDocument)) &&
+        (global = do_QueryInterface(document->GetScriptGlobalObject())) &&
+        (context = do_QueryInterface(global->GetContext())))
+        return static_cast<JSContext*>(context->GetNativeContext());
+
+    return NULL;
+}
+
+void
+TabChild::CreateObjectWrapperLiaisonAndAttachGlobalObject()
+{
+
     JSContext* cx;
     PContentProcessChild* manager;
     mozilla::jsipc::ObjectWrapperLiaisonChild* owlc;
 
-    if (NS_SUCCEEDED(mWebNav->GetDocument(getter_AddRefs(domDocument))) &&
-        (document = do_QueryInterface(domDocument)) &&
-        (global = do_QueryInterface(document->GetScriptGlobalObject())) &&
-        (context = do_QueryInterface(global->GetContext())) &&
-        (cx = static_cast<JSContext*>(context->GetNativeContext())) &&
+    if ((cx = GetJSContext(mWebNav)) &&
         (manager = Manager()) &&
         (owlc = new mozilla::jsipc::ObjectWrapperLiaisonChild(cx)))
         manager
             ->SendPObjectWrapperLiaisonConstructor(owlc, this)
             ->SendPObjectWrapperConstructor(true);
 }
 
 mozilla::ipc::PDocumentRendererChild*
diff --git a/ipc/testshell/TestShellChild.cpp b/ipc/testshell/TestShellChild.cpp
--- a/ipc/testshell/TestShellChild.cpp
+++ b/ipc/testshell/TestShellChild.cpp
@@ -30,20 +30,23 @@
  * decision by deleting the provisions above and replace them with the notice
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 #include "TestShellChild.h"
+#include "mozilla/dom/PContentProcessChild.h"
+#include "mozilla/jsipc/ObjectWrapperLiaisonChild.h"
 
 using mozilla::ipc::TestShellChild;
 using mozilla::ipc::PTestShellCommandChild;
 using mozilla::ipc::XPCShellEnvironment;
+using mozilla::jsipc::ObjectWrapperLiaisonChild;
 
 TestShellChild::TestShellChild()
 : mXPCShell(XPCShellEnvironment::CreateEnvironment())
 {
 }
 
 bool
 TestShellChild::RecvExecuteCommand(const nsString& aCommand)
@@ -64,16 +67,29 @@ TestShellChild::AllocPTestShellCommand(c
 
 bool
 TestShellChild::DeallocPTestShellCommand(PTestShellCommandChild* aCommand)
 {
   delete aCommand;
   return true;
 }
 
+void
+TestShellChild::SetXPCShell(XPCShellEnvironment* aXPCShell)
+{
+  ObjectWrapperLiaisonChild* owlc;
+  JSContext* cx;
+  if ((mXPCShell = aXPCShell) &&
+      (cx = mXPCShell->GetContext()) &&
+      (owlc = new ObjectWrapperLiaisonChild(cx)))
+    Manager()
+      ->SendPObjectWrapperLiaisonConstructor(owlc, this)
+      ->SendPObjectWrapperConstructor(true);
+}
+
 bool
 TestShellChild::RecvPTestShellCommandConstructor(PTestShellCommandChild* aActor,
                                                  const nsString& aCommand)
 {
   if (mXPCShell->IsQuitting()) {
     NS_WARNING("Commands sent after quit command issued!");
     return false;
   }
diff --git a/ipc/testshell/TestShellChild.h b/ipc/testshell/TestShellChild.h
--- a/ipc/testshell/TestShellChild.h
+++ b/ipc/testshell/TestShellChild.h
@@ -61,19 +61,17 @@ public:
 
   bool
   RecvPTestShellCommandConstructor(PTestShellCommandChild* aActor,
                                    const nsString& aCommand);
 
   bool
   DeallocPTestShellCommand(PTestShellCommandChild* aCommand);
 
-  void SetXPCShell(XPCShellEnvironment* aXPCShell) {
-    mXPCShell = aXPCShell;
-  }
+  void SetXPCShell(XPCShellEnvironment* aXPCShell);
 
 private:
   nsAutoPtr<XPCShellEnvironment> mXPCShell;
 };
 
 } /* namespace ipc */
 } /* namespace mozilla */
 
diff --git a/ipc/testshell/TestShellParent.h b/ipc/testshell/TestShellParent.h
--- a/ipc/testshell/TestShellParent.h
+++ b/ipc/testshell/TestShellParent.h
@@ -43,32 +43,48 @@
 #include "mozilla/ipc/PTestShellParent.h"
 #include "mozilla/ipc/PTestShellCommandParent.h"
 
 #include "jsapi.h"
 #include "nsAutoJSValHolder.h"
 #include "nsStringGlue.h"
 
 namespace mozilla {
+
+namespace jsipc {
+class PObjectWrapperLiaisonParent;
+}
+
 namespace ipc {
 
+using namespace mozilla::jsipc;
+
 class TestShellCommandParent;
 
-
 class TestShellParent : public PTestShellParent
 {
 public:
   PTestShellCommandParent*
   AllocPTestShellCommand(const nsString& aCommand);
 
   bool
   DeallocPTestShellCommand(PTestShellCommandParent* aActor);
 
   bool
   CommandDone(TestShellCommandParent* aActor, const nsString& aResponse);
+
+  void SetObjectWrapperLiaison(PObjectWrapperLiaisonParent* powlp) {
+    mObjectWrapperLiaison = powlp;
+  }
+  PObjectWrapperLiaisonParent* GetObjectWrapperLiaison() const {
+    return mObjectWrapperLiaison;
+  }
+
+private:
+  PObjectWrapperLiaisonParent* mObjectWrapperLiaison;
 };
 
 
 class TestShellCommandParent : public PTestShellCommandParent
 {
 public:
   TestShellCommandParent() : mCx(NULL) { }
 
diff --git a/ipc/testshell/XPCShellEnvironment.h b/ipc/testshell/XPCShellEnvironment.h
--- a/ipc/testshell/XPCShellEnvironment.h
+++ b/ipc/testshell/XPCShellEnvironment.h
@@ -68,16 +68,20 @@ public:
     JSPrincipals* GetPrincipal() {
         return mJSPrincipals;
     }
 
     JSObject* GetGlobalObject() {
         return mGlobalHolder.ToJSObject();
     }
 
+    JSContext* GetContext() {
+        return mCx;
+    }
+
     void SetExitCode(int aExitCode) {
         mExitCode = aExitCode;
     }
     int ExitCode() {
         return mExitCode;
     }
 
     void SetIsQuitting() {
@@ -124,9 +128,9 @@ private:
     JSBool mQuitting;
     JSBool mReportWarnings;
     JSBool mCompileOnly;
 };
 
 } /* namespace ipc */
 } /* namespace mozilla */
 
-#endif /* _IPC_TESTSHELL_XPCSHELLENVIRONMENT_H_ */
\ No newline at end of file
+#endif /* _IPC_TESTSHELL_XPCSHELLENVIRONMENT_H_ */
diff --git a/js/src/ipc/Makefile.in b/js/src/ipc/Makefile.in
--- a/js/src/ipc/Makefile.in
+++ b/js/src/ipc/Makefile.in
@@ -58,13 +58,17 @@ EXPORTS_mozilla/jsipc = \
   ObjectWrapperChild.h \
   $(NULL)
 
 CPPSRCS = \
   ObjectWrapperParent.cpp \
   ObjectWrapperChild.cpp \
   $(NULL)
 
+ifdef ENABLE_TESTS
+TOOL_DIRS  += tests
+endif
+
 include $(topsrcdir)/config/config.mk
 include $(topsrcdir)/ipc/chromium/chromium-config.mk
 include $(topsrcdir)/config/rules.mk
 
 DEFINES += -DBIN_SUFFIX='"$(BIN_SUFFIX)"'
diff --git a/js/src/ipc/ObjectWrapperLiaisonParent.h b/js/src/ipc/ObjectWrapperLiaisonParent.h
--- a/js/src/ipc/ObjectWrapperLiaisonParent.h
+++ b/js/src/ipc/ObjectWrapperLiaisonParent.h
@@ -55,16 +55,24 @@ public:
 
     bool AttachGlobal(JSContext* cx, JSObject* to, jsid id)
     {
         return (mGlobal &&
                 JS_DefinePropertyById(cx, to, id, mGlobal->GetJSVal(cx), NULL,
                                       NULL, 0));
     }
 
+    bool GetGlobal(JSContext* cx, JSObject** globalp)
+    {
+        if (!mGlobal)
+            return false;
+        *globalp = mGlobal->GetJSObject(cx);
+        return true;
+    }
+
 private:
 
     ObjectWrapperParent* mGlobal;
 
     PObjectWrapperParent* AllocPObjectWrapper(const bool&) {
         return new ObjectWrapperParent();
     }
 
diff --git a/js/src/ipc/tests/Makefile.in b/js/src/ipc/tests/Makefile.in
new file mode 100644
--- /dev/null
+++ b/js/src/ipc/tests/Makefile.in
@@ -0,0 +1,51 @@
+# ***** BEGIN LICENSE BLOCK *****
+# Version: MPL 1.1/GPL 2.0/LGPL 2.1
+#
+# The contents of this file are subject to the Mozilla Public License Version
+# 1.1 (the "License"); you may not use this file except in compliance with
+# the License. You may obtain a copy of the License at
+# http://www.mozilla.org/MPL/
+#
+# Software distributed under the License is distributed on an "AS IS" basis,
+# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+# for the specific language governing rights and limitations under the
+# License.
+#
+# The Original Code is Makefile.
+#
+# The Initial Developer of the Original Code is
+#   Mozilla Corporation.
+#
+# Portions created by the Initial Developer are Copyright (C) 2010
+# the Initial Developer. All Rights Reserved.
+#
+# Contributor(s):
+#   Ben Newman <b{enjam,newma}n@mozilla.com>
+#
+# Alternatively, the contents of this file may be used under the terms of
+# either the GNU General Public License Version 2 or later (the "GPL"), or
+# the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+# in which case the provisions of the GPL or the LGPL are applicable instead
+# of those above. If you wish to allow use of your version of this file only
+# under the terms of either the GPL or the LGPL, and not to allow others to
+# use your version of this file under the terms of the MPL, indicate your
+# decision by deleting the provisions above and replace them with the notice
+# and other provisions required by the GPL or the LGPL. If you do not delete
+# the provisions above, a recipient may use your version of this file under
+# the terms of any one of the MPL, the GPL or the LGPL.
+#
+# ***** END LICENSE BLOCK *****
+
+DEPTH		= ../../../..
+topsrcdir	= /home/ben/dev/electrolysis
+srcdir		= /home/ben/dev/electrolysis/js/src/ipc/tests
+VPATH		= /home/ben/dev/electrolysis/js/src/ipc/tests
+
+include $(DEPTH)/config/autoconf.mk
+
+MODULE = test_jsipc
+
+XPCSHELL_TESTS = unit
+
+include $(topsrcdir)/config/config.mk
+include $(topsrcdir)/config/rules.mk
diff --git a/js/src/ipc/tests/unit/cpow_child.js b/js/src/ipc/tests/unit/cpow_child.js
new file mode 100644
--- /dev/null
+++ b/js/src/ipc/tests/unit/cpow_child.js
@@ -0,0 +1,3 @@
+function run_test() {
+  (function() { return this })().foo = 42;
+}
diff --git a/js/src/ipc/tests/unit/test_cpow.js b/js/src/ipc/tests/unit/test_cpow.js
new file mode 100644
--- /dev/null
+++ b/js/src/ipc/tests/unit/test_cpow.js
@@ -0,0 +1,7 @@
+function run_test() {
+  do_test_pending();
+  run_test_in_child("cpow_child.js",
+                    function() {
+                      do_test_finished();
+                    });
+}
diff --git a/js/src/xpconnect/shell/xpcshell.cpp b/js/src/xpconnect/shell/xpcshell.cpp
--- a/js/src/xpconnect/shell/xpcshell.cpp
+++ b/js/src/xpconnect/shell/xpcshell.cpp
@@ -688,16 +688,31 @@ SendCommand(JSContext* cx,
     if (!XRE_SendTestShellCommand(cx, str, argc > 1 ? &argv[1] : nsnull)) {
         JS_ReportError(cx, "Couldn't send command!");
         return JS_FALSE;
     }
 
     return JS_TRUE;
 }
 
+static JSBool
+GetChildGlobalObject(JSContext* cx,
+                     JSObject* obj,
+                     uintN argc,
+                     jsval* argv,
+                     jsval* rval)
+{
+    JSObject* global;
+    if (XRE_GetChildGlobalObject(cx, &global)) {
+        *rval = OBJECT_TO_JSVAL(global);
+        return JS_TRUE;
+    }
+    return JS_FALSE;
+}
+
 #endif // MOZ_IPC
 
 /*
  * JSContext option name to flag map. The option names are in alphabetical
  * order for better reporting.
  */
 static const struct {
     const char  *name;
@@ -805,16 +820,17 @@ static JSFunctionSpec glob_functions[] =
     {"gc",              GC,             0,0,0},
     {"clear",           Clear,          1,0,0},
     {"options",         Options,        0,0,0},
 #ifdef DEBUG
     {"dumpHeap",        DumpHeap,       5,0,0},
 #endif
 #ifdef MOZ_IPC
     {"sendCommand",     SendCommand,    1,0,0},
+    {"getChildGlobalObject", GetChildGlobalObject, 0,0,0},
 #endif
 #ifdef MOZ_SHARK
     {"startShark",      js_StartShark,      0,0,0},
     {"stopShark",       js_StopShark,       0,0,0},
     {"connectShark",    js_ConnectShark,    0,0,0},
     {"disconnectShark", js_DisconnectShark, 0,0,0},
 #endif
 #ifdef MOZ_CALLGRIND
diff --git a/toolkit/xre/nsEmbedFunctions.cpp b/toolkit/xre/nsEmbedFunctions.cpp
--- a/toolkit/xre/nsEmbedFunctions.cpp
+++ b/toolkit/xre/nsEmbedFunctions.cpp
@@ -77,16 +77,18 @@
 #include "mozilla/ipc/GeckoThread.h"
 #include "ScopedXREEmbed.h"
 
 #include "mozilla/plugins/PluginThreadChild.h"
 #include "mozilla/dom/ContentProcessThread.h"
 #include "mozilla/dom/ContentProcessParent.h"
 #include "mozilla/dom/ContentProcessChild.h"
 
+#include "mozilla/jsipc/ObjectWrapperLiaisonParent.h"
+
 #include "mozilla/ipc/TestShellParent.h"
 #include "mozilla/ipc/XPCShellEnvironment.h"
 #include "mozilla/Monitor.h"
 
 #ifdef MOZ_IPDL_TESTS
 #include "mozilla/_ipdltest/IPDLUnitTests.h"
 #include "mozilla/_ipdltest/IPDLUnitTestThreadChild.h"
 
@@ -97,16 +99,20 @@ using mozilla::ipc::GeckoChildProcessHos
 using mozilla::ipc::GeckoThread;
 using mozilla::ipc::BrowserProcessSubThread;
 using mozilla::ipc::ScopedXREEmbed;
 
 using mozilla::plugins::PluginThreadChild;
 using mozilla::dom::ContentProcessThread;
 using mozilla::dom::ContentProcessParent;
 using mozilla::dom::ContentProcessChild;
+
+using mozilla::jsipc::PObjectWrapperLiaisonParent;
+using mozilla::jsipc::ObjectWrapperLiaisonParent;
+
 using mozilla::ipc::TestShellParent;
 using mozilla::ipc::TestShellCommandParent;
 using mozilla::ipc::XPCShellEnvironment;
 
 using mozilla::Monitor;
 using mozilla::MonitorAutoEnter;
 
 using mozilla::startup::sChildProcessType;
@@ -474,48 +480,67 @@ XRE_ShutdownChildProcess()
     MessageLoop* ioLoop = XRE_GetIOMessageLoop();
     NS_ABORT_IF_FALSE(!!ioLoop, "Bad shutdown order");
 
     ioLoop->PostTask(FROM_HERE, new MessageLoop::QuitTask());
 }
 
 namespace {
 TestShellParent* gTestShellParent = nsnull;
+TestShellParent* GetOrCreateTestShellParent()
+{
+    if (!gTestShellParent) {
+        ContentProcessParent* parent = ContentProcessParent::GetSingleton();
+        NS_ENSURE_TRUE(parent, nsnull);
+        gTestShellParent = parent->CreateTestShell();
+        NS_ENSURE_TRUE(gTestShellParent, nsnull);
+    }
+    return gTestShellParent;
+}
 }
 
 bool
 XRE_SendTestShellCommand(JSContext* aCx,
                          JSString* aCommand,
                          void* aCallback)
 {
-    if (!gTestShellParent) {
-        ContentProcessParent* parent = ContentProcessParent::GetSingleton();
-        NS_ENSURE_TRUE(parent, false);
-
-        gTestShellParent = parent->CreateTestShell();
-        NS_ENSURE_TRUE(gTestShellParent, false);
-    }
+    TestShellParent* tsp = GetOrCreateTestShellParent();
+    NS_ENSURE_TRUE(tsp, false);
 
     nsDependentString command((PRUnichar*)JS_GetStringChars(aCommand),
                               JS_GetStringLength(aCommand));
     if (!aCallback) {
-        return gTestShellParent->SendExecuteCommand(command);
+        return tsp->SendExecuteCommand(command);
     }
 
     TestShellCommandParent* callback = static_cast<TestShellCommandParent*>(
-        gTestShellParent->SendPTestShellCommandConstructor(command));
+        tsp->SendPTestShellCommandConstructor(command));
     NS_ENSURE_TRUE(callback, false);
 
     jsval callbackVal = *reinterpret_cast<jsval*>(aCallback);
     NS_ENSURE_TRUE(callback->SetCallback(aCx, callbackVal), false);
 
     return true;
 }
 
 bool
+XRE_GetChildGlobalObject(JSContext* aCx,
+                         JSObject** globalp)
+{
+    TestShellParent* tsp = GetOrCreateTestShellParent();
+    NS_ENSURE_TRUE(tsp, false);
+
+    PObjectWrapperLiaisonParent* powlp = tsp->GetObjectWrapperLiaison();
+    ObjectWrapperLiaisonParent* owlp =
+        static_cast<ObjectWrapperLiaisonParent*>(powlp);
+    
+    return owlp->GetGlobal(aCx, globalp);
+}
+
+bool
 XRE_ShutdownTestShell()
 {
   if (!gTestShellParent)
     return true;
   return ContentProcessParent::GetSingleton()->DestroyTestShell(gTestShellParent);
 }
 
 #endif // MOZ_IPC
diff --git a/xpcom/build/nsXULAppAPI.h b/xpcom/build/nsXULAppAPI.h
--- a/xpcom/build/nsXULAppAPI.h
+++ b/xpcom/build/nsXULAppAPI.h
@@ -488,12 +488,18 @@ XRE_API(MessageLoop*,
 
 struct JSContext;
 struct JSString;
 
 XRE_API(bool,
         XRE_SendTestShellCommand, (JSContext* aCx,
                                    JSString* aCommand,
                                    void* aCallback))
+struct JSObject;
+
+XRE_API(bool,
+        XRE_GetChildGlobalObject, (JSContext* aCX,
+                                   JSObject** globalp))
+
 XRE_API(bool,
         XRE_ShutdownTestShell, ())
 
 #endif // _nsXULAppAPI_h__
