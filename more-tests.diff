diff --git a/js/src/ipc/tests/adhoc/test.xul b/js/src/ipc/tests/adhoc/test.xul
--- a/js/src/ipc/tests/adhoc/test.xul
+++ b/js/src/ipc/tests/adhoc/test.xul
@@ -51,34 +51,53 @@
           child.foo.pitch(ball);
           alert("shouldn't reach this point");
         } catch (x) {
           alert("ball === x? " + (ball === x));
         }
       }
     }
 
+    function getCPOW() {
+      if (!getCPOW.cpow) {
+        var page = document.getElementById("page"),
+            owner = page.QueryInterface(Components.interfaces.nsIFrameLoaderOwner);
+        getCPOW.cpow = owner.crossProcessObjectWrapper;
+        alert("got fresh CPOW");
+      }
+      return getCPOW.cpow;
+    }
+    
     function test_cpow() {
-      var page = document.getElementById("page"),
-          owner = page.QueryInterface(Components.interfaces.nsIFrameLoaderOwner),
-          child = owner.crossProcessObjectWrapper;
-
+      var child = getCPOW();
       cpow_tests.construct(child.foo);
       cpow_tests.resolve(child.location, "href hostname");
       cpow_tests.iterate(child.location);
       cpow_tests.iterate(child.foo);
       cpow_tests.funcalls(child.foo);
+      cpow_tests.navigate(child);
       cpow_tests.equality(child);
       cpow_tests.exceptions(child);
-    
+      setTimeout(function() {
+        alert("going back");
+        child.history.back();
+      }, 3000);
+    }
+
+    function show_location() {
+      var child = getCPOW();
+      child.location += "#fragment";
+      alert(child.location.href);
+      alert(child.document.documentURI);
     }
   </script>
 
   <toolbar id="controls">
     <toolbarbutton onclick="test_cpow()" label="Run tests."/>
+    <toolbarbutton onclick="show_location()" label="Show location."/>
   </toolbar>
 
   <browser remote="true" width="200" height="200"
            type="content"
            src="child.html"
            id="page" />
 
 </window>
diff --git a/js/src/ipc/tests/unit/cpow_child.js b/js/src/ipc/tests/unit/cpow_child.js
--- a/js/src/ipc/tests/unit/cpow_child.js
+++ b/js/src/ipc/tests/unit/cpow_child.js
@@ -54,9 +54,13 @@ function pitch(ball) {
 }
 
 get_set = {
   get foo() { return 42; },
   get foo_throws() { throw "BAM"; },
   set one(val) { this.two = val + 1; }
 };
 
+function type(x) {
+  return typeof x;
+}
+
 function run_test() {}
diff --git a/js/src/ipc/tests/unit/test_cpow.js b/js/src/ipc/tests/unit/test_cpow.js
--- a/js/src/ipc/tests/unit/test_cpow.js
+++ b/js/src/ipc/tests/unit/test_cpow.js
@@ -16,16 +16,17 @@ function run_actual_tests() {
   test_instanceof(obj.A, obj.B);
   test_enumeration(obj.A, obj.B);
   test_Array(obj.Array);
   test_Function(obj.Function);
   test_exceptions(obj.pitch, obj.Object);
   test_generators(obj.Function);
   test_Iterator(obj.data, obj.Iterator, obj.StopIteration);
   test_getters_setters(obj.get_set, obj.Function);
+  test_forbidden_things(obj);
 
   do_test_finished();
 }
 
 function test_properties(data) {
   do_check_true("answer" in data);
   do_check_false("cnefhasefho" in data.nested);
 
@@ -85,20 +86,20 @@ function test_constructor(ctor,
   var empty = new ChildFunction(),
       proto = new ChildObject();
   proto.inherited = "inherited";
   proto.method = new ChildFunction("return 'called'");
   empty.prototype = proto;
   test_inheritance(new empty);
 
   var cd = new ChildDate,
-      tolerance = 10; // ms
+      max_diff = 2000; // Ridiculously large to accommodate gcZeal delays.
   do_check_eq(Math.max(Math.abs(cd.getTime() - new Date),
-                       tolerance),
-              tolerance);
+                       max_diff),
+              max_diff);
   do_check_true(cd instanceof ChildDate);
 }
 
 function test_enumeration(A, B) {
   function check(obj, nk, s) {
     var keys = [];
     for (var k in obj)
       keys[keys.length] = k;
@@ -225,8 +226,52 @@ function test_getters_setters(get_set, C
   var setter = new ChildFunction("val", "this.side_effect = val");
   get_set.__defineSetter__("defined_setter", setter);
   get_set.side_effect = "can't touch this";
   get_set.defined_setter = "you set me";
   do_check_eq(get_set.side_effect, "you set me");
   do_check_eq(get_set.__lookupSetter__("defined_setter"),
               setter);
 }
+
+function test_forbidden_things(child) {
+  var x_count = 0;
+
+  do_check_eq(child.type(42), "number");
+
+  try {
+    child.type(function(){});
+    do_throw("Should not have been able to pass a parent-created " +
+             "function to the child");
+  } catch (x) {
+    print(x);
+    x_count += 1;
+  }
+
+  try {
+    child.type({});
+    do_throw("Should not have been able to pass a parent-created " +
+             "object to the child");
+  } catch (x) {
+    print(x);
+    x_count += 1;
+  }
+
+  try {
+    child.type.prop = {};
+    do_throw("Should not have been able to set a property of a child " +
+             "object to a parent-created object value");
+  } catch (x) {
+    print(x);
+    x_count += 1;
+  }
+
+  try {
+    child.type.prop = function(){};
+    do_throw("Should not have been able to set a property of a child " +
+             "object to a parent-created function value");
+  } catch (x) {
+    print(x);
+    x_count += 1;
+  }
+
+  do_check_eq(x_count, 4);
+}
