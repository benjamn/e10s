diff --git a/js/src/ipc/ObjectWrapperChild.cpp b/js/src/ipc/ObjectWrapperChild.cpp
--- a/js/src/ipc/ObjectWrapperChild.cpp
+++ b/js/src/ipc/ObjectWrapperChild.cpp
@@ -40,17 +40,18 @@ ObjectWrapperChild::jsval_to_JSVariant(J
     switch (JS_TypeOfValue(cx, from)) {
     case JSTYPE_VOID:
         *to = void_t();
         return true;
     case JSTYPE_FUNCTION:
     case JSTYPE_OBJECT:
         return JSObject_to_JSVariant(cx, JSVAL_TO_OBJECT(from), to);
     case JSTYPE_STRING:
-        *to = nsString(JS_GetStringChars(JSVAL_TO_STRING(from)));
+        *to = nsDependentString((PRUnichar*)JS_GetStringChars(JSVAL_TO_STRING(from)),
+                                JS_GetStringLength(JSVAL_TO_STRING(from)));
         return true;
     case JSTYPE_NUMBER:
         if (JSVAL_IS_INT(from))
             *to = JSVAL_TO_INT(from);
         else if (JSVAL_IS_DOUBLE(from))
             *to = *JSVAL_TO_DOUBLE(from);
         else return false;
         return true;
@@ -141,17 +142,18 @@ ObjectWrapperChild::Manager()
     return static_cast<ContextWrapperChild*>(pcwc);
 }
 
 static bool
 jsid_to_nsString(JSContext* cx, jsid from, nsString* to)
 {
     jsval v;
     if (JS_IdToValue(cx, from, &v) && JSVAL_IS_STRING(v)) {
-        *to = JS_GetStringChars(JSVAL_TO_STRING(v));
+        *to = nsDependentString((PRUnichar*)JS_GetStringChars(JSVAL_TO_STRING(v)),
+                                JS_GetStringLength(JSVAL_TO_STRING(v)));
         return true;
     }
     return false;
 }
     
 static bool
 jsid_from_nsString(JSContext* cx, const nsString& from, jsid* to)
 {
diff --git a/js/src/ipc/ObjectWrapperParent.cpp b/js/src/ipc/ObjectWrapperParent.cpp
--- a/js/src/ipc/ObjectWrapperParent.cpp
+++ b/js/src/ipc/ObjectWrapperParent.cpp
@@ -5,19 +5,16 @@
 #include "jsobj.h"
 #include "jsfun.h"
 #include "jsutil.h"
 
 using namespace mozilla::jsipc;
 
 namespace {
 
-    // This shorthand saves a LOT of typing.
-    typedef ObjectWrapperParent _;
-
     // Only need one reserved slot because the ObjectWrapperParent* is
     // stored in the private slot.
     static const uintN sFlagsSlot = 0;
     static const uintN sNumSlots = 1;
     static const uintN CPOW_FLAG_RESOLVING = 1 << 0;
 
     class AutoResolveFlag
     {
@@ -63,77 +60,75 @@ namespace {
         static JSBool IsSet(JSContext* cx, JSObject* obj) {
             return GetFlags(cx, obj) & CPOW_FLAG_RESOLVING;
         }
 
     };
 
 }
 
-const JSExtendedClass _::sCPOW_JSClass = {
+const JSExtendedClass ObjectWrapperParent::sCPOW_JSClass = {
     // JSClass (JSExtendedClass.base) initialization
     { "CrossProcessObjectWrapper",
       JSCLASS_NEW_RESOLVE | JSCLASS_NEW_ENUMERATE | JSCLASS_IS_EXTENDED |
       JSCLASS_HAS_PRIVATE | JSCLASS_HAS_RESERVED_SLOTS(sNumSlots),
-      _::CPOW_AddProperty,
-      _::CPOW_DelProperty,
-      _::CPOW_GetProperty,
-      _::CPOW_SetProperty,
-      (JSEnumerateOp) _::CPOW_NewEnumerate,
-        (JSResolveOp) _::CPOW_NewResolve,
-      _::CPOW_Convert,
-      _::CPOW_Finalize,
+      ObjectWrapperParent::CPOW_AddProperty,
+      ObjectWrapperParent::CPOW_DelProperty,
+      ObjectWrapperParent::CPOW_GetProperty,
+      ObjectWrapperParent::CPOW_SetProperty,
+      (JSEnumerateOp) ObjectWrapperParent::CPOW_NewEnumerate,
+        (JSResolveOp) ObjectWrapperParent::CPOW_NewResolve,
+      ObjectWrapperParent::CPOW_Convert,
+      ObjectWrapperParent::CPOW_Finalize,
       nsnull, // getObjectOps
       nsnull, // checkAccess
-      _::CPOW_Call,
-      _::CPOW_Construct,
+      ObjectWrapperParent::CPOW_Call,
+      ObjectWrapperParent::CPOW_Construct,
       nsnull, // xdrObject
-      _::CPOW_HasInstance,
+      ObjectWrapperParent::CPOW_HasInstance,
       nsnull, // mark
       nsnull, // reserveSlots
     },
 
     // JSExtendedClass initialization
-    _::CPOW_Equality,
+    ObjectWrapperParent::CPOW_Equality,
     nsnull, // outerObject
     nsnull, // innerObject
     nsnull, // iterator
     nsnull, // wrappedObject
     JSCLASS_NO_RESERVED_MEMBERS
 };
 
 void
 ObjectWrapperParent::ActorDestroy(ActorDestroyReason)
 {
-    // See GetJSObject, Unwrap.
-    *mObjSlotContents = NULL;
+    if (mObj)
+        mObj->setPrivate(NULL);
 }
     
 JSObject*
 ObjectWrapperParent::GetJSObject(JSContext* cx) const
 {
-    JSClass* clasp = const_cast<JSClass*>(&_::sCPOW_JSClass.base);
+    JSClass* clasp = const_cast<JSClass*>(&ObjectWrapperParent::sCPOW_JSClass.base);
     if (!mObj && (mObj = JS_NewObject(cx, clasp, NULL, NULL))) {
-        *mObjSlotContents = this; // See ActorDestroy, Unwrap.
-        JS_SetPrivate(cx, mObj, mObjSlotContents);
+        JS_SetPrivate(cx, mObj, (void*)this);
         JS_SetReservedSlot(cx, mObj, sFlagsSlot, JSVAL_ZERO);
     }
     return mObj;
 }
 
 static ObjectWrapperParent*
 Unwrap(JSContext* cx, JSObject* obj)
 {
-    while (STOBJ_GET_CLASS(obj) != &_::sCPOW_JSClass.base)
+    while (STOBJ_GET_CLASS(obj) != &ObjectWrapperParent::sCPOW_JSClass.base)
         if (!(obj = STOBJ_GET_PROTO(obj)))
             return NULL;
     
-    // See ActorDestroy, GetJSObject.
     ObjectWrapperParent* self =
-        *static_cast<ObjectWrapperParent**>(JS_GetPrivate(cx, obj));
+        static_cast<ObjectWrapperParent*>(JS_GetPrivate(cx, obj));
 
     NS_ASSERTION(!self || self->GetJSObject(cx) == obj,
                  "Wrapper and wrapped object disagree?");
     
     return self;
 }
 
 /*static*/ bool
@@ -152,17 +147,18 @@ ObjectWrapperParent::jsval_to_JSVariant(
             *to = powp;
             return true;
         }
     case JSTYPE_FUNCTION:
         // CPOW-wrapped functions have JSTYPE_OBJECT, so this function
         // must be unknown to the child process.
         return false;
     case JSTYPE_STRING:
-        *to = nsString(JS_GetStringChars(JSVAL_TO_STRING(from)));
+        *to = nsDependentString((PRUnichar*)JS_GetStringChars(JSVAL_TO_STRING(from)),
+                                JS_GetStringLength(JSVAL_TO_STRING(from)));
         return true;
     case JSTYPE_NUMBER:
         if (JSVAL_IS_INT(from))
             *to = JSVAL_TO_INT(from);
         else if (JSVAL_IS_DOUBLE(from))
             *to = *JSVAL_TO_DOUBLE(from);
         else return false;
         return true;
diff --git a/js/src/ipc/ObjectWrapperParent.h b/js/src/ipc/ObjectWrapperParent.h
--- a/js/src/ipc/ObjectWrapperParent.h
+++ b/js/src/ipc/ObjectWrapperParent.h
@@ -10,17 +10,16 @@ namespace jsipc {
 
 class ObjectWrapperParent
     : public PObjectWrapperParent
 {
 public:
 
     ObjectWrapperParent()
         : mObj(NULL)
-        , mObjSlotContents(new ObjectWrapperParent const*(NULL))
     {}
 
     JSObject* GetJSObject(JSContext* cx) const;
 
     jsval GetJSVal(JSContext* cx) const {
         return OBJECT_TO_JSVAL(GetJSObject(cx));
     }
 
@@ -28,17 +27,16 @@ public:
 
 protected:
 
     void ActorDestroy(ActorDestroyReason why);
 
 private:
 
     mutable JSObject* mObj;
-    ObjectWrapperParent const** const mObjSlotContents;
 
     static JSBool
     CPOW_AddProperty(JSContext *cx, JSObject *obj, jsval id, jsval *vp);
 
     static JSBool
     CPOW_DelProperty(JSContext *cx, JSObject *obj, jsval id, jsval *vp);
 
     static JSBool
