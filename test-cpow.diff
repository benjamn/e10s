# HG changeset patch
# User Ben Newman <bnewman@mozilla.com>
# Date 1264127121 28800
# Node ID 98650290e6d93dee49154350fe47a7bcff2f5c82
# Parent  bbb4154a3247858a00568096d0e5477b56739200
CPOW tests (bug 516522).

diff --git a/js/src/ipc/Makefile.in b/js/src/ipc/Makefile.in
--- a/js/src/ipc/Makefile.in
+++ b/js/src/ipc/Makefile.in
@@ -58,13 +58,17 @@ EXPORTS_mozilla/jsipc = \
   ObjectWrapperChild.h \
   $(NULL)
 
 CPPSRCS = \
   ObjectWrapperParent.cpp \
   ObjectWrapperChild.cpp \
   $(NULL)
 
+ifdef ENABLE_TESTS
+TOOL_DIRS += tests
+endif
+
 include $(topsrcdir)/config/config.mk
 include $(topsrcdir)/ipc/chromium/chromium-config.mk
 include $(topsrcdir)/config/rules.mk
 
 DEFINES += -DBIN_SUFFIX='"$(BIN_SUFFIX)"'
diff --git a/js/src/ipc/jar.mn b/js/src/ipc/jar.mn
new file mode 100644
--- /dev/null
+++ b/js/src/ipc/jar.mn
@@ -0,0 +1,3 @@
+toolkit.jar:
+        content/global/cpow/test.xul (tests/adhoc/test.xul)
+        content/global/cpow/child.html (tests/adhoc/child.html)
diff --git a/js/src/ipc/tests/Makefile.in b/js/src/ipc/tests/Makefile.in
new file mode 100644
--- /dev/null
+++ b/js/src/ipc/tests/Makefile.in
@@ -0,0 +1,50 @@
+# ***** BEGIN LICENSE BLOCK *****
+# Version: MPL 1.1/GPL 2.0/LGPL 2.1
+#
+# The contents of this file are subject to the Mozilla Public License Version
+# 1.1 (the "License"); you may not use this file except in compliance with
+# the License. You may obtain a copy of the License at
+# http://www.mozilla.org/MPL/
+#
+# Software distributed under the License is distributed on an "AS IS" basis,
+# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+# for the specific language governing rights and limitations under the
+# License.
+#
+# The Original Code is mozilla.org code.
+#
+# The Initial Developer of the Original Code is
+# The Mozilla Foundation.
+# Portions created by the Initial Developer are Copyright (C) 2010
+# the Initial Developer. All Rights Reserved.
+#
+# Contributor(s):
+#   Ben Newman <b{enjam,newma}n@mozilla.com> (original author)
+#
+# Alternatively, the contents of this file may be used under the terms of
+# either of the GNU General Public License Version 2 or later (the "GPL"),
+# or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+# in which case the provisions of the GPL or the LGPL are applicable instead
+# of those above. If you wish to allow use of your version of this file only
+# under the terms of either the GPL or the LGPL, and not to allow others to
+# use your version of this file under the terms of the MPL, indicate your
+# decision by deleting the provisions above and replace them with the notice
+# and other provisions required by the GPL or the LGPL. If you do not delete
+# the provisions above, a recipient may use your version of this file under
+# the terms of any one of the MPL, the GPL or the LGPL.
+#
+# ***** END LICENSE BLOCK *****
+
+DEPTH     = ../../../..
+topsrcdir = @top_srcdir@
+srcdir    = @srcdir@
+VPATH     = @srcdir@
+
+include $(DEPTH)/config/autoconf.mk
+
+MODULE = test_jsipc
+
+XPCSHELL_TESTS = unit
+
+include $(topsrcdir)/config/config.mk
+include $(topsrcdir)/config/rules.mk
diff --git a/js/src/ipc/tests/adhoc/child.html b/js/src/ipc/tests/adhoc/child.html
new file mode 100644
--- /dev/null
+++ b/js/src/ipc/tests/adhoc/child.html
@@ -0,0 +1,30 @@
+<html>
+  <head>
+  </head>
+  <body>
+    <script>
+      window.foo = {
+        a: 42,
+        b: 37 * 73,
+        ctor: function(name, value) {
+          this[name] = value;
+        },
+        fakector: function(name, value) {
+          window[name] = "oyez";
+          this[name] = value;
+          return window;
+        },
+        f: function(x) {
+          document.body.appendChild(document.createElement("div")).innerHTML =
+            "called f(" + x + ")";
+          return x + Math.PI;
+        },
+        pitch: function(ball) {
+          throw ball;
+        }
+      };
+      window.foo.self = window.foo;
+    </script>
+    oyez
+  </body>
+</html>
diff --git a/js/src/ipc/tests/adhoc/test.xul b/js/src/ipc/tests/adhoc/test.xul
new file mode 100644
--- /dev/null
+++ b/js/src/ipc/tests/adhoc/test.xul
@@ -0,0 +1,84 @@
+<?xml version="1.0"?>
+<?xml-stylesheet href="chrome://global/skin" type="text/css"?>
+<window xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
+        width="800" height="600" orient="vertical">
+
+  <script type="application/javascript">
+
+    var cpow_tests = {
+      resolve: function(obj, keys) {
+        alert("resolving");
+        keys = keys.split(" ");
+        for (var i = 0; i != keys.length; ++i)
+          alert("has " + keys[i] + "? " + (keys[i] in obj));
+        alert("done resolving");
+      },
+      iterate: function(obj) {
+        alert("iterating");
+        for (var k in obj)
+          alert("key: " + k);
+        alert("done iterating");
+      },
+      navigate: function(child) {
+        alert("navigating");
+        child.location = prompt("Where to?");
+        setTimeout(function() {
+          alert(child.location.href);
+        }, 2000);
+      },
+      construct: function(foo) {
+        alert(new foo.ctor("answer", 42).answer);
+        alert(new foo.fakector("answer", 42).answer);
+      },
+      indirect_eval: function(child) {
+        alert(child.eval("location.href"));
+        alert(new child.Function("x", "return x+1")(42));
+      },
+      funcalls: function(foo) {
+        var fn = foo.f;
+        alert(foo.f(2));
+        alert(fn.call.call(fn, foo, 3));
+      },
+      equality: function(child) {
+        var foo = child.foo,
+            self = foo.self;
+        alert("foo == self? " + (foo == self));
+        alert("foo === self? " + (foo === self));
+      },
+      exceptions: function(child) {
+        var ball = "ball";
+        try {
+          child.foo.pitch(ball);
+          alert("shouldn't reach this point");
+        } catch (x) {
+          alert("ball === x? " + (ball === x));
+        }
+      }
+    }
+
+    function test_cpow() {
+      var page = document.getElementById("page"),
+          owner = page.QueryInterface(Components.interfaces.nsIFrameLoaderOwner),
+          child = owner.crossProcessObjectWrapper;
+
+      cpow_tests.construct(child.foo);
+      cpow_tests.resolve(child.location, "href hostname");
+      cpow_tests.iterate(child.location);
+      cpow_tests.iterate(child.foo);
+      cpow_tests.funcalls(child.foo);
+      cpow_tests.equality(child);
+      cpow_tests.exceptions(child);
+    
+    }
+  </script>
+
+  <toolbar id="controls">
+    <toolbarbutton onclick="test_cpow()" label="Run tests."/>
+  </toolbar>
+
+  <browser remote="true" width="200" height="200"
+           type="content"
+           src="child.html"
+           id="page" />
+
+</window>
diff --git a/js/src/ipc/tests/unit/cpow_child.js b/js/src/ipc/tests/unit/cpow_child.js
new file mode 100644
--- /dev/null
+++ b/js/src/ipc/tests/unit/cpow_child.js
@@ -0,0 +1,62 @@
+var data = {
+  answer: 42,
+  nested: { objects: { work: "yes they do" } },
+  arr: [
+    "zeroeth",
+    { foo: "bar" },
+    function() { return data },
+    { toString: function() { return "last" } }
+  ],
+  toString: function() {
+    return "CPOW";
+  }
+};
+
+var empty = function() {
+  this.try_to_delete = "just try";
+};
+empty.prototype = {
+  try_to_delete: "bwahaha",
+  inherited: "inherited",
+  method: function() {
+    return "called"
+  }
+};
+data.derived = new empty;
+
+(data.constructor = function(value) {
+  var self = this;
+  this.value = value;
+  this.check = function(that) {
+    do_check_eq(this.value, that.value);
+    do_check_eq(this, self);
+    do_check_eq(this, that);
+    do_check_false(this.isGlobal());
+  };
+}).prototype = {
+  isGlobal: function() {
+    return (function() { return this })() == this;
+  }
+};
+
+function A() {
+  this.a = A;
+  this.b = A;
+}
+function B() {
+  this.b = B;
+  this.c = B;
+}
+B.prototype = new A;
+
+function pitch(ball) {
+  throw ball;
+}
+
+get_set = {
+  get foo() { return 42; },
+  get foo_throws() { throw "BAM"; },
+  set one(val) { this.two = val + 1; }
+};
+
+function run_test() {}
diff --git a/js/src/ipc/tests/unit/test_cpow.js b/js/src/ipc/tests/unit/test_cpow.js
new file mode 100644
--- /dev/null
+++ b/js/src/ipc/tests/unit/test_cpow.js
@@ -0,0 +1,232 @@
+function run_test() {
+  run_test_in_child("cpow_child.js", run_actual_tests);
+}
+
+function run_actual_tests() {
+  var obj = getChildGlobalObject();
+
+  test_properties(obj.data);
+  test_delete(obj.data);
+  test_toString(obj.data);
+  test_inheritance(obj.data.derived);
+  test_constructor(obj.data.constructor,
+                   obj.Function,
+                   obj.Object,
+                   obj.Date);
+  test_instanceof(obj.A, obj.B);
+  test_enumeration(obj.A, obj.B);
+  test_Array(obj.Array);
+  test_Function(obj.Function);
+  test_exceptions(obj.pitch, obj.Object);
+  test_generators(obj.Function);
+  test_Iterator(obj.data, obj.Iterator, obj.StopIteration);
+  test_getters_setters(obj.get_set, obj.Function);
+
+  do_test_finished();
+}
+
+function test_properties(data) {
+  do_check_true("answer" in data);
+  do_check_false("cnefhasefho" in data.nested);
+
+  do_check_eq(data.answer, 42);
+  do_check_eq(data.nested.objects.work,
+              "yes they do");
+  do_check_eq(data.asodfijasdiofj, void(0));
+
+  do_check_eq(data.arr.length, 4);
+  do_check_eq(data.arr[4], void(0));
+  do_check_eq(data.arr[0], "zeroeth");
+  do_check_eq(data.arr[1].foo, "bar");
+
+  do_check_true(2 in data.arr);
+  do_check_eq(data.arr[2], data.arr[2]); // ensure reuse
+  do_check_true(data.arr[2]() === data);
+  do_check_eq(data.arr[2]().arr[0], "zeroeth");
+  do_check_true("call" in data.arr[2]);
+
+  do_check_eq(data.arr[3], "last");
+}
+
+function test_delete(data) {
+  do_check_eq(data.derived.try_to_delete, "just try");
+  do_check_true(delete data.derived.try_to_delete);
+  do_check_eq(data.derived.try_to_delete, "bwahaha");
+  do_check_true(delete data.derived.try_to_delete);
+  do_check_eq(data.derived.try_to_delete, "bwahaha");
+}
+
+function test_toString(data) {
+  do_check_eq(data.toString(), "CPOW");
+  do_check_eq(data + "asdf", "CPOWasdf");
+  do_check_eq(new String(data), "CPOW");
+}
+
+function test_inheritance(derived) {
+  do_check_true("inherited" in derived);
+  do_check_false(derived.hasOwnProperty("inherited"));
+  var base = derived.__proto__;
+  do_check_true(base.hasOwnProperty("inherited"));
+  do_check_eq(derived.inherited, "inherited");
+  do_check_eq(derived.method(), "called");
+  do_check_eq(base.method, derived.method);
+  do_check_true(base.method === derived.method);
+}
+
+function test_constructor(ctor,
+                          ChildFunction,
+                          ChildObject,
+                          ChildDate) {
+  var obj = new ctor(42);
+  obj.check(obj);
+
+  // Re-run test_inheritance, creating locally everything that
+  // test_inheritance expects to be created in the child process:
+  var empty = new ChildFunction(),
+      proto = new ChildObject();
+  proto.inherited = "inherited";
+  proto.method = new ChildFunction("return 'called'");
+  empty.prototype = proto;
+  test_inheritance(new empty);
+
+  var cd = new ChildDate,
+      tolerance_ms = 20000; // Ridiculously large to accommodate gcZeal delays.
+  do_check_eq(Math.max(Math.abs(cd.getTime() - new Date),
+                       tolerance_ms),
+              tolerance_ms);
+  do_check_true(cd instanceof ChildDate);
+}
+
+function test_enumeration(A, B) {
+  function check(obj, nk, s) {
+    var keys = [];
+    for (var k in obj)
+      keys[keys.length] = k;
+    do_check_eq(keys.length, nk);
+    do_check_eq(keys.sort().join("~"), s);
+  }
+  check(new B, 3, "a~b~c");
+  check(B.prototype, 2, "a~b");
+  B.prototype = A.prototype;
+  A.prototype = new B;
+  check(new A, 3, "a~b~c");
+  check(new B, 2, "b~c");
+
+  // Put things back the way they were, mostly:
+  A.prototype = B.prototype;
+  B.prototype = new A;
+}
+
+function test_instanceof(A, B) {
+  var a = new A, b = new B;
+  do_check_true(a instanceof A);
+  do_check_false(a instanceof B);
+  do_check_true(b instanceof A);
+  do_check_true(b instanceof B);
+}
+
+function test_Array(ChildArray) {
+  do_check_true(!!ChildArray);
+  var arr = new ChildArray(1, new ChildArray(2, 3), 4);
+  do_check_eq(arr.length, 3);
+  do_check_eq(arr.slice(1).shift()[1], 3);
+  arr[2] = arr[1];
+  do_check_eq(arr.pop()[0], 2);
+}
+
+function test_Function(ChildFunction) {
+  var succ = new ChildFunction("x", "return x + 1");
+  do_check_eq(succ(succ(3)), 5);
+  do_check_eq(succ + "", "" + new Function("x", "return x + 1"));
+}
+
+function test_exceptions(pitch, ChildObject) {
+  try {
+    throw "parent-only";
+  } catch (x) {
+    do_check_eq(x, "parent-only");
+  }
+  var ball = new ChildObject(),
+      thrown = false;
+  ball.sport = "baseball";
+  try {
+    pitch(ball);
+    do_throw("Should have thrown.");
+  } catch (x) {
+    thrown = true;
+    do_check_eq(x.sport, "baseball");
+    do_check_eq(x, ball);
+    do_check_true(x === ball);
+  }
+  do_check_true(thrown);
+}
+
+function test_generators(ChildFunction) {
+  // Run the test with own Function just to keep sane:
+  if (ChildFunction != Function)
+    test_generators(Function);
+
+  var count = 0, sum = 0,
+      genFn = new ChildFunction("for(var i = 1; i < 4; i++) yield i");
+
+  var gen = genFn();
+  do try { sum += gen.next(); }
+     catch (x) { break; }
+  while ((count += 1));
+  do_check_eq(count, 3);
+  do_check_eq(sum, 6);
+
+  try {
+    for (var n in genFn()) {
+      count += 1;
+      sum += n;
+    }
+  } catch (x) {}
+  do_check_eq(count, 6);
+  do_check_eq(sum, 12);
+}
+
+function test_Iterator(data, ChildIterator, ChildStopIteration) {
+  do_check_true(data && ChildIterator && true);
+  var copy = {},
+      thrown = null;
+  try {
+    for (var kv in ChildIterator(data)) {
+      do_check_true(kv[0] in data);
+      do_check_eq(data[kv[0]], kv[1]);
+      copy[kv[0]] = kv[1];
+    }
+    // XXX I shouldn't have to be catching this, should I?
+  } catch (x) { thrown = x; }
+  do_check_true(thrown != null);
+  do_check_true(thrown instanceof ChildStopIteration);
+  do_check_eq(copy + "", "CPOW");
+}
+
+function test_getters_setters(get_set, ChildFunction) {
+  do_check_eq(get_set.foo, 42);
+  var thrown = null;
+  try { get_set.bar = get_set.foo_throws; }
+  catch (x) { thrown = x; }
+  do_check_true(thrown != null);
+  do_check_eq(thrown, "BAM");
+  do_check_false("bar" in get_set);
+
+  get_set.two = 2222;
+  get_set.one = 1;
+  do_check_eq(get_set.two, 2);
+
+  var getter = new ChildFunction("return 'you got me'");
+  get_set.__defineGetter__("defined_getter", getter);
+  do_check_eq(get_set.defined_getter, "you got me");
+  do_check_eq(get_set.__lookupGetter__("defined_getter"),
+              getter);
+
+  var setter = new ChildFunction("val", "this.side_effect = val");
+  get_set.__defineSetter__("defined_setter", setter);
+  get_set.side_effect = "can't touch this";
+  get_set.defined_setter = "you set me";
+  do_check_eq(get_set.side_effect, "you set me");
+  do_check_eq(get_set.__lookupSetter__("defined_setter"),
+              setter);
+}
