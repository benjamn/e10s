diff --git a/js/src/ipc/ObjectWrapperChild.cpp b/js/src/ipc/ObjectWrapperChild.cpp
--- a/js/src/ipc/ObjectWrapperChild.cpp
+++ b/js/src/ipc/ObjectWrapperChild.cpp
@@ -476,57 +476,73 @@ ObjectWrapperChild::AnswerConvert(const 
 {
     jsval v;
     JSContext* cx = Manager()->GetContext();
     JSAutoRequest request(cx);
     *ok = JS_ConvertValue(cx, OBJECT_TO_JSVAL(mObj), type, &v);
     return jsval_to_JSVariant(cx, *ok ? v : JSVAL_VOID, vp);
 }
 
+namespace {
+    // Should be an overestimate of typical JS function arity.
+    typedef nsAutoTArray<jsval, 5> AutoJSArgs;
+}
+
 bool
 ObjectWrapperChild::AnswerCall(PObjectWrapperChild* receiver, const nsTArray<JSVariant>& argv,
                                JSBool* ok, JSVariant* rval)
 {
     *ok = JS_FALSE;
     
     JSContext* cx = Manager()->GetContext();
     JSAutoRequest request(cx);
 
     JSObject* obj;
     if (!JSObject_from_PObjectWrapperChild(cx, receiver, &obj))
         return false;
 
-    jsval rv, jsargs[argv.Length()];
-    JSAutoTempValueRooter tvr(cx, argv.Length(), jsargs);
-    for (PRUint32 i = 0; i < argv.Length(); ++i)
+    AutoJSArgs args;
+    PRUint32 argc = argv.Length();
+    jsval *jsargs = args.AppendElements(argc);
+    if (!jsargs)
+        return false;
+    JSAutoTempValueRooter tvr(cx, argc, jsargs);
+
+    for (PRUint32 i = 0; i < argc; ++i)
         if (!jsval_from_JSVariant(cx, argv.ElementAt(i), jsargs + i))
             return false;
 
+    jsval rv;
     *ok = JS_CallFunctionValue(cx, obj, OBJECT_TO_JSVAL(mObj),
                                argv.Length(), jsargs, &rv);
 
     return jsval_to_JSVariant(cx, *ok ? rv : JSVAL_VOID, rval);
 }
 
 bool
 ObjectWrapperChild::AnswerConstruct(const nsTArray<JSVariant>& argv,
                                     JSBool* ok, PObjectWrapperChild** rval)
 {
     *ok = JS_FALSE;
 
     JSContext* cx = Manager()->GetContext();
     JSAutoRequest request(cx);
 
-    jsval jsargs[argv.Length()];
-    JSAutoTempValueRooter tvr(cx, argv.Length(), jsargs);
-    for (PRUint32 i = 0; i < argv.Length(); ++i)
+    AutoJSArgs args;
+    PRUint32 argc = argv.Length();
+    jsval* jsargs = args.AppendElements(argc);
+    if (!jsargs)
+        return false;
+    JSAutoTempValueRooter tvr(cx, argc, jsargs);
+
+    for (PRUint32 i = 0; i < argc; ++i)
         if (!jsval_from_JSVariant(cx, argv.ElementAt(i), jsargs + i))
             return false;
 
-    JSObject* obj = JS_New(cx, mObj, argv.Length(), jsargs);
+    JSObject* obj = JS_New(cx, mObj, argc, jsargs);
 
     *ok = !!obj;
     *rval = Manager()->GetOrCreateWrapper(obj);
 
     return true;
 }
 
 bool
