diff --git a/dom/ipc/ContentProcessChild.cpp b/dom/ipc/ContentProcessChild.cpp
--- a/dom/ipc/ContentProcessChild.cpp
+++ b/dom/ipc/ContentProcessChild.cpp
@@ -37,17 +37,17 @@
  * ***** END LICENSE BLOCK ***** */
 
 #include "ContentProcessChild.h"
 #include "TabChild.h"
 
 #include "mozilla/ipc/TestShellChild.h"
 #include "mozilla/net/NeckoChild.h"
 #include "mozilla/ipc/XPCShellEnvironment.h"
-#include "mozilla/jsipc/ObjectWrapperLiaisonChild.h"
+#include "mozilla/jsipc/ContextWrapperChild.h"
 
 #include "nsXULAppAPI.h"
 
 #include "base/message_loop.h"
 #include "base/task.h"
 
 using namespace mozilla::ipc;
 using namespace mozilla::net;
@@ -117,23 +117,23 @@ ContentProcessChild::DeallocPTestShell(P
     mTestShells.RemoveElement(shell);
     return true;
 }
     
 bool
 ContentProcessChild::RecvPTestShellConstructor(PTestShellChild* actor)
 {
     XPCShellEnvironment* env;
-    ObjectWrapperLiaisonChild* owlc;
+    ContextWrapperChild* cwc;
     JSContext* cx;
 
     if ((env = static_cast<TestShellChild*>(actor)->GetXPCShell()) &&
         (cx = env->GetContext()) &&
-        (owlc = new ObjectWrapperLiaisonChild(cx)))
-        SendPObjectWrapperLiaisonConstructor(owlc, actor)
+        (cwc = new ContextWrapperChild(cx)))
+        SendPContextWrapperConstructor(cwc, actor)
             ->SendPObjectWrapperConstructor(true);
 
     return true;
 }
 
 PNeckoChild* 
 ContentProcessChild::AllocPNecko()
 {
@@ -142,28 +142,28 @@ ContentProcessChild::AllocPNecko()
 
 bool 
 ContentProcessChild::DeallocPNecko(PNeckoChild* necko)
 {
     delete necko;
     return true;
 }
 
-PObjectWrapperLiaisonChild*
-ContentProcessChild::AllocPObjectWrapperLiaison(const JSRuntimeOwner&)
+PContextWrapperChild*
+ContentProcessChild::AllocPContextWrapper(const JSRuntimeOwner&)
 {
-    NS_NOTREACHED("ContentProcessChild::AllocPObjectWrapperLiaison does not "
+    NS_NOTREACHED("ContentProcessChild::AllocPContextWrapper does not "
                   "have enough information to allocate instances of "
-                  "ObjectWrapperLiaisonChild (see "
-                  "TabChild::CreateObjectWrapperLiaisonAndAttachGlobalObject).");
+                  "ContextWrapperChild (see "
+                  "TabChild::CreateContextWrapperAndAttachGlobalObject).");
     return NULL;
 }
 
 bool
-ContentProcessChild::DeallocPObjectWrapperLiaison(PObjectWrapperLiaisonChild* actor)
+ContentProcessChild::DeallocPContextWrapper(PContextWrapperChild* actor)
 {
     delete actor;
     return true;
 }
     
 void
 ContentProcessChild::Quit()
 {
diff --git a/dom/ipc/ContentProcessChild.h b/dom/ipc/ContentProcessChild.h
--- a/dom/ipc/ContentProcessChild.h
+++ b/dom/ipc/ContentProcessChild.h
@@ -70,18 +70,18 @@ public:
     virtual PTestShellChild* AllocPTestShell();
     virtual bool DeallocPTestShell(PTestShellChild*);
     virtual bool RecvPTestShellConstructor(PTestShellChild* actor);
 
     virtual PNeckoChild* AllocPNecko();
     virtual bool DeallocPNecko(PNeckoChild*);
 
 protected:
-    virtual PObjectWrapperLiaisonChild* AllocPObjectWrapperLiaison(const JSRuntimeOwner&);
-    virtual bool DeallocPObjectWrapperLiaison(PObjectWrapperLiaisonChild* actor);
+    virtual PContextWrapperChild* AllocPContextWrapper(const JSRuntimeOwner&);
+    virtual bool DeallocPContextWrapper(PContextWrapperChild* actor);
     
 private:
     NS_OVERRIDE
     virtual void ActorDestroy(ActorDestroyReason why);
 
     void Quit();
 
     static ContentProcessChild* sSingleton;
diff --git a/dom/ipc/ContentProcessParent.cpp b/dom/ipc/ContentProcessParent.cpp
--- a/dom/ipc/ContentProcessParent.cpp
+++ b/dom/ipc/ContentProcessParent.cpp
@@ -179,52 +179,52 @@ ContentProcessParent::AllocPNecko()
 
 bool 
 ContentProcessParent::DeallocPNecko(PNeckoParent* necko)
 {
     delete necko;
     return true;
 }
 
-PObjectWrapperLiaisonParent*
-ContentProcessParent::AllocPObjectWrapperLiaison(const JSRuntimeOwner&)
+PContextWrapperParent*
+ContentProcessParent::AllocPContextWrapper(const JSRuntimeOwner&)
 {
-    return new ObjectWrapperLiaisonParent();
+    return new ContextWrapperParent();
 }
 
 bool
-ContentProcessParent::DeallocPObjectWrapperLiaison(PObjectWrapperLiaisonParent* actor)
+ContentProcessParent::DeallocPContextWrapper(PContextWrapperParent* actor)
 {
     delete actor;
     return true;
 }
 
 bool
 ContentProcessParent::
-RecvPObjectWrapperLiaisonConstructor(PObjectWrapperLiaisonParent* actor,
+RecvPContextWrapperConstructor(PContextWrapperParent* actor,
                                      const JSRuntimeOwner& jsro)
 {
     // TODO This method can go away once IPDL supports multiple managers,
     // for then PObjectWrapper can be managed by PIFrameEmbeddingParent
     // and PTestShellParent, instead of their common parent
     // PContentProcess.
     
     switch (jsro.type()) {
     case JSRuntimeOwner::TPIFrameEmbeddingParent:
         {
             const TabParent* tp =
                 static_cast<const TabParent*>(jsro.get_PIFrameEmbeddingParent());
-            const_cast<TabParent*>(tp)->SetObjectWrapperLiaison(actor);
+            const_cast<TabParent*>(tp)->SetContextWrapper(actor);
             return true;
         }
     case JSRuntimeOwner::TPTestShellParent:
         {
             const TestShellParent* tsp =
                 static_cast<const TestShellParent*>(jsro.get_PTestShellParent());
-            const_cast<TestShellParent*>(tsp)->SetObjectWrapperLiaison(actor);
+            const_cast<TestShellParent*>(tsp)->SetContextWrapper(actor);
             return true;
         }
     default:
         return false;
     }
 }   
 
 } // namespace dom
diff --git a/dom/ipc/ContentProcessParent.h b/dom/ipc/ContentProcessParent.h
--- a/dom/ipc/ContentProcessParent.h
+++ b/dom/ipc/ContentProcessParent.h
@@ -97,19 +97,19 @@ private:
     virtual bool DeallocPIFrameEmbedding(PIFrameEmbeddingParent* frame);
 
     virtual PTestShellParent* AllocPTestShell();
     virtual bool DeallocPTestShell(PTestShellParent* shell);
 
     virtual PNeckoParent* AllocPNecko();
     virtual bool DeallocPNecko(PNeckoParent* necko);
 
-    virtual PObjectWrapperLiaisonParent* AllocPObjectWrapperLiaison(const JSRuntimeOwner&);
-    virtual bool DeallocPObjectWrapperLiaison(PObjectWrapperLiaisonParent* actor);
-    virtual bool RecvPObjectWrapperLiaisonConstructor(PObjectWrapperLiaisonParent* actor,
+    virtual PContextWrapperParent* AllocPContextWrapper(const JSRuntimeOwner&);
+    virtual bool DeallocPContextWrapper(PContextWrapperParent* actor);
+    virtual bool RecvPContextWrapperConstructor(PContextWrapperParent* actor,
                                                       const JSRuntimeOwner& jsro);
     mozilla::Monitor mMonitor;
 
     GeckoChildProcessHost* mSubprocess;
 };
 
 } // namespace dom
 } // namespace mozilla
diff --git a/dom/ipc/PContentProcess.ipdl b/dom/ipc/PContentProcess.ipdl
--- a/dom/ipc/PContentProcess.ipdl
+++ b/dom/ipc/PContentProcess.ipdl
@@ -34,62 +34,62 @@
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 include protocol "PIFrameEmbedding.ipdl";
 include protocol "PTestShell.ipdl";
 include protocol "PNecko.ipdl";
-include protocol "PObjectWrapperLiaison.ipdl";
+include protocol "PContextWrapper.ipdl";
 
 include "mozilla/TabTypes.h";
 
 namespace mozilla {
 namespace dom {
 
-/* Although PContentProcess manages PObjectWrapperLiaison,
- * PObjectWrapperLiaison instances are always created by (or on behalf of)
+/* Although PContentProcess manages PContextWrapper,
+ * PContextWrapper instances are always created by (or on behalf of)
  * a particular PIFrameEmbedding or PTestShell, since each instance of these
- * subprotocols has its own JSRuntime (and distinct PObjectWrapperLiaisons
+ * subprotocols has its own JSRuntime (and distinct PContextWrappers
  * are needed for distinct JSRuntimes).
  *
  * It would be more natural to allow both PIFrameEmbedding and PTestShell
- * to manage PObjectWrapperLiaison, but as far as I can tell IPDL
+ * to manage PContextWrapper, but as far as I can tell IPDL
  * protocols cannot have multiple managers.
  *
- * So that we can later determine which PObjectWrapperLiaisonParent is
+ * So that we can later determine which PContextWrapperParent is
  * associated with a given PIFrameEmbeddingParent or PTestShellParent, the
- * PObjectWrapperLiaison constructor message must convey to the
+ * PContextWrapper constructor message must convey to the
  * PContentProcessParent which PIFrameEmbeddingChild or PTestShellChild
- * sent the PObjectWrapperLiaison constructor message.
+ * sent the PContextWrapper constructor message.
  *
- * We might like to have two separate PObjectWrapperLiaison constructors,
+ * We might like to have two separate PContextWrapper constructors,
  * one accepting a PIFrameEmbeddingChild and the other a PTestShell.
  * Alas, IPDL constructors can't be overloaded, so we'll settle for a
  * single constructor that accepts a union-type parameter.
  */
 union JSRuntimeOwner {
     PIFrameEmbedding;
     PTestShell;
 };
     
 rpc protocol PContentProcess
 {
     manages PIFrameEmbedding;
     manages PTestShell;
     manages PNecko;
-    manages PObjectWrapperLiaison;
+    manages PContextWrapper;
 
 child:
     PIFrameEmbedding();
 
     PTestShell();
 
 parent:
     PNecko();
 
-    PObjectWrapperLiaison(JSRuntimeOwner jsro);
+    PContextWrapper(JSRuntimeOwner jsro);
 
 };
 
 }
 }
diff --git a/dom/ipc/TabChild.cpp b/dom/ipc/TabChild.cpp
--- a/dom/ipc/TabChild.cpp
+++ b/dom/ipc/TabChild.cpp
@@ -51,17 +51,17 @@
 #include "nsPIDOMWindow.h"
 #include "nsIDOMWindowUtils.h"
 #include "nsISupportsImpl.h"
 #include "nsIWebBrowserFocus.h"
 #include "nsIDOMEvent.h"
 #include "nsIPrivateDOMEvent.h"
 
 #include "mozilla/dom/PContentProcessChild.h"
-#include "mozilla/jsipc/ObjectWrapperLiaisonChild.h"
+#include "mozilla/jsipc/ContextWrapperChild.h"
 
 #include "nsIDocument.h"
 #include "nsIScriptGlobalObject.h"
 #include "nsIScriptContext.h"
 #include "jscntxt.h"
 
 #ifdef MOZ_WIDGET_GTK2
 #include <gdk/gdkx.h>
@@ -338,17 +338,17 @@ TabChild::RecvloadURL(const nsCString& u
 
     nsresult rv = mWebNav->LoadURI(NS_ConvertUTF8toUTF16(uri).get(),
                                    nsIWebNavigation::LOAD_FLAGS_NONE,
                                    NULL, NULL, NULL);
     if (NS_FAILED(rv)) {
         NS_WARNING("mWebNav->LoadURI failed. Eating exception, what else can I do?");
     }
 
-    CreateObjectWrapperLiaisonAndSetGlobalObject();
+    CreateContextWrapperAndSetGlobalObject();
     
     return true;
 }
 
 bool
 TabChild::Recvmove(const PRUint32& x,
                      const PRUint32& y,
                      const PRUint32& width,
@@ -400,27 +400,27 @@ GetJSContext(nsIWebNavigation* webNav)
         (global = do_QueryInterface(document->GetScriptGlobalObject())) &&
         (context = do_QueryInterface(global->GetContext())))
         return static_cast<JSContext*>(context->GetNativeContext());
 
     return NULL;
 }
 
 void
-TabChild::CreateObjectWrapperLiaisonAndSetGlobalObject()
+TabChild::CreateContextWrapperAndSetGlobalObject()
 {
     JSContext* cx;
     PContentProcessChild* manager;
-    mozilla::jsipc::ObjectWrapperLiaisonChild* owlc;
+    mozilla::jsipc::ContextWrapperChild* cwc;
 
     if ((cx = GetJSContext(mWebNav)) &&
         (manager = Manager()) &&
-        (owlc = new mozilla::jsipc::ObjectWrapperLiaisonChild(cx)))
+        (cwc = new mozilla::jsipc::ContextWrapperChild(cx)))
         manager
-            ->SendPObjectWrapperLiaisonConstructor(owlc, this)
+            ->SendPContextWrapperConstructor(cwc, this)
             ->SendPObjectWrapperConstructor(true);
 }
 
 mozilla::ipc::PDocumentRendererChild*
 TabChild::AllocPDocumentRenderer(
         const PRInt32& x,
         const PRInt32& y,
         const PRInt32& w,
diff --git a/dom/ipc/TabChild.h b/dom/ipc/TabChild.h
--- a/dom/ipc/TabChild.h
+++ b/dom/ipc/TabChild.h
@@ -119,17 +119,17 @@ public:
             const PRInt32& w,
             const PRInt32& h,
             const nsString& bgcolor,
             const PRUint32& flags,
             const bool& flush);
 
 private:
     nsCOMPtr<nsIWebNavigation> mWebNav;
-    void CreateObjectWrapperLiaisonAndSetGlobalObject();
+    void CreateContextWrapperAndSetGlobalObject();
 
     DISALLOW_EVIL_CONSTRUCTORS(TabChild);
 };
 
 }
 }
 
 #endif // mozilla_tabs_TabChild_h
diff --git a/dom/ipc/TabParent.cpp b/dom/ipc/TabParent.cpp
--- a/dom/ipc/TabParent.cpp
+++ b/dom/ipc/TabParent.cpp
@@ -54,17 +54,17 @@
 
 using mozilla::ipc::BrowserProcessSubThread;
 using mozilla::ipc::DocumentRendererParent;
 
 namespace mozilla {
 namespace dom {
 
 TabParent::TabParent()
-  : mObjectWrapperLiaison(nsnull)
+  : mContextWrapper(nsnull)
 {
 }
 
 TabParent::~TabParent()
 {
 }
 
 bool
diff --git a/dom/ipc/TabParent.h b/dom/ipc/TabParent.h
--- a/dom/ipc/TabParent.h
+++ b/dom/ipc/TabParent.h
@@ -35,17 +35,17 @@
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 #ifndef mozilla_tabs_TabParent_h
 #define mozilla_tabs_TabParent_h
 
 #include "mozilla/dom/PIFrameEmbeddingParent.h"
-#include "mozilla/jsipc/ObjectWrapperLiaisonParent.h"
+#include "mozilla/jsipc/ContextWrapperParent.h"
 
 #include "mozilla/ipc/GeckoChildProcessHost.h"
 
 #include "nsCOMPtr.h"
 #include "nsIBrowserDOMWindow.h"
 
 class nsIURI;
 class nsIDOMElement;
@@ -83,27 +83,27 @@ public:
             const PRInt32& y,
             const PRInt32& w,
             const PRInt32& h,
             const nsString& bgcolor,
             const PRUint32& flags,
             const bool& flush);
     virtual bool DeallocPDocumentRenderer(PDocumentRendererParent* actor);
 
-    void SetObjectWrapperLiaison(PObjectWrapperLiaisonParent* powlp) {
-        mObjectWrapperLiaison = static_cast<ObjectWrapperLiaisonParent*>(powlp);
+    void SetContextWrapper(PContextWrapperParent* pcwp) {
+        mContextWrapper = static_cast<ContextWrapperParent*>(pcwp);
     }
 
     bool GetGlobalJSObject(JSContext* cx, JSObject** globalp) {
-        return (mObjectWrapperLiaison &&
-                mObjectWrapperLiaison->GetGlobalJSObject(cx, globalp));
+        return (mContextWrapper &&
+                mContextWrapper->GetGlobalJSObject(cx, globalp));
     }
 
 protected:
     nsIDOMElement* mFrameElement;
     nsCOMPtr<nsIBrowserDOMWindow> mBrowserDOMWindow;
-    ObjectWrapperLiaisonParent* mObjectWrapperLiaison;
+    ContextWrapperParent* mContextWrapper;
 };
 
 } // namespace dom
 } // namespace mozilla
 
 #endif
diff --git a/ipc/testshell/TestShellParent.h b/ipc/testshell/TestShellParent.h
--- a/ipc/testshell/TestShellParent.h
+++ b/ipc/testshell/TestShellParent.h
@@ -45,17 +45,17 @@
 
 #include "jsapi.h"
 #include "nsAutoJSValHolder.h"
 #include "nsStringGlue.h"
 
 namespace mozilla {
 
 namespace jsipc {
-class PObjectWrapperLiaisonParent;
+class PContextWrapperParent;
 }
 
 namespace ipc {
 
 using namespace mozilla::jsipc;
 
 class TestShellCommandParent;
 
@@ -66,25 +66,25 @@ public:
   AllocPTestShellCommand(const nsString& aCommand);
 
   bool
   DeallocPTestShellCommand(PTestShellCommandParent* aActor);
 
   bool
   CommandDone(TestShellCommandParent* aActor, const nsString& aResponse);
 
-  void SetObjectWrapperLiaison(PObjectWrapperLiaisonParent* powlp) {
-    mObjectWrapperLiaison = powlp;
+  void SetContextWrapper(PContextWrapperParent* pcwp) {
+    mContextWrapper = pcwp;
   }
-  PObjectWrapperLiaisonParent* GetObjectWrapperLiaison() const {
-    return mObjectWrapperLiaison;
+  PContextWrapperParent* GetContextWrapper() const {
+    return mContextWrapper;
   }
 
 private:
-  PObjectWrapperLiaisonParent* mObjectWrapperLiaison;
+  PContextWrapperParent* mContextWrapper;
 };
 
 
 class TestShellCommandParent : public PTestShellCommandParent
 {
 public:
   TestShellCommandParent() : mCx(NULL) { }
 
diff --git a/js/src/ipc/CPOWTypes.h b/js/src/ipc/CPOWTypes.h
--- a/js/src/ipc/CPOWTypes.h
+++ b/js/src/ipc/CPOWTypes.h
@@ -1,10 +1,10 @@
-#ifndef mozilla_jsipc_ObjectWrapperLiaisonTypes_h__
-#define mozilla_jsipc_ObjectWrapperLiaisonTypes_h__
+#ifndef mozilla_jsipc_ContextWrapperTypes_h__
+#define mozilla_jsipc_ContextWrapperTypes_h__
 
 #include "jsapi.h"
 #include "jspubtd.h"
 
 namespace mozilla {
 namespace jsipc {
 
 using namespace IPC;
diff --git a/js/src/ipc/Makefile.in b/js/src/ipc/Makefile.in
--- a/js/src/ipc/Makefile.in
+++ b/js/src/ipc/Makefile.in
@@ -10,18 +10,18 @@ LIBRARY_NAME = jsipc_s
 LIBXUL_LIBRARY = 1
 FORCE_STATIC_LIB = 1
 EXPORT_LIBRARY = 1
 
 EXPORTS_NAMESPACES = mozilla/jsipc
 
 EXPORTS_mozilla/jsipc = \
   CPOWTypes.h \
-  ObjectWrapperLiaisonChild.h \
-  ObjectWrapperLiaisonParent.h \
+  ContextWrapperChild.h \
+  ContextWrapperParent.h \
   ObjectWrapperParent.h \
   ObjectWrapperChild.h \
   $(NULL)
 
 CPPSRCS = \
   ObjectWrapperParent.cpp \
   ObjectWrapperChild.cpp \
   $(NULL)
diff --git a/js/src/ipc/ObjectWrapperChild.cpp b/js/src/ipc/ObjectWrapperChild.cpp
--- a/js/src/ipc/ObjectWrapperChild.cpp
+++ b/js/src/ipc/ObjectWrapperChild.cpp
@@ -1,9 +1,9 @@
-#include "mozilla/jsipc/ObjectWrapperLiaisonChild.h"
+#include "mozilla/jsipc/ContextWrapperChild.h"
 #include "mozilla/jsipc/ObjectWrapperChild.h"
 #include "mozilla/jsipc/CPOWTypes.h"
 
 #include "nsTArray.h"
 
 namespace mozilla {
 namespace jsipc {
 
@@ -126,21 +126,21 @@ ObjectWrapperChild::jsval_from_JSVariant
     case JSVariant::Tnull_t:
         *to = JSVAL_NULL;
         return true;
     default:
         return false;
     }
 }
     
-ObjectWrapperLiaisonChild*
+ContextWrapperChild*
 ObjectWrapperChild::Manager()
 {
-    PObjectWrapperLiaisonChild* powlc = PObjectWrapperChild::Manager();
-    return static_cast<ObjectWrapperLiaisonChild*>(powlc);
+    PContextWrapperChild* pcwc = PObjectWrapperChild::Manager();
+    return static_cast<ContextWrapperChild*>(pcwc);
 }
 
 static bool
 jsid_to_nsString(JSContext* cx, jsid from, nsString* to)
 {
     jsval v;
     if (JS_IdToValue(cx, from, &v) && JSVAL_IS_STRING(v)) {
         *to = JS_GetStringChars(JSVAL_TO_STRING(v));
diff --git a/js/src/ipc/ObjectWrapperChild.h b/js/src/ipc/ObjectWrapperChild.h
--- a/js/src/ipc/ObjectWrapperChild.h
+++ b/js/src/ipc/ObjectWrapperChild.h
@@ -3,17 +3,17 @@
 
 #include "mozilla/jsipc/PObjectWrapperChild.h"
 
 using mozilla::jsipc::JSVariant;
 
 namespace mozilla {
 namespace jsipc {
 
-class ObjectWrapperLiaisonChild;
+class ContextWrapperChild;
   
 class ObjectWrapperChild
     : public PObjectWrapperChild
 {
 public:
 
     ObjectWrapperChild(JSContext* cx, JSObject* obj);
 
@@ -29,17 +29,17 @@ private:
     static bool JSObject_from_PObjectWrapperChild(JSContext* cx,
                                                   const PObjectWrapperChild* from,
                                                   JSObject** to);
     static bool JSObject_from_JSVariant(JSContext* cx, const JSVariant& from,
                                         JSObject** to);
     static bool jsval_from_JSVariant(JSContext* cx, const JSVariant& from,
                                      jsval* to);
 
-    ObjectWrapperLiaisonChild* Manager();
+    ContextWrapperChild* Manager();
 
 protected:
 
     void ActorDestroy(ActorDestroyReason why);
 
     bool AnswerAddProperty(const nsString& id);
 
     bool AnswerGetProperty(const nsString& id,
diff --git a/js/src/ipc/ObjectWrapperLiaisonChild.h b/js/src/ipc/ObjectWrapperLiaisonChild.h
deleted file mode 100644
--- a/js/src/ipc/ObjectWrapperLiaisonChild.h
+++ /dev/null
@@ -1,70 +0,0 @@
-#ifndef mozilla_jsipc_ObjectWrapperLiaisonChild_h__
-#define mozilla_jsipc_ObjectWrapperLiaisonChild_h__
-
-#include "mozilla/jsipc/PObjectWrapperLiaisonChild.h"
-#include "mozilla/jsipc/ObjectWrapperChild.h"
-
-#include "jsapi.h"
-#include "nsClassHashtable.h"
-#include "nsHashKeys.h"
-
-namespace mozilla {
-namespace jsipc {
-
-class ObjectWrapperLiaisonChild
-    : public PObjectWrapperLiaisonChild
-{
-public:
-
-    ObjectWrapperLiaisonChild(JSContext* cx)
-        : mContext(cx)
-    {
-        mResidentObjectTable.Init();
-    }
-
-    JSContext* GetContext() { return mContext; }
-
-    PObjectWrapperChild* GetOrCreateWrapper(JSObject* obj,
-                                            bool makeGlobal = false)
-    {
-        if (!obj) // Don't wrap nothin'!
-            return NULL;
-        PObjectWrapperChild* wrapper;
-        while (!mResidentObjectTable.Get(obj, &wrapper))
-            mResidentObjectTable.Put(obj, SendPObjectWrapperConstructor(AllocPObjectWrapper(obj),
-                                                                        makeGlobal));
-        return wrapper;
-    }
-    
-    PObjectWrapperChild* GetOrCreateGlobalWrapper() {
-        return GetOrCreateWrapper(JS_GetGlobalObject(mContext), true);
-    }
-    
-protected:
-
-    PObjectWrapperChild* AllocPObjectWrapper(JSObject* obj) {
-        return new ObjectWrapperChild(mContext, obj);
-    }
-    
-    PObjectWrapperChild* AllocPObjectWrapper(const bool&) {
-        return AllocPObjectWrapper(JS_GetGlobalObject(mContext));
-    }
-
-    bool DeallocPObjectWrapper(PObjectWrapperChild* actor) {
-        ObjectWrapperChild* owc = static_cast<ObjectWrapperChild*>(actor);
-        mResidentObjectTable.Remove(owc->GetJSObject());
-        return true;
-    }
-
-private:
-    
-    JSContext* const mContext;
-
-    nsClassHashtable<nsPtrHashKey<JSObject>,
-                     PObjectWrapperChild> mResidentObjectTable;
-
-};
-
-}}
-
-#endif
diff --git a/js/src/ipc/ObjectWrapperLiaisonParent.h b/js/src/ipc/ObjectWrapperLiaisonParent.h
deleted file mode 100644
--- a/js/src/ipc/ObjectWrapperLiaisonParent.h
+++ /dev/null
@@ -1,66 +0,0 @@
-#ifndef mozilla_jsipc_ObjectWrapperLiaisonParent_h__
-#define mozilla_jsipc_ObjectWrapperLiaisonParent_h__
-
-#include "mozilla/jsipc/PObjectWrapperLiaisonParent.h"
-#include "mozilla/jsipc/ObjectWrapperParent.h"
-
-#include "jsapi.h"
-#include "nsAutoJSValHolder.h"
-
-namespace mozilla {
-namespace jsipc {
-    
-class ObjectWrapperLiaisonParent
-    : public PObjectWrapperLiaisonParent
-{
-public:
-
-    ObjectWrapperLiaisonParent() : mGlobal(NULL) {}
-
-    bool GetGlobalJSObject(JSContext* cx, JSObject** globalp) {
-        if (!mGlobal)
-            return false;
-        mGlobalHolder.Hold(cx);
-        mGlobalHolder = *globalp = mGlobal->GetJSObject(cx);
-        return true;
-    }
-
-    ObjectWrapperParent* GetGlobalObjectWrapper() const {
-        return mGlobal;
-    }
-
-private:
-
-    ObjectWrapperParent* mGlobal;
-    nsAutoJSValHolder mGlobalHolder;
-
-    PObjectWrapperParent* AllocPObjectWrapper(const bool&) {
-        return new ObjectWrapperParent();
-    }
-
-    bool RecvPObjectWrapperConstructor(PObjectWrapperParent* actor,
-                                       const bool& makeGlobal)
-    {
-        if (makeGlobal) {
-            mGlobalHolder.Release();
-            mGlobal = static_cast<ObjectWrapperParent*>(actor);
-        }
-        return true;
-    }
-
-    bool DeallocPObjectWrapper(PObjectWrapperParent* actor)
-    {
-        if (mGlobal &&
-            mGlobal == static_cast<ObjectWrapperParent*>(actor)) {
-            mGlobalHolder.Release();
-            mGlobal = NULL;
-        }
-        delete actor;
-        return true;
-    }
-
-};
-
-}}
-
-#endif
diff --git a/js/src/ipc/ObjectWrapperParent.cpp b/js/src/ipc/ObjectWrapperParent.cpp
--- a/js/src/ipc/ObjectWrapperParent.cpp
+++ b/js/src/ipc/ObjectWrapperParent.cpp
@@ -1,10 +1,10 @@
 #include "mozilla/jsipc/ObjectWrapperParent.h"
-#include "mozilla/jsipc/ObjectWrapperLiaisonParent.h"
+#include "mozilla/jsipc/ContextWrapperParent.h"
 #include "mozilla/jsipc/CPOWTypes.h"
 
 #include "jsobj.h"
 #include "jsfun.h"
 
 namespace mozilla {
 namespace jsipc {
 
@@ -505,18 +505,18 @@ ObjectWrapperParent::CPOW_Call(JSContext
         Unwrap(cx, JSVAL_TO_OBJECT(JS_ARGV_CALLEE(argv)));
     if (!function)
         return JS_FALSE;
 
     ObjectWrapperParent* receiver = Unwrap(cx, obj);
     if (!receiver) {
         // Substitute child global for parent global object.
         // TODO First make sure we're really replacing the global object?
-        ObjectWrapperLiaisonParent* manager =
-            static_cast<ObjectWrapperLiaisonParent*>(function->Manager());
+        ContextWrapperParent* manager =
+            static_cast<ContextWrapperParent*>(function->Manager());
         receiver = manager->GetGlobalObjectWrapper();
     }
 
     nsTArray<JSVariant> in_argv(argc);
     for (uintN i = 0; i < argc; i++)
         if (!jsval_to_JSVariant(cx, argv[i], in_argv.AppendElement()))
             return JS_FALSE;
     
diff --git a/js/src/ipc/PObjectWrapper.ipdl b/js/src/ipc/PObjectWrapper.ipdl
--- a/js/src/ipc/PObjectWrapper.ipdl
+++ b/js/src/ipc/PObjectWrapper.ipdl
@@ -1,9 +1,9 @@
-include protocol "PObjectWrapperLiaison.ipdl";
+include protocol "PContextWrapper.ipdl";
 
 include "mozilla/jsipc/CPOWTypes.h";
 
 using mozilla::jsipc::void_t;
 using mozilla::jsipc::null_t;
 using JSType;
 using JSBool;
 
@@ -18,17 +18,17 @@ union JSVariant {
     double;
     bool; // We'd like to use JSBool here, but JSBool is really JSIntn,
           // and IPC::ParamTraits mistakes JSIntn for int.
     null_t;
 };
 
 rpc protocol PObjectWrapper
 {
-    manager PObjectWrapperLiaison;
+    manager PContextWrapper;
 
 child:
     __delete__(); // unroot
 
     rpc AddProperty(nsString id);
 
     rpc GetProperty(nsString id)
         returns (JSBool ok,
diff --git a/js/src/ipc/PObjectWrapperLiaison.ipdl b/js/src/ipc/PObjectWrapperLiaison.ipdl
deleted file mode 100644
--- a/js/src/ipc/PObjectWrapperLiaison.ipdl
+++ /dev/null
@@ -1,16 +0,0 @@
-include protocol "PContentProcess.ipdl";
-include protocol "PObjectWrapper.ipdl";
-
-namespace mozilla {
-namespace jsipc {
-
-rpc protocol PObjectWrapperLiaison
-{
-    manager PContentProcess;
-    manages PObjectWrapper;
-parent:
-    __delete__();
-    sync PObjectWrapper(bool makeGlobal);
-};
-
-}}
diff --git a/js/src/ipc/ipdl.mk b/js/src/ipc/ipdl.mk
--- a/js/src/ipc/ipdl.mk
+++ b/js/src/ipc/ipdl.mk
@@ -1,4 +1,4 @@
 IPDLSRCS = \
-  PObjectWrapperLiaison.ipdl \
+  PContextWrapper.ipdl \
   PObjectWrapper.ipdl \
   $(NULL)
diff --git a/toolkit/xre/nsEmbedFunctions.cpp b/toolkit/xre/nsEmbedFunctions.cpp
--- a/toolkit/xre/nsEmbedFunctions.cpp
+++ b/toolkit/xre/nsEmbedFunctions.cpp
@@ -82,17 +82,17 @@
 #include "mozilla/ipc/GeckoThread.h"
 #include "ScopedXREEmbed.h"
 
 #include "mozilla/plugins/PluginThreadChild.h"
 #include "mozilla/dom/ContentProcessThread.h"
 #include "mozilla/dom/ContentProcessParent.h"
 #include "mozilla/dom/ContentProcessChild.h"
 
-#include "mozilla/jsipc/ObjectWrapperLiaisonParent.h"
+#include "mozilla/jsipc/ContextWrapperParent.h"
 
 #include "mozilla/ipc/TestShellParent.h"
 #include "mozilla/ipc/XPCShellEnvironment.h"
 #include "mozilla/Monitor.h"
 
 #ifdef MOZ_IPDL_TESTS
 #include "mozilla/_ipdltest/IPDLUnitTests.h"
 #include "mozilla/_ipdltest/IPDLUnitTestThreadChild.h"
@@ -105,18 +105,18 @@ using mozilla::ipc::GeckoThread;
 using mozilla::ipc::BrowserProcessSubThread;
 using mozilla::ipc::ScopedXREEmbed;
 
 using mozilla::plugins::PluginThreadChild;
 using mozilla::dom::ContentProcessThread;
 using mozilla::dom::ContentProcessParent;
 using mozilla::dom::ContentProcessChild;
 
-using mozilla::jsipc::PObjectWrapperLiaisonParent;
-using mozilla::jsipc::ObjectWrapperLiaisonParent;
+using mozilla::jsipc::PContextWrapperParent;
+using mozilla::jsipc::ContextWrapperParent;
 
 using mozilla::ipc::TestShellParent;
 using mozilla::ipc::TestShellCommandParent;
 using mozilla::ipc::XPCShellEnvironment;
 
 using mozilla::Monitor;
 using mozilla::MonitorAutoEnter;
 
@@ -541,21 +541,21 @@ XRE_SendTestShellCommand(JSContext* aCx,
 }
 
 bool
 XRE_GetChildGlobalObject(JSContext* aCx, JSObject** aGlobalP)
 {
     TestShellParent* tsp = GetOrCreateTestShellParent();
     NS_ENSURE_TRUE(tsp, false);
 
-    PObjectWrapperLiaisonParent* powlp = tsp->GetObjectWrapperLiaison();
-    ObjectWrapperLiaisonParent* owlp =
-        static_cast<ObjectWrapperLiaisonParent*>(powlp);
+    PContextWrapperParent* pcwp = tsp->GetContextWrapper();
+    ContextWrapperParent* cwp =
+        static_cast<ContextWrapperParent*>(pcwp);
     
-    return owlp->GetGlobalJSObject(aCx, aGlobalP);
+    return cwp->GetGlobalJSObject(aCx, aGlobalP);
 }
 
 bool
 XRE_ShutdownTestShell()
 {
   if (!gTestShellParent)
     return true;
   return ContentProcessParent::GetSingleton()->DestroyTestShell(gTestShellParent);
