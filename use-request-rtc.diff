diff --git a/dom/ipc/TabParent.cpp b/dom/ipc/TabParent.cpp
--- a/dom/ipc/TabParent.cpp
+++ b/dom/ipc/TabParent.cpp
@@ -35,31 +35,33 @@
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 #include "TabParent.h"
 
 #include "mozilla/ipc/GeckoThread.h"
 #include "mozilla/ipc/DocumentRendererParent.h"
+#include "mozilla/dom/ContentProcessParent.h"
 #include "mozilla/jsipc/ContextWrapperParent.h"
 
 #include "nsIURI.h"
 #include "nsFocusManager.h"
 #include "nsCOMPtr.h"
 #include "nsServiceManagerUtils.h"
 #include "nsIDOMElement.h"
 #include "nsEventDispatcher.h"
 #include "nsIDOMEventTarget.h"
 #include "nsIDOMEvent.h"
 #include "nsIPrivateDOMEvent.h"
 #include "nsFrameLoader.h"
 
 using mozilla::ipc::BrowserProcessSubThread;
 using mozilla::ipc::DocumentRendererParent;
+using mozilla::dom::ContentProcessParent;
 using mozilla::jsipc::PContextWrapperParent;
 using mozilla::jsipc::ContextWrapperParent;
 
 namespace mozilla {
 namespace dom {
 
 TabParent::TabParent()
 {
@@ -158,17 +160,19 @@ TabParent::DeallocPDocumentRenderer(PDoc
 {
     delete actor;
     return true;
 }
 
 PContextWrapperParent*
 TabParent::AllocPContextWrapper()
 {
-    return new ContextWrapperParent();
+    ContentProcessParent* cpp =
+        static_cast<ContentProcessParent*>(Manager());
+    return new ContextWrapperParent(cpp);
 }
 
 bool
 TabParent::DeallocPContextWrapper(PContextWrapperParent* actor)
 {
     delete actor;
     return true;
 }
diff --git a/ipc/testshell/TestShellParent.cpp b/ipc/testshell/TestShellParent.cpp
--- a/ipc/testshell/TestShellParent.cpp
+++ b/ipc/testshell/TestShellParent.cpp
@@ -30,23 +30,25 @@
  * decision by deleting the provisions above and replace them with the notice
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 #include "TestShellParent.h"
+#include "mozilla/dom/ContentProcessParent.h"
 #include "mozilla/jsipc/ContextWrapperParent.h"
 
 #include "nsAutoPtr.h"
 
 using mozilla::ipc::TestShellParent;
 using mozilla::ipc::TestShellCommandParent;
 using mozilla::ipc::PTestShellCommandParent;
+using mozilla::dom::ContentProcessParent;
 using mozilla::jsipc::PContextWrapperParent;
 using mozilla::jsipc::ContextWrapperParent;
 
 PTestShellCommandParent*
 TestShellParent::AllocPTestShellCommand(const nsString& aCommand)
 {
   return new TestShellCommandParent();
 }
@@ -67,17 +69,19 @@ TestShellParent::CommandDone(TestShellCo
   command->ReleaseCallback();
 
   return true;
 }
 
 PContextWrapperParent*
 TestShellParent::AllocPContextWrapper()
 {
-    return new ContextWrapperParent();
+    ContentProcessParent* cpp =
+        static_cast<ContentProcessParent*>(Manager());
+    return new ContextWrapperParent(cpp);
 }
 
 bool
 TestShellParent::DeallocPContextWrapper(PContextWrapperParent* actor)
 {
     delete actor;
     return true;
 }
diff --git a/js/src/ipc/ContextWrapperParent.h b/js/src/ipc/ContextWrapperParent.h
--- a/js/src/ipc/ContextWrapperParent.h
+++ b/js/src/ipc/ContextWrapperParent.h
@@ -1,28 +1,33 @@
 #ifndef mozilla_jsipc_ContextWrapperParent_h__
 #define mozilla_jsipc_ContextWrapperParent_h__
 
 #include "mozilla/jsipc/PContextWrapperParent.h"
 #include "mozilla/jsipc/ObjectWrapperParent.h"
 #include "mozilla/jsipc/CPOWTypes.h"
 
+#include "mozilla/dom/ContentProcessParent.h"
+
 #include "jsapi.h"
 #include "nsAutoJSValHolder.h"
 
 namespace mozilla {
 namespace jsipc {
+
+using mozilla::dom::ContentProcessParent;
     
 class ContextWrapperParent
     : public PContextWrapperParent
 {
 public:
 
-    ContextWrapperParent()
-        : mGlobal(NULL)
+    ContextWrapperParent(ContentProcessParent* cpp)
+        : mContentProcess(cpp)
+        , mGlobal(NULL)
         , mRequestDepth(0)
     {}
 
     bool GetGlobalJSObject(JSContext* cx, JSObject** globalp) {
         if (!mGlobal)
             return false;
         mGlobalHolder.Hold(cx);
         mGlobalHolder = *globalp = mGlobal->GetJSObject(cx);
@@ -31,31 +36,36 @@ public:
 
     ObjectWrapperParent* GetGlobalObjectWrapper() const {
         return mGlobal;
     }
 
     bool CallBeginRequest() {
         CPOW_LOG(("Calling BeginRequest (depth: %d -> %d)...",
                   mRequestDepth, mRequestDepth + 1));
-        return (mRequestDepth++ > 0 ||
-                PContextWrapperParent::CallBeginRequest());
+        if (mRequestDepth++ == 0) {
+            mContentProcess->RequestRunToCompletion();
+            PContextWrapperParent::CallBeginRequest();
+        }
+        return true;
     }
 
     bool CallEndRequest() {
         CPOW_LOG(("Calling EndRequest (depth: %d -> %d)...",
                   mRequestDepth, mRequestDepth - 1));
         NS_ASSERTION(mRequestDepth > 0,
                      "Unbalanced ObjectWrapperParent::CallEndRequest");
-        return (--mRequestDepth > 0 ||
-                PContextWrapperParent::CallEndRequest());
+        if (--mRequestDepth == 0)
+            PContextWrapperParent::CallEndRequest();
+        return true;
     }
 
 private:
 
+    ContentProcessParent* mContentProcess;
     ObjectWrapperParent* mGlobal;
     nsAutoJSValHolder mGlobalHolder;
     int mRequestDepth;
 
     PObjectWrapperParent* AllocPObjectWrapper(const bool&) {
         return new ObjectWrapperParent();
     }
 
