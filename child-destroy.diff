diff --git a/content/base/src/nsFrameLoader.cpp b/content/base/src/nsFrameLoader.cpp
--- a/content/base/src/nsFrameLoader.cpp
+++ b/content/base/src/nsFrameLoader.cpp
@@ -64,16 +64,18 @@
 #include "nsIWebNavigation.h"
 #include "nsIDocShell.h"
 #include "nsIDocShellTreeItem.h"
 #include "nsIDocShellTreeNode.h"
 #include "nsIDocShellTreeOwner.h"
 #include "nsIDocShellLoadInfo.h"
 #include "nsIBaseWindow.h"
 #include "nsContentUtils.h"
+#include "nsIXPConnect.h"
+#include "nsIJSContextStack.h"
 #include "nsUnicharUtils.h"
 #include "nsIScriptGlobalObject.h"
 #include "nsIScriptSecurityManager.h"
 #include "nsIScrollable.h"
 #include "nsFrameLoader.h"
 #include "nsIDOMEventTarget.h"
 #include "nsIFrame.h"
 #include "nsIFrameFrame.h"
@@ -110,19 +112,16 @@
 #ifdef MOZ_IPC
 #include "ContentProcessParent.h"
 #include "TabParent.h"
 
 using namespace mozilla;
 using namespace mozilla::dom;
 #endif
 
-#include "nsIXPConnect.h"
-#include "nsIJSContextStack.h"
-
 class nsAsyncDocShellDestroyer : public nsRunnable
 {
 public:
   nsAsyncDocShellDestroyer(nsIDocShell* aDocShell)
     : mDocShell(aDocShell)
   {
   }
 
@@ -1526,25 +1525,26 @@ nsFrameLoader::ActivateFrameEvent(const 
   }
 #endif
   return NS_ERROR_FAILURE;
 }
 
 NS_IMETHODIMP
 nsFrameLoader::GetCrossProcessObjectWrapper(nsIVariant** cpow)
 {
-  nsIXPConnect* xpc;
-  nsIThreadJSContextStack* stack;
-  JSContext* cx;
-  JSObject* global;
-
-  if ((xpc = nsContentUtils::XPConnect()) &&
-      (stack = nsContentUtils::ThreadJSContextStack()) &&
-      NS_SUCCEEDED(stack->Peek(&cx)) && cx &&
-      mChildProcess->GetGlobalJSObject(cx, &global))
+  
+   nsIXPConnect* xpc;
+   nsIThreadJSContextStack* stack;
+   JSContext* cx;
+   JSObject* global;
+ 
+   if ((xpc = nsContentUtils::XPConnect()) &&
+       (stack = nsContentUtils::ThreadJSContextStack()) &&
+       NS_SUCCEEDED(stack->Peek(&cx)) && cx &&
+       mChildProcess->GetGlobalJSObject(cx, &global))
     return xpc->JSToVariant(cx, OBJECT_TO_JSVAL(global), cpow);
   
   return NS_ERROR_NOT_AVAILABLE;
 }
 
 nsresult
 nsFrameLoader::CreateStaticClone(nsIFrameLoader* aDest)
 {
diff --git a/dom/ipc/ContentProcessParent.h b/dom/ipc/ContentProcessParent.h
--- a/dom/ipc/ContentProcessParent.h
+++ b/dom/ipc/ContentProcessParent.h
@@ -97,17 +97,17 @@ private:
     virtual bool DeallocPIFrameEmbedding(PIFrameEmbeddingParent* frame);
 
     virtual PTestShellParent* AllocPTestShell();
     virtual bool DeallocPTestShell(PTestShellParent* shell);
 
     virtual PNeckoParent* AllocPNecko();
     virtual bool DeallocPNecko(PNeckoParent* necko);
 
-    virtual PObjectWrapperLiaisonParent* AllocPObjectWrapperLiaison(const JSRuntimeOwner& jsro);
+    virtual PObjectWrapperLiaisonParent* AllocPObjectWrapperLiaison(const JSRuntimeOwner&);
     virtual bool DeallocPObjectWrapperLiaison(PObjectWrapperLiaisonParent* actor);
     virtual bool RecvPObjectWrapperLiaisonConstructor(PObjectWrapperLiaisonParent* actor,
                                                       const JSRuntimeOwner& jsro);
     mozilla::Monitor mMonitor;
 
     GeckoChildProcessHost* mSubprocess;
 };
 
diff --git a/dom/ipc/TabParent.cpp b/dom/ipc/TabParent.cpp
--- a/dom/ipc/TabParent.cpp
+++ b/dom/ipc/TabParent.cpp
@@ -54,16 +54,17 @@
 
 using mozilla::ipc::BrowserProcessSubThread;
 using mozilla::ipc::DocumentRendererParent;
 
 namespace mozilla {
 namespace dom {
 
 TabParent::TabParent()
+  : mObjectWrapperLiaison(nsnull)
 {
 }
 
 TabParent::~TabParent()
 {
 }
 
 bool
diff --git a/js/src/ipc/ObjectWrapperLiaisonParent.h b/js/src/ipc/ObjectWrapperLiaisonParent.h
--- a/js/src/ipc/ObjectWrapperLiaisonParent.h
+++ b/js/src/ipc/ObjectWrapperLiaisonParent.h
@@ -1,57 +1,65 @@
 #ifndef mozilla_jsipc_ObjectWrapperLiaisonParent_h__
 #define mozilla_jsipc_ObjectWrapperLiaisonParent_h__
 
 #include "mozilla/jsipc/PObjectWrapperLiaisonParent.h"
 #include "mozilla/jsipc/ObjectWrapperParent.h"
 
 #include "jsapi.h"
+#include "nsAutoJSValHolder.h"
 
 namespace mozilla {
 namespace jsipc {
     
 class ObjectWrapperLiaisonParent
     : public PObjectWrapperLiaisonParent
 {
 public:
 
     ObjectWrapperLiaisonParent() : mGlobal(NULL) {}
 
-    bool GetGlobalJSObject(JSContext* cx, JSObject** globalp) const {
+    bool GetGlobalJSObject(JSContext* cx, JSObject** globalp) {
         if (!mGlobal)
             return false;
-        *globalp = mGlobal->GetJSObject(cx);
+        mGlobalHolder.Hold(cx);
+        mGlobalHolder = *globalp = mGlobal->GetJSObject(cx);
         return true;
     }
 
     ObjectWrapperParent* GetGlobalObjectWrapper() const {
         return mGlobal;
     }
 
 private:
 
     ObjectWrapperParent* mGlobal;
+    nsAutoJSValHolder mGlobalHolder;
 
     PObjectWrapperParent* AllocPObjectWrapper(const bool&) {
         return new ObjectWrapperParent();
     }
 
     bool RecvPObjectWrapperConstructor(PObjectWrapperParent* actor,
                                        const bool& makeGlobal)
     {
-        if (makeGlobal)
+        if (makeGlobal) {
+            mGlobalHolder.Release();
             mGlobal = static_cast<ObjectWrapperParent*>(actor);
+        }
         return true;
     }
 
     bool DeallocPObjectWrapper(PObjectWrapperParent* actor)
     {
-        if (static_cast<ObjectWrapperParent*>(actor) == mGlobal)
+        if (mGlobal &&
+            mGlobal == static_cast<ObjectWrapperParent*>(actor)) {
+            mGlobalHolder.Release();
             mGlobal = NULL;
+        }
         delete actor;
         return true;
     }
 
 };
 
 }}
 
