* * *
Bug 562414 - Implement an opaque Handle primitive for providing context to (a)synchronous IPC calls.

diff --git a/content/base/src/nsFrameLoader.cpp b/content/base/src/nsFrameLoader.cpp
--- a/content/base/src/nsFrameLoader.cpp
+++ b/content/base/src/nsFrameLoader.cpp
@@ -1646,17 +1646,17 @@ nsFrameLoader::GetCrossProcessObjectWrap
    nsIXPConnect* xpc;
    nsIThreadJSContextStack* stack;
    JSContext* cx;
    JSObject* global;
  
    if ((xpc = nsContentUtils::XPConnect()) &&
        (stack = nsContentUtils::ThreadJSContextStack()) &&
        NS_SUCCEEDED(stack->Peek(&cx)) && cx &&
-       mChildProcess->GetGlobalJSObject(cx, &global)) {
+       mChildProcess->GetChildGlobalObject(cx, &global)) {
      return xpc->JSToVariant(cx, OBJECT_TO_JSVAL(global), cpow);
    }
 #endif
    return NS_ERROR_NOT_AVAILABLE;
 }
 
 nsresult
 nsFrameLoader::CreateStaticClone(nsIFrameLoader* aDest)
diff --git a/dom/ipc/ContentProcessChild.cpp b/dom/ipc/ContentProcessChild.cpp
--- a/dom/ipc/ContentProcessChild.cpp
+++ b/dom/ipc/ContentProcessChild.cpp
@@ -49,16 +49,17 @@
 #include "base/message_loop.h"
 #include "base/task.h"
 
 #include "nsChromeRegistryContent.h"
 #include "mozilla/chrome/RegistryMessageUtils.h"
 
 using namespace mozilla::ipc;
 using namespace mozilla::net;
+using mozilla::jsipc::PContextWrapperChild;
 
 namespace mozilla {
 namespace dom {
 
 ContentProcessChild* ContentProcessChild::sSingleton;
 
 ContentProcessChild::ContentProcessChild()
     : mQuit(PR_FALSE)
@@ -118,17 +119,19 @@ ContentProcessChild::DeallocPTestShell(P
 {
     mTestShells.RemoveElement(shell);
     return true;
 }
 
 bool
 ContentProcessChild::RecvPTestShellConstructor(PTestShellChild* actor)
 {
-    actor->SendPContextWrapperConstructor()->SendPObjectWrapperConstructor(true);
+    PContextWrapperChild* cwc = actor->SendPContextWrapperConstructor();
+    cwc->SendPObjectWrapperConstructor(true);
+    cwc->SendPHandleConstructor(true);
     return true;
 }
 
 PNeckoChild* 
 ContentProcessChild::AllocPNecko()
 {
     return new NeckoChild();
 }
diff --git a/dom/ipc/TabParent.cpp b/dom/ipc/TabParent.cpp
--- a/dom/ipc/TabParent.cpp
+++ b/dom/ipc/TabParent.cpp
@@ -445,26 +445,26 @@ TabParent::AllocPContextWrapper()
 bool
 TabParent::DeallocPContextWrapper(PContextWrapperParent* actor)
 {
     delete actor;
     return true;
 }
 
 JSBool
-TabParent::GetGlobalJSObject(JSContext* cx, JSObject** globalp)
+TabParent::GetChildGlobalObject(JSContext* cx, JSObject** globalp)
 {
-    // TODO Unify this code with TestShellParent::GetGlobalJSObject.
+    // TODO Unify this code with TestShellParent::GetChildGlobalObject.
     nsTArray<PContextWrapperParent*> cwps(1);
     ManagedPContextWrapperParent(cwps);
     if (cwps.Length() < 1)
         return JS_FALSE;
     NS_ASSERTION(cwps.Length() == 1, "More than one PContextWrapper?");
     ContextWrapperParent* cwp = static_cast<ContextWrapperParent*>(cwps[0]);
-    return cwp->GetGlobalJSObject(cx, globalp);
+    return cwp->GetChildGlobalObject(cx, globalp);
 }
 
 void
 TabParent::SendMouseEvent(const nsAString& aType, float aX, float aY,
                           PRInt32 aButton, PRInt32 aClickCount,
                           PRInt32 aModifiers, PRBool aIgnoreRootScrollFrame)
 {
   SendsendMouseEvent(nsString(aType), aX, aY, aButton, aClickCount,
diff --git a/dom/ipc/TabParent.h b/dom/ipc/TabParent.h
--- a/dom/ipc/TabParent.h
+++ b/dom/ipc/TabParent.h
@@ -155,17 +155,17 @@ public:
             const PRInt32& bufw,
             const PRInt32& bufh,
             Shmem& buf);
     virtual bool DeallocPDocumentRendererShmem(PDocumentRendererShmemParent* actor);
 
     virtual PContextWrapperParent* AllocPContextWrapper();
     virtual bool DeallocPContextWrapper(PContextWrapperParent* actor);
 
-    JSBool GetGlobalJSObject(JSContext* cx, JSObject** globalp);
+    JSBool GetChildGlobalObject(JSContext* cx, JSObject** globalp);
 
     NS_DECL_ISUPPORTS
     NS_DECL_NSIWEBPROGRESS
 
 protected:
     bool ReceiveMessage(const nsString& aMessage,
                         PRBool aSync,
                         const nsString& aJSON,
diff --git a/ipc/testshell/TestShellChild.cpp b/ipc/testshell/TestShellChild.cpp
--- a/ipc/testshell/TestShellChild.cpp
+++ b/ipc/testshell/TestShellChild.cpp
@@ -89,17 +89,19 @@ TestShellChild::RecvPTestShellCommandCon
   return PTestShellCommandChild::Send__delete__(aActor, response);
 }
 
 PContextWrapperChild*
 TestShellChild::AllocPContextWrapper()
 {
   JSContext* cx;
   if (mXPCShell && (cx = mXPCShell->GetContext())) {
-    return new ContextWrapperChild(cx);
+      ContextWrapperChild* cwc = new ContextWrapperChild(cx);
+      mXPCShell->SetContextWrapper(cwc);
+      return cwc;
   }
   return NULL;
 }
 
 bool
 TestShellChild::DeallocPContextWrapper(PContextWrapperChild* actor)
 {
   delete actor;
diff --git a/ipc/testshell/TestShellParent.cpp b/ipc/testshell/TestShellParent.cpp
--- a/ipc/testshell/TestShellParent.cpp
+++ b/ipc/testshell/TestShellParent.cpp
@@ -81,27 +81,39 @@ TestShellParent::AllocPContextWrapper()
 
 bool
 TestShellParent::DeallocPContextWrapper(PContextWrapperParent* actor)
 {
     delete actor;
     return true;
 }
 
-JSBool
-TestShellParent::GetGlobalJSObject(JSContext* cx, JSObject** globalp)
+ContextWrapperParent*
+TestShellParent::GetContextWrapper()
 {
-    // TODO Unify this code with TabParent::GetGlobalJSObject.
     nsTArray<PContextWrapperParent*> cwps(1);
     ManagedPContextWrapperParent(cwps);
     if (cwps.Length() < 1)
-        return JS_FALSE;
+        return nsnull;
     NS_ASSERTION(cwps.Length() == 1, "More than one PContextWrapper?");
-    ContextWrapperParent* cwp = static_cast<ContextWrapperParent*>(cwps[0]);
-    return cwp->GetGlobalJSObject(cx, globalp);
+    return static_cast<ContextWrapperParent*>(cwps[0]);
+}
+
+JSBool
+TestShellParent::GetChildGlobalObject(JSContext* cx, JSObject** globalp)
+{
+    ContextWrapperParent* cwp = GetContextWrapper();
+    return cwp && cwp->GetChildGlobalObject(cx, globalp);
+}
+
+JSBool
+TestShellParent::GetRootHandle(JSContext* cx, JSObject** handlep)
+{
+    ContextWrapperParent* cwp = GetContextWrapper();
+    return cwp && cwp->GetRootHandle(cx, handlep);
 }
 
 JSBool
 TestShellCommandParent::SetCallback(JSContext* aCx,
                                     jsval aCallback)
 {
   if (!mCallback.Hold(aCx)) {
     return JS_FALSE;
diff --git a/ipc/testshell/TestShellParent.h b/ipc/testshell/TestShellParent.h
--- a/ipc/testshell/TestShellParent.h
+++ b/ipc/testshell/TestShellParent.h
@@ -49,16 +49,17 @@
 
 struct JSContext;
 struct JSObject;
 
 namespace mozilla {
 
 namespace jsipc {
 class PContextWrapperParent;
+class ContextWrapperParent;
 }
 
 namespace ipc {
 
 class TestShellCommandParent;
 
 class TestShellParent : public PTestShellParent
 {
@@ -70,17 +71,22 @@ public:
   DeallocPTestShellCommand(PTestShellCommandParent* aActor);
 
   bool
   CommandDone(TestShellCommandParent* aActor, const nsString& aResponse);
 
   PContextWrapperParent* AllocPContextWrapper();
   bool DeallocPContextWrapper(PContextWrapperParent* actor);
 
-  JSBool GetGlobalJSObject(JSContext* cx, JSObject** globalp);
+  JSBool GetChildGlobalObject(JSContext* cx, JSObject** globalp);
+
+  JSBool GetRootHandle(JSContext* cx, JSObject** handlep);
+
+private:
+  mozilla::jsipc::ContextWrapperParent* GetContextWrapper();
 };
 
 
 class TestShellCommandParent : public PTestShellCommandParent
 {
 public:
   TestShellCommandParent() : mCx(NULL) { }
 
diff --git a/ipc/testshell/XPCShellEnvironment.cpp b/ipc/testshell/XPCShellEnvironment.cpp
--- a/ipc/testshell/XPCShellEnvironment.cpp
+++ b/ipc/testshell/XPCShellEnvironment.cpp
@@ -47,16 +47,19 @@
 
 #include "jsapi.h"
 #include "jscntxt.h"
 #include "jsdbgapi.h"
 #include "jsprf.h"
 
 #include "XPCShellEnvironment.h"
 
+#include "mozilla/jsipc/ContextWrapperChild.h"
+#include "mozilla/jsipc/Handle.h"
+
 #include "mozilla/XPCOM.h"
 
 #include "nsIChannel.h"
 #include "nsIClassInfo.h"
 #include "nsIDirectoryService.h"
 #include "nsIJSContextStack.h"
 #include "nsIJSRuntimeService.h"
 #include "nsIPrincipal.h"
@@ -73,16 +76,17 @@
 #include "TestShellParent.h"
 
 #define EXITCODE_RUNTIME_ERROR 3
 #define EXITCODE_FILE_NOT_FOUND 4
 
 using mozilla::ipc::XPCShellEnvironment;
 using mozilla::ipc::TestShellChild;
 using mozilla::ipc::TestShellParent;
+using mozilla::jsipc::ContextWrapperChild;
 
 namespace {
 
 static const char kDefaultRuntimeScriptFilename[] = "xpcshell.js";
 
 class FullTrustSecMan : public nsIScriptSecurityManager
 {
 public:
@@ -523,17 +527,20 @@ Clear(JSContext *cx,
         JS_ClearScope(cx, JSVAL_TO_OBJECT(argv[0]));
     } else {
         JS_ReportError(cx, "'clear' requires an object");
         return JS_FALSE;
     }
     return JS_TRUE;
 }
 
-JSFunctionSpec gGlobalFunctions[] =
+} // namespace {
+
+const JSFunctionSpec
+mozilla::ipc::XPCShellEnvironment::sGlobalFunctions[] =
 {
     {"print",           Print,          0,0,0},
     {"load",            Load,           1,0,0},
     {"quit",            Quit,           0,0,0},
     {"version",         Version,        1,0,0},
     {"build",           BuildDate,      0,0,0},
     {"dumpXPC",         DumpXPC,        1,0,0},
     {"dump",            Dump,           1,0,0},
@@ -548,19 +555,25 @@ JSFunctionSpec gGlobalFunctions[] =
     {"connectShark",    js_ConnectShark,    0,0,0},
     {"disconnectShark", js_DisconnectShark, 0,0,0},
 #endif
 #ifdef MOZ_CALLGRIND
     {"startCallgrind",  js_StartCallgrind,  0,0,0},
     {"stopCallgrind",   js_StopCallgrind,   0,0,0},
     {"dumpCallgrind",   js_DumpCallgrind,   1,0,0},
 #endif
+#ifdef MOZ_IPC
+    JS_FN("getRootHandle", GetRootHandle, 0,
+          (JSPROP_READONLY | JSPROP_PERMANENT)),
+#endif
     {nsnull,nsnull,0,0,0}
 };
 
+namespace {
+
 typedef enum JSShellErrNum
 {
 #define MSG_DEF(name, number, count, exception, format) \
     name = number,
 #include "jsshell.msg"
 #undef MSG_DEF
     JSShellErr_Limit
 #undef MSGDEF
@@ -1034,16 +1047,17 @@ XPCShellEnvironment::CreateEnvironment()
         env = nsnull;
     }
     return env;
 }
 
 XPCShellEnvironment::XPCShellEnvironment()
 :   mCx(NULL),
     mJSPrincipals(NULL),
+    mContextWrapper(NULL),
     mExitCode(0),
     mQuitting(JS_FALSE),
     mReportWarnings(JS_TRUE),
     mCompileOnly(JS_FALSE)
 {
 }
 
 XPCShellEnvironment::~XPCShellEnvironment()
@@ -1184,18 +1198,18 @@ XPCShellEnvironment::Init()
     if (NS_FAILED(rv)) {
         NS_ERROR("Failed to get global JSObject!");
         return false;
     }
 
 
     {
         JSAutoRequest ar(cx);
-
-        if (!JS_DefineFunctions(cx, globalObj, gGlobalFunctions)) {
+        JSFunctionSpec* fs = const_cast<JSFunctionSpec*>(sGlobalFunctions);
+        if (!JS_DefineFunctions(cx, globalObj, fs)) {
             NS_ERROR("JS_DefineFunctions failed!");
             return false;
         }
     }
 
     mGlobalHolder = globalObj;
 
     FILE* runtimeScriptFile = fopen(kDefaultRuntimeScriptFilename, "r");
@@ -1244,8 +1258,29 @@ XPCShellEnvironment::EvaluateString(cons
           }
       }
   }
 
   JS_DestroyScript(mCx, script);
 
   return true;
 }
+
+JSBool
+XPCShellEnvironment::GetRootHandle(JSContext* cx,
+                                   uintN argc,
+                                   jsval* vp)
+{
+    if (argc > 0) {
+        JS_ReportError(cx, "createHandle takes zero arguments");
+        return JS_FALSE;
+    }
+    ContextWrapperChild* cwc = Environment(cx)->mContextWrapper;
+    if (!cwc) {
+        JS_ReportError(cx, "Could not create handle from context");
+        return JS_FALSE;
+    }
+    JSObject* hobj;
+    if (!cwc->GetRootHandle(cx, &hobj))
+        return JS_FALSE;
+    JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(hobj));
+    return JS_TRUE;
+}
diff --git a/ipc/testshell/XPCShellEnvironment.h b/ipc/testshell/XPCShellEnvironment.h
--- a/ipc/testshell/XPCShellEnvironment.h
+++ b/ipc/testshell/XPCShellEnvironment.h
@@ -49,16 +49,21 @@
 
 struct JSContext;
 struct JSObject;
 struct JSPrincipals;
 
 class nsIJSContextStack;
 
 namespace mozilla {
+
+namespace jsipc {
+class ContextWrapperChild;
+}
+
 namespace ipc {
 
 class XPCShellEnvironment
 {
 public:
     static XPCShellEnvironment* CreateEnvironment();
     ~XPCShellEnvironment();
 
@@ -100,34 +105,46 @@ public:
 
     void SetShouldCompoleOnly(JSBool aCompileOnly) {
         mCompileOnly = aCompileOnly;
     }
     JSBool ShouldCompileOnly() {
         return mCompileOnly;
     }
 
+    void SetContextWrapper(mozilla::jsipc::ContextWrapperChild* actor) {
+        mContextWrapper = actor;
+    }
+
     class AutoContextPusher
     {
     public:
         AutoContextPusher(XPCShellEnvironment* aEnv);
         ~AutoContextPusher();
     private:
         XPCShellEnvironment* mEnv;
     };
 
 protected:
     XPCShellEnvironment();
     bool Init();
 
 private:
+    static const JSFunctionSpec sGlobalFunctions[];
+
+    static JSBool
+    GetRootHandle(JSContext* cx,
+                  uintN argc,
+                  jsval* vp);
+
     JSContext* mCx;
     nsAutoJSValHolder mGlobalHolder;
     nsCOMPtr<nsIJSContextStack> mCxStack;
     JSPrincipals* mJSPrincipals;
+    mozilla::jsipc::ContextWrapperChild* mContextWrapper;
 
     int mExitCode;
     JSBool mQuitting;
     JSBool mReportWarnings;
     JSBool mCompileOnly;
 };
 
 } /* namespace ipc */
diff --git a/js/src/ipc/ContextWrapperChild.h b/js/src/ipc/ContextWrapperChild.h
--- a/js/src/ipc/ContextWrapperChild.h
+++ b/js/src/ipc/ContextWrapperChild.h
@@ -38,31 +38,33 @@
  *
  * ***** END LICENSE BLOCK ***** */
 
 #ifndef mozilla_jsipc_ContextWrapperChild_h__
 #define mozilla_jsipc_ContextWrapperChild_h__
 
 #include "mozilla/jsipc/PContextWrapperChild.h"
 #include "mozilla/jsipc/ObjectWrapperChild.h"
+#include "mozilla/jsipc/Handle.h"
 
 #include "jsapi.h"
 #include "nsClassHashtable.h"
 #include "nsHashKeys.h"
 
 namespace mozilla {
 namespace jsipc {
 
 class ContextWrapperChild
     : public PContextWrapperChild
 {
 public:
 
     ContextWrapperChild(JSContext* cx)
         : mContext(cx)
+        , mRootHandle(NULL)
     {
         mResidentObjectTable.Init();
     }
 
     JSContext* GetContext() { return mContext; }
 
     PObjectWrapperChild* GetOrCreateWrapper(JSObject* obj,
                                             bool makeGlobal = false)
@@ -76,36 +78,59 @@ public:
             if (wrapper)
                 mResidentObjectTable.Put(obj, wrapper);
             else
                 return NULL;
         }
         return wrapper;
     }
 
-protected:
+    JSBool GetRootHandle(JSContext* cx, JSObject** handlep) {
+        if (!mRootHandle) {
+            JS_ReportError(cx, "No root handle defined yet");
+            return JS_FALSE;
+        }
+        *handlep = mRootHandle->GetJSObject(cx);
+        return JS_TRUE;
+    }
+
+private:
+
+    JSContext* const mContext;
+    HandleChild*     mRootHandle;
+
+    nsClassHashtable<nsPtrHashKey<JSObject>,
+                     PObjectWrapperChild> mResidentObjectTable;
 
     PObjectWrapperChild* AllocPObjectWrapper(JSObject* obj) {
         return new ObjectWrapperChild(mContext, obj);
     }
     
     PObjectWrapperChild* AllocPObjectWrapper(const bool&) {
         return AllocPObjectWrapper(JS_GetGlobalObject(mContext));
     }
 
     bool DeallocPObjectWrapper(PObjectWrapperChild* actor) {
         ObjectWrapperChild* owc = static_cast<ObjectWrapperChild*>(actor);
         mResidentObjectTable.Remove(owc->GetJSObject());
         return true;
     }
 
-private:
+    PHandleChild* AllocPHandle(const bool& makeRoot) {
+        HandleChild* handle = new HandleChild();
+        if (makeRoot)
+            mRootHandle = handle;
+        return handle;
+    }
 
-    JSContext* const mContext;
-
-    nsClassHashtable<nsPtrHashKey<JSObject>,
-                     PObjectWrapperChild> mResidentObjectTable;
+    bool DeallocPHandle(PHandleChild* actor) {
+        if (mRootHandle &&
+            mRootHandle == static_cast<HandleChild*>(actor))
+            mRootHandle = NULL;
+        delete actor;
+        return true;
+    }
 
 };
 
 }}
 
 #endif
diff --git a/js/src/ipc/ContextWrapperParent.h b/js/src/ipc/ContextWrapperParent.h
--- a/js/src/ipc/ContextWrapperParent.h
+++ b/js/src/ipc/ContextWrapperParent.h
@@ -38,16 +38,17 @@
  *
  * ***** END LICENSE BLOCK ***** */
 
 #ifndef mozilla_jsipc_ContextWrapperParent_h__
 #define mozilla_jsipc_ContextWrapperParent_h__
 
 #include "mozilla/jsipc/PContextWrapperParent.h"
 #include "mozilla/jsipc/ObjectWrapperParent.h"
+#include "mozilla/jsipc/Handle.h"
 #include "mozilla/jsipc/CPOWTypes.h"
 
 #include "mozilla/dom/ContentProcessParent.h"
 
 #include "jsapi.h"
 #include "nsAutoJSValHolder.h"
 
 namespace mozilla {
@@ -57,62 +58,84 @@ using mozilla::dom::ContentProcessParent
     
 class ContextWrapperParent
     : public PContextWrapperParent
 {
 public:
 
     ContextWrapperParent(ContentProcessParent* cpp)
         : mContentProcess(cpp)
-        , mGlobal(NULL)
+        , mChildGlobal(NULL)
+        , mRootHandle(NULL)
     {}
 
-    JSBool GetGlobalJSObject(JSContext* cx, JSObject** globalp) {
-        if (!mGlobal)
+    JSBool GetChildGlobalObject(JSContext* cx, JSObject** globalp) {
+        if (!mChildGlobal) {
+            JS_ReportError(cx, "No child global object defined yet");
             return JS_FALSE;
-        mGlobalHolder.Hold(cx);
-        mGlobalHolder = *globalp = mGlobal->GetJSObject(cx);
+        }
+        mChildGlobalHolder.Hold(cx);
+        mChildGlobalHolder = *globalp = mChildGlobal->GetJSObject(cx);
+        return JS_TRUE;
+    }
+
+    JSBool GetRootHandle(JSContext* cx, JSObject** handlep) {
+        if (!mRootHandle) {
+            JS_ReportError(cx, "No root handle defined yet");
+            return JS_FALSE;
+        }
+        *handlep = mRootHandle->GetJSObject(cx);
         return JS_TRUE;
     }
 
     ObjectWrapperParent* GetGlobalObjectWrapper() const {
-        return mGlobal;
+        return mChildGlobal;
     }
 
     bool RequestRunToCompletion() {
         return mContentProcess->RequestRunToCompletion();
     }
 
 private:
 
     ContentProcessParent* mContentProcess;
-    ObjectWrapperParent* mGlobal;
-    nsAutoJSValHolder mGlobalHolder;
+    ObjectWrapperParent*  mChildGlobal;
+    nsAutoJSValHolder     mChildGlobalHolder;
+    HandleParent*         mRootHandle;
 
-    PObjectWrapperParent* AllocPObjectWrapper(const bool&) {
-        return new ObjectWrapperParent();
+    PObjectWrapperParent* AllocPObjectWrapper(const bool& makeGlobal) {
+        ObjectWrapperParent* objectWrapper = new ObjectWrapperParent();
+        if (makeGlobal) {
+            mChildGlobalHolder.Release();
+            mChildGlobal = objectWrapper;
+        }
+        return objectWrapper;
     }
 
-    bool RecvPObjectWrapperConstructor(PObjectWrapperParent* actor,
-                                       const bool& makeGlobal)
-    {
-        if (makeGlobal) {
-            mGlobalHolder.Release();
-            mGlobal = static_cast<ObjectWrapperParent*>(actor);
+    bool DeallocPObjectWrapper(PObjectWrapperParent* actor) {
+        if (mChildGlobal &&
+            mChildGlobal == static_cast<ObjectWrapperParent*>(actor)) {
+            mChildGlobalHolder.Release();
+            mChildGlobal = NULL;
         }
+        delete actor;
         return true;
     }
 
-    bool DeallocPObjectWrapper(PObjectWrapperParent* actor)
-    {
-        if (mGlobal &&
-            mGlobal == static_cast<ObjectWrapperParent*>(actor)) {
-            mGlobalHolder.Release();
-            mGlobal = NULL;
-        }
+    PHandleParent* AllocPHandle(const bool& makeRoot) {
+        HandleParent* handle = new HandleParent();
+        if (makeRoot)
+            mRootHandle = handle;
+        return handle;
+    }
+
+    bool DeallocPHandle(PHandleParent* actor) {
+        if (mRootHandle &&
+            mRootHandle == static_cast<HandleParent*>(actor))
+            mRootHandle = NULL;
         delete actor;
         return true;
     }
 
 };
 
 }}
 
diff --git a/js/src/ipc/Handle.h b/js/src/ipc/Handle.h
new file mode 100644
--- /dev/null
+++ b/js/src/ipc/Handle.h
@@ -0,0 +1,275 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ * vim: set ts=8 sw=4 et tw=80:
+ *
+ * ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is mozilla.org code.
+ *
+ * The Initial Developer of the Original Code is
+ * The Mozilla Foundation.
+ * Portions created by the Initial Developer are Copyright (C) 2010
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   Ben Newman <b{enjam,newma}n@mozilla.com> (original author)
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either of the GNU General Public License Version 2 or later (the "GPL"),
+ * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+#ifndef mozilla_jsipc_HandleParent_h__
+#define mozilla_jsipc_HandleParent_h__
+
+#include "mozilla/jsipc/PHandleParent.h"
+#include "mozilla/jsipc/PHandleChild.h"
+
+#include "jsapi.h"
+#include "jsobj.h"
+#include "jscntxt.h"
+
+namespace mozilla {
+namespace jsipc {
+
+template <class BaseType>
+class Handle
+    : public BaseType
+{
+    Handle(Handle* parent)
+        : mParent(parent)
+        , mObj(NULL)
+        , mRuntime(NULL)
+    {}
+
+    BaseType* AllocPHandle() {
+        return new Handle(this);
+    }
+
+    bool DeallocPHandle(BaseType* actor) {
+        delete actor;
+        return true;
+    }
+
+public:
+
+    Handle()
+        : mParent(NULL)
+        , mObj(NULL)
+        , mRuntime(NULL)
+    {}
+
+    JSObject* GetJSObject(JSContext* cx) const {
+        if (!mObj && !mRuntime) {
+            JSClass* clasp = const_cast<JSClass*>(&sHandle_JSClass);
+            JSObject* obj = JS_NewObject(cx, clasp, NULL, NULL);
+            if (!obj)
+                return NULL;
+            js::AutoValueRooter avr(cx, obj);
+
+            JSPropertySpec* ps = const_cast<JSPropertySpec*>(sHandle_Properties);
+            JSFunctionSpec* fs = const_cast<JSFunctionSpec*>(sHandle_Functions);
+            JSRuntime* rt;
+
+            if (JS_SetPrivate(cx, obj, (void*)this) &&
+                JS_DefineProperties(cx, obj, ps) &&
+                JS_DefineFunctions(cx, obj, fs) &&
+                JS_AddNamedRootRT(rt = JS_GetRuntime(cx), (void*)&mObj,
+                                  "mozilla::jsipc::Handle<BaseType>::mObj"))
+            {
+                mObj = obj;
+                mRuntime = rt;
+            }
+        }
+        return mObj;
+    }
+
+protected:
+
+    // XXX Why not simply ActorDestroyReason?
+    void ActorDestroy(typename Handle::ActorDestroyReason why) {
+        if (mObj) {
+            mObj->setPrivate(NULL);
+            mObj = NULL;
+            // Nulling out mObj effectively unroots the object, but we still
+            // need to remove the root for good hygiene's sake.
+            NS_ASSERTION(mRuntime, "Should have a JSRuntime if we had an object");
+            JS_RemoveRootRT(mRuntime, (void*)&mObj);
+            // By not nulling out mRuntime, we prevent GetJSObject from
+            // reviving an invalidated/destroyed handle.
+        }
+    }
+
+private:
+
+    static const JSClass        sHandle_JSClass;
+    static const JSPropertySpec sHandle_Properties[];
+    static const JSFunctionSpec sHandle_Functions[];
+
+    Handle* const mParent;
+
+    // Used to cache the JSObject returned by GetJSObject, which is
+    // otherwise a const method.
+    mutable JSObject*  mObj;
+    mutable JSRuntime* mRuntime;
+
+    static Handle*
+    Unwrap(JSContext* cx, JSObject* obj) {
+        if (!obj)
+            return NULL;
+
+        while (obj->getClass() != &sHandle_JSClass)
+            if (!(obj = obj->getProto()))
+                return NULL;
+
+        Handle* self = static_cast<Handle*>(JS_GetPrivate(cx, obj));
+
+        NS_ASSERTION(!self || self->GetJSObject(cx) == obj,
+                     "Wrapper and wrapped object disagree?");
+
+        return self;
+    }
+
+    static JSBool
+    GetParent(JSContext* cx, JSObject* obj, jsval, jsval* vp) {
+        JS_SET_RVAL(cx, vp, JSVAL_NULL);
+
+        Handle* self = Unwrap(cx, obj);
+        if (!self)
+            return JS_TRUE;
+
+        Handle* parent = self->mParent;
+        if (!parent)
+            return JS_TRUE;
+
+        JSObject* pobj = parent->GetJSObject(cx);
+        JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(pobj));
+
+        return JS_TRUE;
+    }
+
+    static JSBool
+    GetIsValid(JSContext* cx, JSObject* obj, jsval, jsval* vp) {
+        Handle* self = Unwrap(cx, obj);
+        JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(!!self));
+        return JS_TRUE;
+    }
+
+    static JSBool
+    Invalidate(JSContext* cx, uintN argc, jsval* vp) {
+        if (argc > 0) {
+            JS_ReportError(cx, "invalidate takes zero arguments");
+            return JS_FALSE;
+        }
+
+        Handle* self = Unwrap(cx, JS_THIS_OBJECT(cx, vp));
+        if (self) {
+            JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(JS_TRUE));
+            if (!Send__delete__(self)) {
+                JS_ReportError(cx, "Failed to send __delete__ while invalidating");
+                return JS_FALSE;
+            }
+        } else {
+            JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(JS_FALSE));
+        }
+
+        return JS_TRUE;
+    }
+
+    static JSBool
+    CreateChild(JSContext* cx, uintN argc, jsval* vp) {
+        if (argc > 0) {
+            JS_ReportError(cx, "createChild takes zero arguments");
+            return JS_FALSE;
+        }
+
+        Handle* self = Unwrap(cx, JS_THIS_OBJECT(cx, vp));
+        if (!self) {
+            JS_ReportError(cx, "Tried to create child from invalid handle");
+            return JS_FALSE;
+        }
+
+        BaseType* child = self->SendPHandleConstructor();
+        if (!child) {
+            JS_ReportError(cx, "Failed to construct child");
+            return JS_FALSE;
+        }
+
+        JSObject* obj = static_cast<Handle*>(child)->GetJSObject(cx);
+        JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(obj));
+
+        return JS_TRUE;
+    }
+
+    static void
+    Finalize(JSContext* cx, JSObject* obj) {
+        Handle* self = Unwrap(cx, obj);
+        self && Send__delete__(self);
+    }
+
+};
+
+template <class BaseType>
+const JSClass
+Handle<BaseType>::sHandle_JSClass = {
+    "IPDL Handle", JSCLASS_HAS_PRIVATE,
+    JS_PropertyStub, JS_PropertyStub,
+    JS_PropertyStub, JS_PropertyStub,
+    JS_EnumerateStub, JS_ResolveStub,
+    JS_ConvertStub, Handle::Finalize,
+    JSCLASS_NO_OPTIONAL_MEMBERS
+};
+
+#define HANDLE_PROP_FLAGS (JSPROP_READONLY | JSPROP_PERMANENT)
+
+template <class BaseType>
+const JSPropertySpec
+Handle<BaseType>::sHandle_Properties[] = {
+    { "parent",  0, HANDLE_PROP_FLAGS, GetParent,  NULL },
+    { "isValid", 0, HANDLE_PROP_FLAGS, GetIsValid, NULL },
+    { 0, 0, 0, NULL, NULL }
+};
+
+#undef HANDLE_PROP_FLAGS
+
+#define HANDLE_FUN_FLAGS (JSFUN_FAST_NATIVE |   \
+                          JSPROP_READONLY |     \
+                          JSPROP_PERMANENT)
+
+template <class BaseType>
+const JSFunctionSpec
+Handle<BaseType>::sHandle_Functions[] = {
+    JS_FN("invalidate",  Invalidate,  0, HANDLE_FUN_FLAGS),
+    JS_FN("createChild", CreateChild, 0, HANDLE_FUN_FLAGS),
+    JS_FS_END
+};
+
+#undef HANDLE_FUN_FLAGS
+
+// The payoff for using templates is that these two implementations are
+// guaranteed to be perfectly symmetric:
+typedef Handle<PHandleParent> HandleParent;
+typedef Handle<PHandleChild> HandleChild;
+
+}}
+
+#endif
diff --git a/js/src/ipc/Makefile.in b/js/src/ipc/Makefile.in
--- a/js/src/ipc/Makefile.in
+++ b/js/src/ipc/Makefile.in
@@ -51,16 +51,17 @@ EXPORT_LIBRARY = 1
 EXPORTS_NAMESPACES = mozilla/jsipc
 
 EXPORTS_mozilla/jsipc = \
   CPOWTypes.h \
   ContextWrapperChild.h \
   ContextWrapperParent.h \
   ObjectWrapperParent.h \
   ObjectWrapperChild.h \
+  Handle.h \
   $(NULL)
 
 CPPSRCS = \
   ObjectWrapperParent.cpp \
   ObjectWrapperChild.cpp \
   $(NULL)
 
 ifdef ENABLE_TESTS
diff --git a/js/src/ipc/PContextWrapper.ipdl b/js/src/ipc/PContextWrapper.ipdl
--- a/js/src/ipc/PContextWrapper.ipdl
+++ b/js/src/ipc/PContextWrapper.ipdl
@@ -36,22 +36,26 @@
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 include protocol PIFrameEmbedding;
 include protocol PTestShell;
 include protocol PObjectWrapper;
+include protocol PHandle;
 
 namespace mozilla {
 namespace jsipc {
 
 rpc protocol PContextWrapper
 {
     manager PIFrameEmbedding or PTestShell;
     manages PObjectWrapper;
+    manages PHandle;
 parent:
     async __delete__();
     async PObjectWrapper(bool makeGlobal);
+both:
+    async PHandle(bool makeRoot);
 };
 
 }}
diff --git a/js/src/ipc/PHandle.ipdl b/js/src/ipc/PHandle.ipdl
new file mode 100644
--- /dev/null
+++ b/js/src/ipc/PHandle.ipdl
@@ -0,0 +1,55 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ * vim: set ts=8 sw=4 et tw=80:
+ *
+ * ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is mozilla.org code.
+ *
+ * The Initial Developer of the Original Code is
+ * The Mozilla Foundation.
+ * Portions created by the Initial Developer are Copyright (C) 2010
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   Ben Newman <b{enjam,newma}n@mozilla.com> (original author)
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either of the GNU General Public License Version 2 or later (the "GPL"),
+ * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+include protocol PContextWrapper;
+
+namespace mozilla {
+namespace jsipc {
+
+async protocol PHandle
+{
+    manager PContextWrapper or PHandle;
+    manages PHandle;
+both:
+    PHandle();
+    __delete__();
+};
+
+}}
diff --git a/js/src/ipc/ipdl.mk b/js/src/ipc/ipdl.mk
--- a/js/src/ipc/ipdl.mk
+++ b/js/src/ipc/ipdl.mk
@@ -33,9 +33,10 @@
 # the provisions above, a recipient may use your version of this file under
 # the terms of any one of the MPL, the GPL or the LGPL.
 #
 # ***** END LICENSE BLOCK *****
 
 IPDLSRCS = \
   PContextWrapper.ipdl \
   PObjectWrapper.ipdl \
+  PHandle.ipdl \
   $(NULL)
diff --git a/js/src/ipc/tests/unit/handle_child.js b/js/src/ipc/tests/unit/handle_child.js
new file mode 100644
--- /dev/null
+++ b/js/src/ipc/tests/unit/handle_child.js
@@ -0,0 +1,8 @@
+load("handle_common.js");
+
+function run_test() {
+  run_common_tests();
+  var parent = createHandle(),
+      child = parent.createChild();
+}
+
diff --git a/js/src/ipc/tests/unit/handle_common.js b/js/src/ipc/tests/unit/handle_common.js
new file mode 100644
--- /dev/null
+++ b/js/src/ipc/tests/unit/handle_common.js
@@ -0,0 +1,105 @@
+function createHandle() {
+  return getRootHandle().createChild();
+}
+
+function run_common_tests() {
+  test_sanity();
+  test_safe_iteration();
+  test_local_invalidation();
+  test_long_parent_chain(100);
+  test_invalid_creation();
+}
+
+function test_sanity() {
+  var root = getRootHandle(),
+      parent = createHandle(),
+      child = parent.createChild(),
+      grandchild = child.createChild();
+
+  do_check_neq(child, parent);
+  do_check_eq(child.parent, parent);
+  do_check_eq(parent.parent, root);
+  do_check_eq(root.parent, null);
+  do_check_eq(grandchild.parent.parent, parent);
+
+  do_check_true(child.isValid);
+  do_check_true(parent.isValid);
+
+  parent.invalidate();
+}
+
+function test_safe_iteration() {
+  var handle = createHandle(),
+      keys = [];
+  handle.foo = 42;
+  handle.self = handle;
+  for (var k in handle)
+    keys[keys.length] = k;
+  do_check_eq(keys.sort().join("~"),
+              "foo~self");
+  handle.invalidate();
+}
+
+function test_local_invalidation() {
+  var parent = createHandle(),
+      child = parent.createChild();
+
+  do_check_true(child.invalidate());
+  do_check_false(child.isValid);
+  do_check_true(parent.isValid);
+
+  child = parent.createChild();
+  do_check_true(child.isValid);
+
+  do_check_true(parent.invalidate());
+  do_check_false(parent.invalidate());
+  do_check_false(child.isValid);
+  do_check_false(parent.isValid);
+
+  parent = createHandle();
+  child = parent.createChild();
+  child = child.createChild();
+
+  var uncle = parent.createChild(),
+      sibling = child.parent.createChild();
+
+  do_check_eq(child.parent.parent, parent);
+  do_check_true(child.parent.isValid);
+
+  do_check_true(child.parent.invalidate());
+  do_check_false(child.isValid);
+  do_check_true(parent.isValid);
+
+  do_check_false(sibling.isValid);
+  do_check_true(uncle.isValid);
+
+  parent.invalidate();
+}
+
+function test_long_parent_chain(len) {
+  const ancestor = createHandle();
+  for (var handle = ancestor, i = 0; i < len; ++i)
+    handle = handle.createChild();
+  const child = handle;
+
+  while (handle != ancestor)
+    handle = handle.parent;
+
+  do_check_true(child.isValid);
+  do_check_true(ancestor.invalidate());
+  do_check_false(child.isValid);
+}
+
+function test_invalid_creation() {
+  var parent = createHandle(),
+      child = parent.createChild();
+
+  parent.invalidate();
+
+  do_check_eq(child.parent, null);
+
+  var threw = false;
+  try { child.createChild(); }
+  catch (x) { threw = true; }
+  do_check_true(threw);
+}
diff --git a/js/src/ipc/tests/unit/test_handle.js b/js/src/ipc/tests/unit/test_handle.js
new file mode 100644
--- /dev/null
+++ b/js/src/ipc/tests/unit/test_handle.js
@@ -0,0 +1,11 @@
+load("handle_common.js");
+
+function run_test() {
+  run_test_in_child("handle_child.js",
+                    run_actual_tests);
+}
+
+function run_actual_tests() {
+  run_common_tests();
+  do_test_finished();
+}
diff --git a/js/src/xpconnect/shell/xpcshell.cpp b/js/src/xpconnect/shell/xpcshell.cpp
--- a/js/src/xpconnect/shell/xpcshell.cpp
+++ b/js/src/xpconnect/shell/xpcshell.cpp
@@ -704,16 +704,31 @@ GetChildGlobalObject(JSContext* cx,
     JSObject* global;
     if (XRE_GetChildGlobalObject(cx, &global)) {
         *rval = OBJECT_TO_JSVAL(global);
         return JS_TRUE;
     }
     return JS_FALSE;
 }
 
+static JSBool
+GetRootHandle(JSContext* cx,
+              JSObject*,
+              uintN,
+              jsval*,
+              jsval* rval)
+{
+    JSObject* handle;
+    if (XRE_GetRootHandle(cx, &handle)) {
+        *rval = OBJECT_TO_JSVAL(handle);
+        return JS_TRUE;
+    }
+    return JS_FALSE;
+}
+
 #endif // MOZ_IPC
 
 /*
  * JSContext option name to flag map. The option names are in alphabetical
  * order for better reporting.
  */
 static const struct {
     const char  *name;
@@ -825,16 +840,17 @@ static JSFunctionSpec glob_functions[] =
     {"clear",           Clear,          1,0,0},
     {"options",         Options,        0,0,0},
 #ifdef DEBUG
     {"dumpHeap",        DumpHeap,       5,0,0},
 #endif
 #ifdef MOZ_IPC
     {"sendCommand",     SendCommand,    1,0,0},
     {"getChildGlobalObject", GetChildGlobalObject, 0,0,0},
+    {"getRootHandle",   GetRootHandle,  0,0,0},
 #endif
 #ifdef MOZ_SHARK
     {"startShark",      js_StartShark,      0,0,0},
     {"stopShark",       js_StopShark,       0,0,0},
     {"connectShark",    js_ConnectShark,    0,0,0},
     {"disconnectShark", js_DisconnectShark, 0,0,0},
 #endif
 #ifdef MOZ_CALLGRIND
diff --git a/toolkit/xre/nsEmbedFunctions.cpp b/toolkit/xre/nsEmbedFunctions.cpp
--- a/toolkit/xre/nsEmbedFunctions.cpp
+++ b/toolkit/xre/nsEmbedFunctions.cpp
@@ -560,17 +560,24 @@ XRE_SendTestShellCommand(JSContext* aCx,
 
     return true;
 }
 
 bool
 XRE_GetChildGlobalObject(JSContext* aCx, JSObject** aGlobalP)
 {
     TestShellParent* tsp = GetOrCreateTestShellParent();
-    return tsp && tsp->GetGlobalJSObject(aCx, aGlobalP);
+    return tsp && tsp->GetChildGlobalObject(aCx, aGlobalP);
+}
+
+bool
+XRE_GetRootHandle(JSContext* aCx, JSObject** aHandleP)
+{
+    TestShellParent* tsp = GetOrCreateTestShellParent();
+    return tsp && tsp->GetRootHandle(aCx, aHandleP);
 }
 
 bool
 XRE_ShutdownTestShell()
 {
   if (!gTestShellParent)
     return true;
   return ContentProcessParent::GetSingleton()->DestroyTestShell(gTestShellParent);
diff --git a/xpcom/build/nsXULAppAPI.h b/xpcom/build/nsXULAppAPI.h
--- a/xpcom/build/nsXULAppAPI.h
+++ b/xpcom/build/nsXULAppAPI.h
@@ -502,16 +502,20 @@ struct JSString;
 XRE_API(bool,
         XRE_SendTestShellCommand, (JSContext* aCx,
                                    JSString* aCommand,
                                    void* aCallback))
 struct JSObject;
 
 XRE_API(bool,
         XRE_GetChildGlobalObject, (JSContext* aCx,
-                                   JSObject** globalp))
+                                   JSObject** aGlobalP))
+
+XRE_API(bool,
+        XRE_GetRootHandle, (JSContext* aCx,
+                            JSObject** aHandleP))
 
 XRE_API(bool,
         XRE_ShutdownTestShell, ())
 
 XRE_API(void,
         XRE_InstallX11ErrorHandler, ())
 #endif // _nsXULAppAPI_h__
