diff --git a/js/src/ipc/tests/adhoc/test.xul b/js/src/ipc/tests/adhoc/test.xul
--- a/js/src/ipc/tests/adhoc/test.xul
+++ b/js/src/ipc/tests/adhoc/test.xul
@@ -39,30 +39,41 @@
         alert(foo.f(2));
         alert(fn.call.call(fn, foo, 3));
       },
       equality: function(child) {
         var foo = child.foo,
             self = foo.self;
         alert("foo == self? " + (foo == self));
         alert("foo === self? " + (foo === self));
+      },
+      exceptions: function(child) {
+        var ball = "ball";
+        try {
+          child.foo.pitch(ball);
+          alert("shouldn't reach this point");
+        } catch (x) {
+          alert("ball === x? " + (ball === x));
+        }
       }
     }
 
     function test_cpow() {
       var page = document.getElementById("page"),
           owner = page.QueryInterface(Components.interfaces.nsIFrameLoaderOwner),
           child = owner.crossProcessObjectWrapper;
 
       cpow_tests.construct(child.foo);
       cpow_tests.resolve(child.location, "href hostname");
       cpow_tests.iterate(child.location);
       cpow_tests.iterate(child.foo);
       cpow_tests.funcalls(child.foo);
       cpow_tests.equality(child);
+      cpow_tests.exceptions(child);
+    
     }
   </script>
 
   <toolbar id="controls">
     <toolbarbutton onclick="test_cpow()" label="Run tests."/>
   </toolbar>
 
   <browser remote="true" width="200" height="200"
diff --git a/js/src/ipc/tests/unit/cpow_child.js b/js/src/ipc/tests/unit/cpow_child.js
--- a/js/src/ipc/tests/unit/cpow_child.js
+++ b/js/src/ipc/tests/unit/cpow_child.js
@@ -44,9 +44,13 @@ function A() {
   this.b = A;
 }
 function B() {
   this.b = B;
   this.c = B;
 }
 B.prototype = new A;
 
-function run_test() {}
+function pitch(ball) {
+  throw ball;
+}
+
+function run_test() {}
\ No newline at end of file
diff --git a/js/src/ipc/tests/unit/test_cpow.js b/js/src/ipc/tests/unit/test_cpow.js
--- a/js/src/ipc/tests/unit/test_cpow.js
+++ b/js/src/ipc/tests/unit/test_cpow.js
@@ -9,16 +9,17 @@ function run_actual_tests() {
   test_delete(obj.data);
   test_toString(obj.data);
   test_inheritance(obj.data);
   test_constructor(obj.data.constructor);
   test_instanceof(obj.A, obj.B);
   test_enumeration(obj.A, obj.B);
   test_Array(obj.Array);
   test_Function(obj.Function);
+  test_exceptions(obj.pitch, obj.Object);
 
   do_test_finished();
 }
 
 function test_properties(data) {
   do_check_true("answer" in data);
   do_check_false("cnefhasefho" in data.nested);
 
@@ -107,8 +108,29 @@ function test_Array(ChildArray) {
   arr[2] = arr[1];
   do_check_eq(arr.pop()[0], 2);
 }
 
 function test_Function(ChildFunction) {
   var succ = new ChildFunction("x", "return x + 1");
   do_check_eq(succ(succ(3)), 5);
 }
+
+function test_exceptions(pitch, ChildObject) {
+  try {
+    throw "parent-only";
+  } catch (x) {
+    do_check_eq(x, "parent-only");
+  }
+  var ball = new ChildObject(),
+      thrown = false;
+  ball.sport = "baseball";
+  try {
+    pitch(ball);
+    do_throw("Should have thrown.");
+  } catch (x) {
+    thrown = true;
+    do_check_eq(x.sport, "baseball");
+    do_check_eq(x, ball);
+    do_check_true(x === ball);
+  }
+  do_check_true(thrown);
+}
