# HG changeset patch
# User Ben Newman <bnewman@mozilla.com>
# Date 1264040654 28800
# Node ID bbb4154a3247858a00568096d0e5477b56739200
# Parent  c631b16ad5f0cc808c0fc910a3c2bfa6e539f9da
Bug 540126 - CPOW: Let PObjectWrapper actors use ContentProcessParent::RequestRunToCompletion(). r=mrbkap sr=jst

diff --git a/dom/ipc/TabParent.cpp b/dom/ipc/TabParent.cpp
--- a/dom/ipc/TabParent.cpp
+++ b/dom/ipc/TabParent.cpp
@@ -34,30 +34,32 @@
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 #include "TabParent.h"
 
 #include "mozilla/ipc/DocumentRendererParent.h"
+#include "mozilla/dom/ContentProcessParent.h"
 #include "mozilla/jsipc/ContextWrapperParent.h"
 
 #include "nsIURI.h"
 #include "nsFocusManager.h"
 #include "nsCOMPtr.h"
 #include "nsServiceManagerUtils.h"
 #include "nsIDOMElement.h"
 #include "nsEventDispatcher.h"
 #include "nsIDOMEventTarget.h"
 #include "nsIDOMEvent.h"
 #include "nsIPrivateDOMEvent.h"
 #include "nsFrameLoader.h"
 
 using mozilla::ipc::DocumentRendererParent;
+using mozilla::dom::ContentProcessParent;
 using mozilla::jsipc::PContextWrapperParent;
 using mozilla::jsipc::ContextWrapperParent;
 
 namespace mozilla {
 namespace dom {
 
 TabParent::TabParent()
 {
@@ -156,17 +158,19 @@ TabParent::DeallocPDocumentRenderer(PDoc
 {
     delete actor;
     return true;
 }
 
 PContextWrapperParent*
 TabParent::AllocPContextWrapper()
 {
-    return new ContextWrapperParent();
+    ContentProcessParent* cpp =
+        static_cast<ContentProcessParent*>(Manager());
+    return new ContextWrapperParent(cpp);
 }
 
 bool
 TabParent::DeallocPContextWrapper(PContextWrapperParent* actor)
 {
     delete actor;
     return true;
 }
diff --git a/ipc/testshell/TestShellParent.cpp b/ipc/testshell/TestShellParent.cpp
--- a/ipc/testshell/TestShellParent.cpp
+++ b/ipc/testshell/TestShellParent.cpp
@@ -30,23 +30,25 @@
  * decision by deleting the provisions above and replace them with the notice
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 #include "TestShellParent.h"
+#include "mozilla/dom/ContentProcessParent.h"
 #include "mozilla/jsipc/ContextWrapperParent.h"
 
 #include "nsAutoPtr.h"
 
 using mozilla::ipc::TestShellParent;
 using mozilla::ipc::TestShellCommandParent;
 using mozilla::ipc::PTestShellCommandParent;
+using mozilla::dom::ContentProcessParent;
 using mozilla::jsipc::PContextWrapperParent;
 using mozilla::jsipc::ContextWrapperParent;
 
 PTestShellCommandParent*
 TestShellParent::AllocPTestShellCommand(const nsString& aCommand)
 {
   return new TestShellCommandParent();
 }
@@ -67,17 +69,19 @@ TestShellParent::CommandDone(TestShellCo
   command->ReleaseCallback();
 
   return true;
 }
 
 PContextWrapperParent*
 TestShellParent::AllocPContextWrapper()
 {
-    return new ContextWrapperParent();
+    ContentProcessParent* cpp =
+        static_cast<ContentProcessParent*>(Manager());
+    return new ContextWrapperParent(cpp);
 }
 
 bool
 TestShellParent::DeallocPContextWrapper(PContextWrapperParent* actor)
 {
     delete actor;
     return true;
 }
diff --git a/js/src/ipc/ContextWrapperParent.h b/js/src/ipc/ContextWrapperParent.h
--- a/js/src/ipc/ContextWrapperParent.h
+++ b/js/src/ipc/ContextWrapperParent.h
@@ -38,44 +38,57 @@
  *
  * ***** END LICENSE BLOCK ***** */
 
 #ifndef mozilla_jsipc_ContextWrapperParent_h__
 #define mozilla_jsipc_ContextWrapperParent_h__
 
 #include "mozilla/jsipc/PContextWrapperParent.h"
 #include "mozilla/jsipc/ObjectWrapperParent.h"
+#include "mozilla/jsipc/CPOWTypes.h"
+
+#include "mozilla/dom/ContentProcessParent.h"
 
 #include "jsapi.h"
 #include "nsAutoJSValHolder.h"
 
 namespace mozilla {
 namespace jsipc {
+
+using mozilla::dom::ContentProcessParent;
     
 class ContextWrapperParent
     : public PContextWrapperParent
 {
 public:
 
-    ContextWrapperParent() : mGlobal(NULL) {}
+    ContextWrapperParent(ContentProcessParent* cpp)
+        : mContentProcess(cpp)
+        , mGlobal(NULL)
+    {}
 
     bool GetGlobalJSObject(JSContext* cx, JSObject** globalp) {
         if (!mGlobal)
             return false;
         mGlobalHolder.Hold(cx);
         mGlobalHolder = *globalp = mGlobal->GetJSObject(cx);
         return true;
     }
 
     ObjectWrapperParent* GetGlobalObjectWrapper() const {
         return mGlobal;
     }
 
+    bool RequestRunToCompletion() {
+        return mContentProcess->RequestRunToCompletion();
+    }
+
 private:
 
+    ContentProcessParent* mContentProcess;
     ObjectWrapperParent* mGlobal;
     nsAutoJSValHolder mGlobalHolder;
 
     PObjectWrapperParent* AllocPObjectWrapper(const bool&) {
         return new ObjectWrapperParent();
     }
 
     bool RecvPObjectWrapperConstructor(PObjectWrapperParent* actor,
diff --git a/js/src/ipc/ObjectWrapperChild.cpp b/js/src/ipc/ObjectWrapperChild.cpp
--- a/js/src/ipc/ObjectWrapperChild.cpp
+++ b/js/src/ipc/ObjectWrapperChild.cpp
@@ -37,21 +37,51 @@
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 #include "mozilla/jsipc/ContextWrapperChild.h"
 #include "mozilla/jsipc/ObjectWrapperChild.h"
 #include "mozilla/jsipc/CPOWTypes.h"
 
+#include "jsapi.h"
 #include "jscntxt.h"
+#include "nsAutoPtr.h"
 #include "nsTArray.h"
+#include "nsContentUtils.h"
+#include "nsIJSContextStack.h"
 
 using namespace mozilla::jsipc;
 
+namespace {
+
+    class AutoContextPusher {
+
+        nsCxPusher mStack;
+        JSAutoRequest mRequest;
+        JS_DECL_USE_GUARD_OBJECT_NOTIFIER;
+
+    public:
+
+        AutoContextPusher(JSContext* cx
+                          JS_GUARD_OBJECT_NOTIFIER_PARAM)
+            : mRequest(cx)
+        {
+            JS_GUARD_OBJECT_NOTIFIER_INIT;
+            mStack.Push(cx);
+        }
+
+        ~AutoContextPusher() {
+            mStack.Pop();
+        }
+
+    };
+
+}
+
 ObjectWrapperChild::ObjectWrapperChild(JSContext* cx, JSObject* obj)
     : mObj(obj)
 {
     JSAutoRequest request(cx);
 #ifdef DEBUG
     bool added =
 #endif
         JS_AddNamedRoot(cx, (void*)&mObj,
@@ -205,17 +235,18 @@ jsid_from_nsString(JSContext* cx, const 
 
 #if 0
 // The general schema for ObjectWrapperChild::Answer* methods:
 bool
 ObjectWrapperChild::AnswerSomething(/* in-parameters */
                                     /* out-parameters */)
 {
     // initialize out-parameters for failure
-    JSAutoRequest request(Manager()->GetContext());
+    JSContext* cx = Manager()->GetContext();
+    AutoContextPusher acp(cx);
     // validate in-parameters, else return false
     // successfully perform local JS operations, else return true
     // perform out-parameter conversions, else return false
     return true;
 }
 // There's an important subtlety here: though a local JS operation may
 // fail, leaving out-parameters uninitialized, we must initialize all
 // out-parameters when reporting success (returning true) to the IPC
@@ -226,17 +257,17 @@ bool
 ObjectWrapperChild::AnswerAddProperty(const nsString& id,
                                       JSBool* ok)
 {
     jsid interned_id;
 
     *ok = JS_FALSE;
 
     JSContext* cx = Manager()->GetContext();
-    JSAutoRequest request(cx);
+    AutoContextPusher acp(cx);
 
     if (!jsid_from_nsString(cx, id, &interned_id))
         return false;
     
     *ok = JS_DefinePropertyById(cx, mObj, interned_id, JSVAL_VOID,
                                 NULL, NULL, 0);
     return true;
 }
@@ -246,17 +277,17 @@ ObjectWrapperChild::AnswerGetProperty(co
                                       JSBool* ok, JSVariant* vp)
 {
     jsid interned_id;
     jsval val;
 
     *ok = JS_FALSE;
 
     JSContext* cx = Manager()->GetContext();
-    JSAutoRequest request(cx);
+    AutoContextPusher acp(cx);
 
     if (!jsid_from_nsString(cx, id, &interned_id))
         return false;
 
     *ok = JS_GetPropertyById(cx, mObj, interned_id, &val);
 
     // Since we fully expect this call to jsval_to_JSVariant to return
     // true, we can't just leave vp uninitialized when JS_GetPropertyById
@@ -272,17 +303,17 @@ ObjectWrapperChild::AnswerSetProperty(co
 {
     jsid interned_id;
     jsval val;
 
     *ok = JS_FALSE;
     *vp = v;
 
     JSContext* cx = Manager()->GetContext();
-    JSAutoRequest request(cx);
+    AutoContextPusher acp(cx);
 
     if (!jsid_from_nsString(cx, id, &interned_id) ||
         !jsval_from_JSVariant(cx, v, &val))
         return false;
 
     *ok = JS_SetPropertyById(cx, mObj, interned_id, &val);
 
     return jsval_to_JSVariant(cx, *ok ? val : JSVAL_VOID, vp);
@@ -293,17 +324,17 @@ ObjectWrapperChild::AnswerDelProperty(co
                                       JSBool* ok, JSVariant* vp)
 {
     jsid interned_id;
     jsval val;
 
     *ok = JS_FALSE;
 
     JSContext* cx = Manager()->GetContext();
-    JSAutoRequest request(cx);
+    AutoContextPusher acp(cx);
 
     if (!jsid_from_nsString(cx, id, &interned_id))
         return false;
 
     *ok = JS_DeletePropertyById2(cx, mObj, interned_id, &val);
 
     return jsval_to_JSVariant(cx, *ok ? val : JSVAL_VOID, vp);
 }
@@ -338,17 +369,17 @@ static const JSClass sCPOW_NewEnumerateS
 bool
 ObjectWrapperChild::AnswerNewEnumerateInit(/* no in-parameters */
                                            JSBool* ok, JSVariant* statep, int* idp)
 {
     *ok = JS_FALSE;
     *idp = 0;
 
     JSContext* cx = Manager()->GetContext();
-    JSAutoRequest request(cx);
+    AutoContextPusher acp(cx);
 
     JSClass* clasp = const_cast<JSClass*>(&sCPOW_NewEnumerateState_JSClass);
     JSObject* state = JS_NewObjectWithGivenProto(cx, clasp, NULL, NULL);
     if (!state)
         return false;
     JSAutoTempValueRooter tvr(cx, state);
     
     for (JSObject* proto = mObj;
@@ -390,17 +421,17 @@ ObjectWrapperChild::AnswerNewEnumerateNe
     JSObject* state;
     jsval v;
 
     *ok = JS_FALSE;
     *statep = in_state;
     *idp = EmptyString();
     
     JSContext* cx = Manager()->GetContext();
-    JSAutoRequest request(cx);
+    AutoContextPusher acp(cx);
 
     if (!JSObject_from_JSVariant(cx, in_state, &state))
         return false;
 
     nsTArray<nsString>* strIds =
         static_cast<nsTArray<nsString>*>(JS_GetPrivate(cx, state));
 
     if (!strIds || !JS_GetReservedSlot(cx, state, sNextIdIndexSlot, &v))
@@ -419,17 +450,17 @@ ObjectWrapperChild::AnswerNewEnumerateNe
 }
     
 bool
 ObjectWrapperChild::RecvNewEnumerateDestroy(const JSVariant& in_state)
 {
     JSObject* state;
 
     JSContext* cx = Manager()->GetContext();
-    JSAutoRequest request(cx);
+    AutoContextPusher acp(cx);
 
     if (!JSObject_from_JSVariant(cx, in_state, &state))
         return false;
 
     nsTArray<nsString>* strIds =
         static_cast<nsTArray<nsString>*>(JS_GetPrivate(cx, state));
 
     if (strIds) {
@@ -445,17 +476,17 @@ ObjectWrapperChild::AnswerNewResolve(con
                                      JSBool* ok, PObjectWrapperChild** obj2)
 {
     jsid interned_id;
     
     *ok = JS_FALSE;
     *obj2 = NULL;
 
     JSContext* cx = Manager()->GetContext();
-    JSAutoRequest request(cx);
+    AutoContextPusher acp(cx);
 
     if (!jsid_from_nsString(cx, id, &interned_id))
         return false;
 
     CPOW_LOG(("new-resolving \"%s\"...",
               NS_ConvertUTF16toUTF8(id).get()));
 
     JSPropertyDescriptor desc;
@@ -471,34 +502,34 @@ ObjectWrapperChild::AnswerNewResolve(con
 }
 
 bool
 ObjectWrapperChild::AnswerConvert(const JSType& type,
                                   JSBool* ok, JSVariant* vp)
 {
     jsval v;
     JSContext* cx = Manager()->GetContext();
-    JSAutoRequest request(cx);
+    AutoContextPusher acp(cx);
     *ok = JS_ConvertValue(cx, OBJECT_TO_JSVAL(mObj), type, &v);
     return jsval_to_JSVariant(cx, *ok ? v : JSVAL_VOID, vp);
 }
 
 namespace {
     // Should be an overestimate of typical JS function arity.
     typedef nsAutoTArray<jsval, 5> AutoJSArgs;
 }
 
 bool
 ObjectWrapperChild::AnswerCall(PObjectWrapperChild* receiver, const nsTArray<JSVariant>& argv,
                                JSBool* ok, JSVariant* rval)
 {
     *ok = JS_FALSE;
-    
+
     JSContext* cx = Manager()->GetContext();
-    JSAutoRequest request(cx);
+    AutoContextPusher acp(cx);
 
     JSObject* obj;
     if (!JSObject_from_PObjectWrapperChild(cx, receiver, &obj))
         return false;
 
     AutoJSArgs args;
     PRUint32 argc = argv.Length();
     jsval *jsargs = args.AppendElements(argc);
@@ -517,17 +548,17 @@ ObjectWrapperChild::AnswerCall(PObjectWr
 
 bool
 ObjectWrapperChild::AnswerConstruct(const nsTArray<JSVariant>& argv,
                                     JSBool* ok, PObjectWrapperChild** rval)
 {
     *ok = JS_FALSE;
 
     JSContext* cx = Manager()->GetContext();
-    JSAutoRequest request(cx);
+    AutoContextPusher acp(cx);
 
     AutoJSArgs args;
     PRUint32 argc = argv.Length();
     jsval* jsargs = args.AppendElements(argc);
     JSAutoTempValueRooter tvr(cx, argc, jsargs);
 
     for (PRUint32 i = 0; i < argc; ++i)
         if (!jsval_from_JSVariant(cx, argv.ElementAt(i), jsargs + i))
@@ -542,14 +573,14 @@ ObjectWrapperChild::AnswerConstruct(cons
 }
 
 bool
 ObjectWrapperChild::AnswerHasInstance(const JSVariant& v,
                                       JSBool* ok, JSBool* bp)
 {
     jsval candidate;
     JSContext* cx = Manager()->GetContext();
-    JSAutoRequest request(cx);
+    AutoContextPusher acp(cx);
     if (!jsval_from_JSVariant(cx, v, &candidate))
         return false;
     *ok = JS_HasInstance(cx, mObj, candidate, bp);
     return true;
 }
diff --git a/js/src/ipc/ObjectWrapperParent.cpp b/js/src/ipc/ObjectWrapperParent.cpp
--- a/js/src/ipc/ObjectWrapperParent.cpp
+++ b/js/src/ipc/ObjectWrapperParent.cpp
@@ -138,17 +138,24 @@ const JSExtendedClass ObjectWrapperParen
 };
 
 void
 ObjectWrapperParent::ActorDestroy(ActorDestroyReason)
 {
     if (mObj)
         mObj->setPrivate(NULL);
 }
-    
+
+ContextWrapperParent*
+ObjectWrapperParent::Manager()
+{
+    PContextWrapperParent* pcwp = PObjectWrapperParent::Manager();
+    return static_cast<ContextWrapperParent*>(pcwp);
+}
+
 JSObject*
 ObjectWrapperParent::GetJSObject(JSContext* cx) const
 {
     JSClass* clasp = const_cast<JSClass*>(&ObjectWrapperParent::sCPOW_JSClass.base);
     if (!mObj && (mObj = JS_NewObject(cx, clasp, NULL, NULL))) {
         JS_SetPrivate(cx, mObj, (void*)this);
         JS_SetReservedSlot(cx, mObj, sFlagsSlot, JSVAL_ZERO);
     }
@@ -332,17 +339,18 @@ ObjectWrapperParent::CPOW_AddProperty(JS
     
     nsString in_id;
 
     if (!jsval_to_nsString(cx, id, &in_id))
         return JS_FALSE;
 
     JSBool out_ok;
 
-    return (self->CallAddProperty(in_id,
+    return (self->Manager()->RequestRunToCompletion() &&
+            self->CallAddProperty(in_id,
                                   &out_ok) &&
             out_ok);
 }
 
 /*static*/ JSBool
 ObjectWrapperParent::CPOW_GetProperty(JSContext *cx, JSObject *obj, jsval id,
                                       jsval *vp)
 {
@@ -356,17 +364,18 @@ ObjectWrapperParent::CPOW_GetProperty(JS
     nsString in_id;
 
     if (!jsval_to_nsString(cx, id, &in_id))
         return JS_FALSE;
 
     JSBool out_ok;
     JSVariant out_v;
     
-    return (self->CallGetProperty(in_id,
+    return (self->Manager()->RequestRunToCompletion() &&
+            self->CallGetProperty(in_id,
                                   &out_ok, &out_v) &&
             out_ok &&
             self->jsval_from_JSVariant(cx, out_v, vp));
 }
 
 /*static*/ JSBool
 ObjectWrapperParent::CPOW_SetProperty(JSContext *cx, JSObject *obj, jsval id,
                                       jsval *vp)
@@ -383,17 +392,18 @@ ObjectWrapperParent::CPOW_SetProperty(JS
 
     if (!jsval_to_nsString(cx, id, &in_id) ||
         !self->jsval_to_JSVariant(cx, *vp, &in_v))
         return JS_FALSE;
     
     JSBool out_ok;
     JSVariant out_v;
 
-    return (self->CallSetProperty(in_id, in_v,
+    return (self->Manager()->RequestRunToCompletion() &&
+            self->CallSetProperty(in_id, in_v,
                                   &out_ok, &out_v) &&
             out_ok &&
             self->jsval_from_JSVariant(cx, out_v, vp));
 }    
     
 /*static*/ JSBool
 ObjectWrapperParent::CPOW_DelProperty(JSContext *cx, JSObject *obj, jsval id,
                                       jsval *vp)
@@ -408,17 +418,18 @@ ObjectWrapperParent::CPOW_DelProperty(JS
     nsString in_id;
 
     if (!jsval_to_nsString(cx, id, &in_id))
         return JS_FALSE;
 
     JSBool out_ok;
     JSVariant out_v;
     
-    return (self->CallDelProperty(in_id,
+    return (self->Manager()->RequestRunToCompletion() &&
+            self->CallDelProperty(in_id,
                                   &out_ok, &out_v) &&
             out_ok &&
             jsval_from_JSVariant(cx, out_v, vp));
 }
 
 JSBool
 ObjectWrapperParent::NewEnumerateInit(JSContext* cx, jsval* statep, jsid* idp)
 {
@@ -475,16 +486,17 @@ ObjectWrapperParent::CPOW_NewEnumerate(J
     CPOW_LOG(("Calling CPOW_NewEnumerate..."));
 
     ObjectWrapperParent* self = Unwrap(cx, obj);
     if (!self)
         return JS_FALSE;
 
     switch (enum_op) {
     case JSENUMERATE_INIT:
+        self->Manager()->RequestRunToCompletion();
         return self->NewEnumerateInit(cx, statep, idp);
     case JSENUMERATE_NEXT:
         return self->NewEnumerateNext(cx, statep, idp);
     case JSENUMERATE_DESTROY:
         return self->NewEnumerateDestroy(cx, *statep);
     }
 
     return JS_FALSE;
@@ -504,17 +516,18 @@ ObjectWrapperParent::CPOW_NewResolve(JSC
     nsString in_id;
 
     if (!jsval_to_nsString(cx, id, &in_id))
         return JS_FALSE;
 
     JSBool out_ok;
     PObjectWrapperParent* out_pobj;
 
-    if (!self->CallNewResolve(in_id, flags,
+    if (!self->Manager()->RequestRunToCompletion() ||
+        !self->CallNewResolve(in_id, flags,
                               &out_ok, &out_pobj) ||
         !out_ok ||
         !JSObject_from_PObjectWrapperParent(cx, out_pobj, objp))
         return JS_FALSE;
 
     jsid interned_id;
     if (*objp &&
         JS_ValueToId(cx, id, &interned_id)) {
@@ -574,17 +587,18 @@ ObjectWrapperParent::CPOW_Call(JSContext
     nsTArray<JSVariant> in_argv(argc);
     for (uintN i = 0; i < argc; i++)
         if (!jsval_to_JSVariant(cx, argv[i], in_argv.AppendElement()))
             return JS_FALSE;
     
     JSBool out_ok;
     JSVariant out_rval;
 
-    return (function->CallCall(receiver, in_argv,
+    return (function->Manager()->RequestRunToCompletion() &&
+            function->CallCall(receiver, in_argv,
                                &out_ok, &out_rval) &&
             out_ok &&
             jsval_from_JSVariant(cx, out_rval, rval));
 }
 
 /*static*/ JSBool
 ObjectWrapperParent::CPOW_Construct(JSContext *cx, JSObject *obj, uintN argc,
                                     jsval *argv, jsval *rval)
@@ -599,17 +613,18 @@ ObjectWrapperParent::CPOW_Construct(JSCo
     nsTArray<JSVariant> in_argv(argc);
     for (uintN i = 0; i < argc; i++)
         if (!jsval_to_JSVariant(cx, argv[i], in_argv.AppendElement()))
             return JS_FALSE;
 
     JSBool out_ok;
     PObjectWrapperParent* out_powp;
 
-    return (constructor->CallConstruct(in_argv,
+    return (constructor->Manager()->RequestRunToCompletion() &&
+            constructor->CallConstruct(in_argv,
                                        &out_ok, &out_powp) &&
             out_ok &&
             jsval_from_PObjectWrapperParent(cx, out_powp, rval));
 }
 
 /*static*/ JSBool
 ObjectWrapperParent::CPOW_HasInstance(JSContext *cx, JSObject *obj, jsval v,
                                       JSBool *bp)
@@ -624,17 +639,18 @@ ObjectWrapperParent::CPOW_HasInstance(JS
 
     JSVariant in_v;
 
     if (!jsval_to_JSVariant(cx, v, &in_v))
         return JS_FALSE;
 
     JSBool out_ok;
 
-    return (self->CallHasInstance(in_v,
+    return (self->Manager()->RequestRunToCompletion() &&
+            self->CallHasInstance(in_v,
                                   &out_ok, bp) &&
             out_ok);
 }
 
 /*static*/ JSBool
 ObjectWrapperParent::CPOW_Equality(JSContext *cx, JSObject *obj, jsval v,
                                    JSBool *bp)
 {
diff --git a/js/src/ipc/ObjectWrapperParent.h b/js/src/ipc/ObjectWrapperParent.h
--- a/js/src/ipc/ObjectWrapperParent.h
+++ b/js/src/ipc/ObjectWrapperParent.h
@@ -43,16 +43,18 @@
 
 #include "mozilla/jsipc/PObjectWrapperParent.h"
 #include "jsapi.h"
 #include "nsAutoJSValHolder.h"
 
 namespace mozilla {
 namespace jsipc {
 
+class ContextWrapperParent;
+
 class ObjectWrapperParent
     : public PObjectWrapperParent
 {
 public:
 
     ObjectWrapperParent()
         : mObj(NULL)
     {}
@@ -64,16 +66,18 @@ public:
     }
 
     static const JSExtendedClass sCPOW_JSClass;
 
 protected:
 
     void ActorDestroy(ActorDestroyReason why);
 
+    ContextWrapperParent* Manager();
+
 private:
 
     mutable JSObject* mObj;
 
     static JSBool
     CPOW_AddProperty(JSContext *cx, JSObject *obj, jsval id, jsval *vp);
 
     static JSBool
