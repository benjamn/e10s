# HG changeset patch
# User Ben Newman <bnewman@mozilla.com>
# Date 1264193577 28800
# Node ID a1bfceab50385a1015b8ac27ae1419d866616590
# Parent  98650290e6d93dee49154350fe47a7bcff2f5c82
Bug 541003 - CPOW: Support throwing arbitrary exceptions from content to chrome. r=mrbkap
* * *
CPOW-specific exceptions (bug 541003). r=mrbkap

diff --git a/js/src/ipc/ObjectWrapperChild.cpp b/js/src/ipc/ObjectWrapperChild.cpp
--- a/js/src/ipc/ObjectWrapperChild.cpp
+++ b/js/src/ipc/ObjectWrapperChild.cpp
@@ -52,34 +52,99 @@
 using namespace mozilla::jsipc;
 
 namespace {
 
     class AutoContextPusher {
 
         nsCxPusher mStack;
         JSAutoRequest mRequest;
+        JSContext* const mContext;
+        const uint32 mSavedOptions;
         JS_DECL_USE_GUARD_OBJECT_NOTIFIER;
 
     public:
 
         AutoContextPusher(JSContext* cx
                           JS_GUARD_OBJECT_NOTIFIER_PARAM)
             : mRequest(cx)
+            , mContext(cx)
+            , mSavedOptions(JS_SetOptions(cx, (JS_GetOptions(cx) |
+                                               JSOPTION_DONT_REPORT_UNCAUGHT)))
         {
             JS_GUARD_OBJECT_NOTIFIER_INIT;
             mStack.Push(cx);
         }
 
         ~AutoContextPusher() {
             mStack.Pop();
+            JS_SetOptions(mContext, mSavedOptions);
         }
 
     };
 
+    class StatusPtrOwner
+    {
+        OperationStatus* mStatusPtr;
+    public:
+        StatusPtrOwner() : mStatusPtr(NULL) {}
+        void SetStatusPtr(OperationStatus* statusPtr) {
+            mStatusPtr = statusPtr;
+            // By default, initialize mStatusPtr to failure without an
+            // exception.  Doing so only when the union is uninitialized
+            // allows AutoCheckOperation classes to be nested on the
+            // stack, just in case AnswerConstruct, for example, calls
+            // AnswerCall (as it once did, before there were unrelated
+            // problems with that approach).
+            if (mStatusPtr->type() == OperationStatus::T__None)
+                *mStatusPtr = JS_FALSE;
+        }
+        OperationStatus* StatusPtr() {
+            NS_ASSERTION(mStatusPtr, "Should have called SetStatusPtr by now.");
+            return mStatusPtr;
+        }
+    };
+
+    typedef AutoCheckOperationBase<StatusPtrOwner> ACOBase;
+
+    class AutoCheckOperation : public ACOBase
+    {
+        JS_DECL_USE_GUARD_OBJECT_NOTIFIER;
+    public:
+        AutoCheckOperation(ObjectWrapperChild* owc,
+                           OperationStatus* statusPtr
+                           JS_GUARD_OBJECT_NOTIFIER_PARAM)
+            : ACOBase(NULL, owc)
+        {
+            JS_GUARD_OBJECT_NOTIFIER_INIT;
+            SetStatusPtr(statusPtr);
+        }
+    };
+}
+
+void
+ObjectWrapperChild::CheckOperation(JSContext*,
+                                   OperationStatus* status)
+{
+    NS_PRECONDITION(status->type() != OperationStatus::T__None,
+                    "Checking an uninitialized operation.");
+
+    JSContext* cx = Manager()->GetContext();
+    jsval thrown;
+
+    if (JS_GetPendingException(cx, &thrown)) {
+        NS_ASSERTION(!(status->type() == OperationStatus::TJSBool &&
+                       status->get_JSBool()),
+                     "Operation succeeded but exception was thrown?");
+        JSVariant exception;
+        if (!jsval_to_JSVariant(cx, thrown, &exception))
+            exception = void_t(); // XXX Useful?
+        *status = exception;
+        JS_ClearPendingException(cx);
+    }
 }
 
 ObjectWrapperChild::ObjectWrapperChild(JSContext* cx, JSObject* obj)
     : mObj(obj)
 {
     JSAutoRequest request(cx);
 #ifdef DEBUG
     bool added =
@@ -250,98 +315,95 @@ ObjectWrapperChild::AnswerSomething(/* i
 // There's an important subtlety here: though a local JS operation may
 // fail, leaving out-parameters uninitialized, we must initialize all
 // out-parameters when reporting success (returning true) to the IPC
 // messaging system.  See AnswerGetProperty for illustration.
 #endif
 
 bool
 ObjectWrapperChild::AnswerAddProperty(const nsString& id,
-                                      JSBool* ok)
+                                      OperationStatus* status)
 {
     jsid interned_id;
 
-    *ok = JS_FALSE;
-
     JSContext* cx = Manager()->GetContext();
     AutoContextPusher acp(cx);
+    AutoCheckOperation aco(this, status);
 
     if (!jsid_from_nsString(cx, id, &interned_id))
         return false;
     
-    *ok = JS_DefinePropertyById(cx, mObj, interned_id, JSVAL_VOID,
-                                NULL, NULL, 0);
+    *status = JS_DefinePropertyById(cx, mObj, interned_id, JSVAL_VOID,
+                                    NULL, NULL, 0);
     return true;
 }
 
 bool
 ObjectWrapperChild::AnswerGetProperty(const nsString& id,
-                                      JSBool* ok, JSVariant* vp)
+                                      OperationStatus* status, JSVariant* vp)
 {
     jsid interned_id;
     jsval val;
 
-    *ok = JS_FALSE;
-
     JSContext* cx = Manager()->GetContext();
     AutoContextPusher acp(cx);
+    AutoCheckOperation aco(this, status);
 
     if (!jsid_from_nsString(cx, id, &interned_id))
         return false;
 
-    *ok = JS_GetPropertyById(cx, mObj, interned_id, &val);
+    *status = JS_GetPropertyById(cx, mObj, interned_id, &val);
 
     // Since we fully expect this call to jsval_to_JSVariant to return
     // true, we can't just leave vp uninitialized when JS_GetPropertyById
     // returns JS_FALSE.  This pitfall could be avoided in general if IPDL
     // ensured that outparams were pre-initialized to some default value
     // (XXXfixme cjones?).
-    return jsval_to_JSVariant(cx, *ok ? val : JSVAL_VOID, vp);
+    return jsval_to_JSVariant(cx, aco.Ok() ? val : JSVAL_VOID, vp);
 }
 
 bool
 ObjectWrapperChild::AnswerSetProperty(const nsString& id, const JSVariant& v,
-                                      JSBool* ok, JSVariant* vp)
+                                      OperationStatus* status, JSVariant* vp)
 {
     jsid interned_id;
     jsval val;
 
-    *ok = JS_FALSE;
     *vp = v;
 
     JSContext* cx = Manager()->GetContext();
     AutoContextPusher acp(cx);
+    AutoCheckOperation aco(this, status);
 
     if (!jsid_from_nsString(cx, id, &interned_id) ||
         !jsval_from_JSVariant(cx, v, &val))
         return false;
 
-    *ok = JS_SetPropertyById(cx, mObj, interned_id, &val);
+    *status = JS_SetPropertyById(cx, mObj, interned_id, &val);
 
-    return jsval_to_JSVariant(cx, *ok ? val : JSVAL_VOID, vp);
+    return jsval_to_JSVariant(cx, aco.Ok() ? val : JSVAL_VOID, vp);
 }
 
 bool
 ObjectWrapperChild::AnswerDelProperty(const nsString& id,
-                                      JSBool* ok, JSVariant* vp)
+                                      OperationStatus* status, JSVariant* vp)
 {
     jsid interned_id;
     jsval val;
 
-    *ok = JS_FALSE;
-
     JSContext* cx = Manager()->GetContext();
     AutoContextPusher acp(cx);
+    AutoCheckOperation aco(this, status);
 
     if (!jsid_from_nsString(cx, id, &interned_id))
         return false;
 
-    *ok = JS_DeletePropertyById2(cx, mObj, interned_id, &val);
+    *status = JS_DeletePropertyById2(cx, mObj, interned_id, &val);
 
-    return jsval_to_JSVariant(cx, *ok ? val : JSVAL_VOID, vp);
+    return jsval_to_JSVariant(cx, aco.Ok() ? val : JSVAL_VOID, vp);
 }
 
 static const PRUint32 sNextIdIndexSlot = 0;
 static const PRUint32 sNumNewEnumerateStateSlots = 1;
 
 static void
 CPOW_NewEnumerateState_Finalize(JSContext* cx, JSObject* state)
 {
@@ -363,23 +425,23 @@ static const JSClass sCPOW_NewEnumerateS
     JS_PropertyStub,  JS_PropertyStub,
     JS_EnumerateStub, JS_ResolveStub,
     JS_ConvertStub,   CPOW_NewEnumerateState_Finalize,
     JSCLASS_NO_OPTIONAL_MEMBERS
 };
 
 bool
 ObjectWrapperChild::AnswerNewEnumerateInit(/* no in-parameters */
-                                           JSBool* ok, JSVariant* statep, int* idp)
+                                           OperationStatus* status, JSVariant* statep, int* idp)
 {
-    *ok = JS_FALSE;
     *idp = 0;
 
     JSContext* cx = Manager()->GetContext();
     AutoContextPusher acp(cx);
+    AutoCheckOperation aco(this, status);
 
     JSClass* clasp = const_cast<JSClass*>(&sCPOW_NewEnumerateState_JSClass);
     JSObject* state = JS_NewObjectWithGivenProto(cx, clasp, NULL, NULL);
     if (!state)
         return false;
     JSAutoTempValueRooter tvr(cx, state);
     
     for (JSObject* proto = mObj;
@@ -401,59 +463,59 @@ ObjectWrapperChild::AnswerNewEnumerateIn
         for (uint i = 0; i < ids.length(); ++i)
             if (!jsid_to_nsString(cx, ids[i], strIds->AppendElement())) {
                 delete strIds;
                 return false;
             }
     }
     *idp = strIds->Length();
 
-    *ok = (JS_SetPrivate(cx, state, strIds) &&
-           JS_SetReservedSlot(cx, state, sNextIdIndexSlot,
-                              JSVAL_ZERO) &&
-           JSObject_to_JSVariant(cx, state, statep));
+    *status = (JS_SetPrivate(cx, state, strIds) &&
+               JS_SetReservedSlot(cx, state, sNextIdIndexSlot,
+                                  JSVAL_ZERO) &&
+               JSObject_to_JSVariant(cx, state, statep));
 
     return true;
 }
 
 bool
 ObjectWrapperChild::AnswerNewEnumerateNext(const JSVariant& in_state,
-                                           JSBool* ok, JSVariant* statep, nsString* idp)
+                                           OperationStatus* status, JSVariant* statep, nsString* idp)
 {
     JSObject* state;
     jsval v;
 
-    *ok = JS_FALSE;
     *statep = in_state;
     idp->Truncate();
     
     JSContext* cx = Manager()->GetContext();
     AutoContextPusher acp(cx);
+    AutoCheckOperation aco(this, status);
 
     if (!JSObject_from_JSVariant(cx, in_state, &state))
         return false;
 
     nsTArray<nsString>* strIds =
         static_cast<nsTArray<nsString>*>(JS_GetPrivate(cx, state));
 
     if (!strIds || !JS_GetReservedSlot(cx, state, sNextIdIndexSlot, &v))
         return false;
 
     jsint i = JSVAL_TO_INT(v);
     NS_ASSERTION(i >= 0, "Index of next jsid negative?");
     NS_ASSERTION(i <= strIds->Length(), "Index of next jsid too large?");
 
     if (i == strIds->Length()) {
-        *ok = JS_TRUE;
+        *status = JS_TRUE;
         return JSObject_to_JSVariant(cx, NULL, statep);
     }
 
     *idp = strIds->ElementAt(i);
-    *ok = JS_SetReservedSlot(cx, state, sNextIdIndexSlot,
-                             INT_TO_JSVAL(i + 1));
+    *status = JS_SetReservedSlot(cx, state, sNextIdIndexSlot,
+                                 INT_TO_JSVAL(i + 1));
     return true;
 }
     
 bool
 ObjectWrapperChild::RecvNewEnumerateDestroy(const JSVariant& in_state)
 {
     JSObject* state;
 
@@ -465,68 +527,68 @@ ObjectWrapperChild::RecvNewEnumerateDest
 
     CPOW_NewEnumerateState_Finalize(cx, state);
 
     return true;
 }
 
 bool
 ObjectWrapperChild::AnswerNewResolve(const nsString& id, const int& flags,
-                                     JSBool* ok, PObjectWrapperChild** obj2)
+                                     OperationStatus* status, PObjectWrapperChild** obj2)
 {
     jsid interned_id;
     
-    *ok = JS_FALSE;
     *obj2 = NULL;
 
     JSContext* cx = Manager()->GetContext();
     AutoContextPusher acp(cx);
+    AutoCheckOperation aco(this, status);
 
     if (!jsid_from_nsString(cx, id, &interned_id))
         return false;
 
     CPOW_LOG(("new-resolving \"%s\"...",
               NS_ConvertUTF16toUTF8(id).get()));
 
     JSPropertyDescriptor desc;
     if (!JS_GetPropertyDescriptorById(cx, mObj, interned_id, flags, &desc))
         return true;
 
-    *ok = JS_TRUE;
+    *status = JS_TRUE;
 
     if (desc.obj)
         *obj2 = Manager()->GetOrCreateWrapper(desc.obj);
 
     return true;
 }
 
 bool
 ObjectWrapperChild::AnswerConvert(const JSType& type,
-                                  JSBool* ok, JSVariant* vp)
+                                  OperationStatus* status, JSVariant* vp)
 {
     jsval v;
     JSContext* cx = Manager()->GetContext();
     AutoContextPusher acp(cx);
-    *ok = JS_ConvertValue(cx, OBJECT_TO_JSVAL(mObj), type, &v);
-    return jsval_to_JSVariant(cx, *ok ? v : JSVAL_VOID, vp);
+    AutoCheckOperation aco(this, status);
+    *status = JS_ConvertValue(cx, OBJECT_TO_JSVAL(mObj), type, &v);
+    return jsval_to_JSVariant(cx, aco.Ok() ? v : JSVAL_VOID, vp);
 }
 
 namespace {
     // Should be an overestimate of typical JS function arity.
     typedef nsAutoTArray<jsval, 5> AutoJSArgs;
 }
 
 bool
 ObjectWrapperChild::AnswerCall(PObjectWrapperChild* receiver, const nsTArray<JSVariant>& argv,
-                               JSBool* ok, JSVariant* rval)
+                               OperationStatus* status, JSVariant* rval)
 {
-    *ok = JS_FALSE;
-
     JSContext* cx = Manager()->GetContext();
     AutoContextPusher acp(cx);
+    AutoCheckOperation aco(this, status);
 
     JSObject* obj;
     if (!JSObject_from_PObjectWrapperChild(cx, receiver, &obj))
         return false;
 
     AutoJSArgs args;
     PRUint32 argc = argv.Length();
     jsval *jsargs = args.AppendElements(argc);
@@ -534,54 +596,54 @@ ObjectWrapperChild::AnswerCall(PObjectWr
         return false;
     JSAutoTempValueRooter tvr(cx, argc, jsargs);
 
     for (PRUint32 i = 0; i < argc; ++i)
         if (!jsval_from_JSVariant(cx, argv.ElementAt(i), jsargs + i))
             return false;
 
     jsval rv;
-    *ok = JS_CallFunctionValue(cx, obj, OBJECT_TO_JSVAL(mObj),
-                               argv.Length(), jsargs, &rv);
+    *status = JS_CallFunctionValue(cx, obj, OBJECT_TO_JSVAL(mObj),
+                                   argv.Length(), jsargs, &rv);
 
-    return jsval_to_JSVariant(cx, *ok ? rv : JSVAL_VOID, rval);
+    return jsval_to_JSVariant(cx, aco.Ok() ? rv : JSVAL_VOID, rval);
 }
 
 bool
 ObjectWrapperChild::AnswerConstruct(const nsTArray<JSVariant>& argv,
-                                    JSBool* ok, PObjectWrapperChild** rval)
+                                    OperationStatus* status, PObjectWrapperChild** rval)
 {
-    *ok = JS_FALSE;
-
     JSContext* cx = Manager()->GetContext();
     AutoContextPusher acp(cx);
+    AutoCheckOperation aco(this, status);
 
     AutoJSArgs args;
     PRUint32 argc = argv.Length();
     jsval* jsargs = args.AppendElements(argc);
     if (!jsargs)
         return false;
     JSAutoTempValueRooter tvr(cx, argc, jsargs);
 
     for (PRUint32 i = 0; i < argc; ++i)
         if (!jsval_from_JSVariant(cx, argv.ElementAt(i), jsargs + i))
             return false;
 
     JSObject* obj = JS_New(cx, mObj, argc, jsargs);
 
-    *ok = !!obj;
+    *status = !!obj;
     *rval = Manager()->GetOrCreateWrapper(obj);
 
     return true;
 }
 
 bool
 ObjectWrapperChild::AnswerHasInstance(const JSVariant& v,
-                                      JSBool* ok, JSBool* bp)
+                                      OperationStatus* status, JSBool* bp)
 {
     jsval candidate;
     JSContext* cx = Manager()->GetContext();
     AutoContextPusher acp(cx);
+    AutoCheckOperation aco(this, status);
     if (!jsval_from_JSVariant(cx, v, &candidate))
         return false;
-    *ok = JS_HasInstance(cx, mObj, candidate, bp);
+    *status = JS_HasInstance(cx, mObj, candidate, bp);
     return true;
 }
diff --git a/js/src/ipc/ObjectWrapperChild.h b/js/src/ipc/ObjectWrapperChild.h
--- a/js/src/ipc/ObjectWrapperChild.h
+++ b/js/src/ipc/ObjectWrapperChild.h
@@ -38,31 +38,37 @@
  *
  * ***** END LICENSE BLOCK ***** */
 
 #ifndef mozilla_jsipc_ObjectWrapperChild_h__
 #define mozilla_jsipc_ObjectWrapperChild_h__
 
 #include "mozilla/jsipc/PObjectWrapperChild.h"
 
+// For OperationChecker and AutoCheckOperationBase.
+#include "mozilla/jsipc/ObjectWrapperParent.h"
+
 using mozilla::jsipc::JSVariant;
 
 namespace mozilla {
 namespace jsipc {
 
 class ContextWrapperChild;
-  
+
 class ObjectWrapperChild
     : public PObjectWrapperChild
+    , public OperationChecker
 {
 public:
 
     ObjectWrapperChild(JSContext* cx, JSObject* obj);
 
     JSObject* GetJSObject() const { return mObj; }
+
+    void CheckOperation(JSContext* cx, OperationStatus* status);
     
 private:
 
     JSObject* const mObj;
 
     bool JSObject_to_JSVariant(JSContext* cx, JSObject* from, JSVariant* to);
     bool jsval_to_JSVariant(JSContext* cx, jsval from, JSVariant* to);
 
@@ -76,46 +82,46 @@ private:
 
     ContextWrapperChild* Manager();
 
 protected:
 
     void ActorDestroy(ActorDestroyReason why);
 
     bool AnswerAddProperty(const nsString& id,
-                           JSBool* ok);
+                           OperationStatus* status);
 
     bool AnswerGetProperty(const nsString& id,
-                           JSBool* ok, JSVariant* vp);
+                           OperationStatus* status, JSVariant* vp);
 
     bool AnswerSetProperty(const nsString& id, const JSVariant& v,
-                           JSBool* ok, JSVariant* vp);
+                           OperationStatus* status, JSVariant* vp);
 
     bool AnswerDelProperty(const nsString& id,
-                           JSBool* ok, JSVariant* vp);
+                           OperationStatus* status, JSVariant* vp);
 
     bool AnswerNewEnumerateInit(/* no in-parameters */
-                                JSBool* ok, JSVariant* statep, int* idp);
+                                OperationStatus* status, JSVariant* statep, int* idp);
 
     bool AnswerNewEnumerateNext(const JSVariant& in_state,
-                                JSBool* ok, JSVariant* statep, nsString* idp);
+                                OperationStatus* status, JSVariant* statep, nsString* idp);
 
     bool RecvNewEnumerateDestroy(const JSVariant& in_state);
 
     bool AnswerNewResolve(const nsString& id, const int& flags,
-                          JSBool* ok, PObjectWrapperChild** obj2);
+                          OperationStatus* status, PObjectWrapperChild** obj2);
 
     bool AnswerConvert(const JSType& type,
-                       JSBool* ok, JSVariant* vp);
+                       OperationStatus* status, JSVariant* vp);
 
     bool AnswerCall(PObjectWrapperChild* receiver, const nsTArray<JSVariant>& argv,
-                    JSBool* ok, JSVariant* rval);
+                    OperationStatus* status, JSVariant* rval);
 
     bool AnswerConstruct(const nsTArray<JSVariant>& argv,
-                         JSBool* ok, PObjectWrapperChild** rval);
+                         OperationStatus* status, PObjectWrapperChild** rval);
 
     bool AnswerHasInstance(const JSVariant& v,
-                           JSBool* ok, JSBool* bp);
+                           OperationStatus* status, JSBool* bp);
 };
 
 }}
   
 #endif
diff --git a/js/src/ipc/ObjectWrapperParent.cpp b/js/src/ipc/ObjectWrapperParent.cpp
--- a/js/src/ipc/ObjectWrapperParent.cpp
+++ b/js/src/ipc/ObjectWrapperParent.cpp
@@ -98,16 +98,79 @@ namespace {
         }
 
         static JSBool IsSet(JSContext* cx, JSObject* obj) {
             return GetFlags(cx, obj) & CPOW_FLAG_RESOLVING;
         }
 
     };
 
+    class StatusMemberOwner
+    {
+        OperationStatus mStatus;
+    public:
+        StatusMemberOwner() : mStatus(JS_FALSE) {}
+        OperationStatus* StatusPtr() {
+            return &mStatus;
+        }
+    };
+
+    typedef AutoCheckOperationBase<StatusMemberOwner> ACOBase;
+
+    class AutoCheckOperation : public ACOBase
+    {
+        JS_DECL_USE_GUARD_OBJECT_NOTIFIER;
+    public:
+        AutoCheckOperation(JSContext* cx,
+                           ObjectWrapperParent* owp
+                           JS_GUARD_OBJECT_NOTIFIER_PARAM)
+            : ACOBase(cx, owp)
+        {
+            JS_GUARD_OBJECT_NOTIFIER_INIT;
+        }
+    };
+
+}
+
+void
+ObjectWrapperParent::CheckOperation(JSContext* cx,
+                                    OperationStatus* status)
+{
+    NS_PRECONDITION(status->type() != OperationStatus::T__None,
+                    "Checking an uninitialized operation.");
+
+    switch (status->type()) {
+    case OperationStatus::TJSVariant:
+        {
+            jsval thrown;
+            if (jsval_from_JSVariant(cx, status->get_JSVariant(), &thrown))
+                JS_SetPendingException(cx, thrown);
+            *status = JS_FALSE;
+        }
+        break;
+    case OperationStatus::TJSBool:
+        if (!status->get_JSBool() && !JS_IsExceptionPending(cx)) {
+            NS_WARNING("CPOW operation failed without setting an exception.");
+        }
+        break;
+    default:
+        NS_NOTREACHED("Invalid or uninitialized OperationStatus type.");
+        break;
+    }
+}
+
+template <typename RType>
+static RType
+with_error(JSContext* cx,
+               RType rval,
+               const char* error = NULL)
+{
+    if (!JS_IsExceptionPending(cx))
+        JS_ReportError(cx, error ? error : "Unspecified CPOW error");
+    return rval;
 }
 
 const JSExtendedClass ObjectWrapperParent::sCPOW_JSClass = {
     // JSClass (JSExtendedClass.base) initialization
     { "CrossProcessObjectWrapper",
       JSCLASS_NEW_RESOLVE | JSCLASS_NEW_ENUMERATE | JSCLASS_IS_EXTENDED |
       JSCLASS_HAS_PRIVATE | JSCLASS_HAS_RESERVED_SLOTS(sNumSlots),
       ObjectWrapperParent::CPOW_AddProperty,
@@ -193,17 +256,17 @@ ObjectWrapperParent::jsval_to_JSVariant(
     case JSTYPE_FUNCTION:
         // CPOWs can fool JS_TypeOfValue into returning JSTYPE_FUNCTION
         // because they have a call hook, but CPOWs are really objects, so
         // fall through to the JSTYPE_OBJECT case:
     case JSTYPE_OBJECT:
         {
             PObjectWrapperParent* powp;
             if (!JSObject_to_PObjectWrapperParent(cx, JSVAL_TO_OBJECT(from), &powp))
-                return false;
+                return with_error(cx, false, "Cannot pass parent-created object to child");
             *to = powp;
         }
         return true;
     case JSTYPE_STRING:
         *to = nsDependentString((PRUnichar*)JS_GetStringChars(JSVAL_TO_STRING(from)),
                                 JS_GetStringLength(JSVAL_TO_STRING(from)));
         return true;
     case JSTYPE_NUMBER:
@@ -212,18 +275,19 @@ ObjectWrapperParent::jsval_to_JSVariant(
         else if (JSVAL_IS_DOUBLE(from))
             *to = *JSVAL_TO_DOUBLE(from);
         else return false;
         return true;
     case JSTYPE_BOOLEAN:
         *to = !!JSVAL_TO_BOOLEAN(from);
         return true;
     case JSTYPE_XML:
+        return with_error(cx, false, "CPOWs currently cannot handle JSTYPE_XML");
     default:
-        return false;
+        return with_error(cx, false, "Bad jsval type");
     }
 }
 
 /*static*/ bool
 ObjectWrapperParent::jsval_from_JSVariant(JSContext* cx, const JSVariant& from,
                                           jsval* to)
 {
     switch (from.type()) {
@@ -327,209 +391,220 @@ jsval_to_nsString(JSContext* cx, jsval f
 ObjectWrapperParent::CPOW_AddProperty(JSContext *cx, JSObject *obj, jsval id,
                                       jsval *vp)
 {
     CPOW_LOG(("Calling CPOW_AddProperty (%s)...",
               JSVAL_TO_CSTR(cx, id)));
 
     ObjectWrapperParent* self = Unwrap(cx, obj);
     if (!self)
-        return JS_FALSE;
+        return with_error(cx, JS_FALSE, "Unwrapping failed in CPOW_AddProperty");
 
     if (AutoResolveFlag::IsSet(cx, obj))
         return JS_TRUE;
-    
+
+    AutoCheckOperation aco(cx, self);
+
     nsString in_id;
 
     if (!jsval_to_nsString(cx, id, &in_id))
         return JS_FALSE;
 
-    JSBool out_ok;
-
     return (self->Manager()->RequestRunToCompletion() &&
             self->CallAddProperty(in_id,
-                                  &out_ok) &&
-            out_ok);
+                                  aco.StatusPtr()) &&
+            aco.Ok());
 }
 
 /*static*/ JSBool
 ObjectWrapperParent::CPOW_GetProperty(JSContext *cx, JSObject *obj, jsval id,
                                       jsval *vp)
 {
     CPOW_LOG(("Calling CPOW_GetProperty (%s)...",
               JSVAL_TO_CSTR(cx, id)));
 
     ObjectWrapperParent* self = Unwrap(cx, obj);
     if (!self)
-        return JS_FALSE;
+        return with_error(cx, JS_FALSE, "Unwrapping failed in CPOW_GetProperty");
+
+    AutoCheckOperation aco(cx, self);
 
     nsString in_id;
 
     if (!jsval_to_nsString(cx, id, &in_id))
         return JS_FALSE;
 
-    JSBool out_ok;
     JSVariant out_v;
     
     return (self->Manager()->RequestRunToCompletion() &&
             self->CallGetProperty(in_id,
-                                  &out_ok, &out_v) &&
-            out_ok &&
+                                  aco.StatusPtr(), &out_v) &&
+            aco.Ok() &&
             self->jsval_from_JSVariant(cx, out_v, vp));
 }
 
 /*static*/ JSBool
 ObjectWrapperParent::CPOW_SetProperty(JSContext *cx, JSObject *obj, jsval id,
                                       jsval *vp)
 {
     CPOW_LOG(("Calling CPOW_SetProperty (%s)...",
               JSVAL_TO_CSTR(cx, id)));
 
     ObjectWrapperParent* self = Unwrap(cx, obj);
     if (!self)
-        return JS_FALSE;
+        return with_error(cx, JS_FALSE, "Unwrapping failed in CPOW_SetProperty");
+
+    AutoCheckOperation aco(cx, self);
 
     nsString in_id;
     JSVariant in_v;
 
     if (!jsval_to_nsString(cx, id, &in_id) ||
         !self->jsval_to_JSVariant(cx, *vp, &in_v))
         return JS_FALSE;
-    
-    JSBool out_ok;
+
     JSVariant out_v;
 
     return (self->Manager()->RequestRunToCompletion() &&
             self->CallSetProperty(in_id, in_v,
-                                  &out_ok, &out_v) &&
-            out_ok &&
+                                  aco.StatusPtr(), &out_v) &&
+            aco.Ok() &&
             self->jsval_from_JSVariant(cx, out_v, vp));
 }    
     
 /*static*/ JSBool
 ObjectWrapperParent::CPOW_DelProperty(JSContext *cx, JSObject *obj, jsval id,
                                       jsval *vp)
 {
     CPOW_LOG(("Calling CPOW_DelProperty (%s)...",
               JSVAL_TO_CSTR(cx, id)));
 
     ObjectWrapperParent* self = Unwrap(cx, obj);
     if (!self)
-        return JS_FALSE;
+        return with_error(cx, JS_FALSE, "Unwrapping failed in CPOW_DelProperty");
+
+    AutoCheckOperation aco(cx, self);
 
     nsString in_id;
 
     if (!jsval_to_nsString(cx, id, &in_id))
         return JS_FALSE;
 
-    JSBool out_ok;
     JSVariant out_v;
     
     return (self->Manager()->RequestRunToCompletion() &&
             self->CallDelProperty(in_id,
-                                  &out_ok, &out_v) &&
-            out_ok &&
+                                  aco.StatusPtr(), &out_v) &&
+            aco.Ok() &&
             jsval_from_JSVariant(cx, out_v, vp));
 }
 
 JSBool
 ObjectWrapperParent::NewEnumerateInit(JSContext* cx, jsval* statep, jsid* idp)
 {
-    JSBool out_ok;
+    AutoCheckOperation aco(cx, this);
+
     JSVariant out_state;
     int out_id;
 
-    return (CallNewEnumerateInit(&out_ok, &out_state, &out_id) &&
-            out_ok &&
+    return (CallNewEnumerateInit(aco.StatusPtr(), &out_state, &out_id) &&
+            aco.Ok() &&
             jsval_from_JSVariant(cx, out_state, statep) &&
             (!idp || jsid_from_int(cx, out_id, idp)));
 }
 
 JSBool
 ObjectWrapperParent::NewEnumerateNext(JSContext* cx, jsval* statep, jsid* idp)
 {
+    AutoCheckOperation aco(cx, this);
+
     JSVariant in_state;
+
     if (!jsval_to_JSVariant(cx, *statep, &in_state))
         return JS_FALSE;
 
-    JSBool out_ok;
     JSVariant out_state;
     nsString out_id;
 
     if (CallNewEnumerateNext(in_state,
-                             &out_ok, &out_state, &out_id) &&
-        out_ok &&
+                             aco.StatusPtr(), &out_state, &out_id) &&
+        aco.Ok() &&
         jsval_from_JSVariant(cx, out_state, statep) &&
         jsid_from_nsString(cx, out_id, idp))
     {
         JSObject* obj = GetJSObject(cx);
         AutoResolveFlag arf(cx, obj);
         return JS_DefinePropertyById(cx, obj, *idp, JSVAL_VOID, NULL, NULL,
                                      JSPROP_ENUMERATE);
     }
     return JS_FALSE;
 }
 
 JSBool
 ObjectWrapperParent::NewEnumerateDestroy(JSContext* cx, jsval state)
 {
+    AutoCheckOperation aco(cx, this);
+
     JSVariant in_state;
+
     if (!jsval_to_JSVariant(cx, state, &in_state))
         return JS_FALSE;
 
     return SendNewEnumerateDestroy(in_state);
 }
 
 /*static*/ JSBool
 ObjectWrapperParent::CPOW_NewEnumerate(JSContext *cx, JSObject *obj,
                                        JSIterateOp enum_op, jsval *statep,
                                        jsid *idp)
 {
     CPOW_LOG(("Calling CPOW_NewEnumerate..."));
 
     ObjectWrapperParent* self = Unwrap(cx, obj);
     if (!self)
-        return JS_FALSE;
+        return with_error(cx, JS_FALSE, "Unwrapping failed in CPOW_NewEnumerate");
 
     switch (enum_op) {
     case JSENUMERATE_INIT:
         self->Manager()->RequestRunToCompletion();
         return self->NewEnumerateInit(cx, statep, idp);
     case JSENUMERATE_NEXT:
         return self->NewEnumerateNext(cx, statep, idp);
     case JSENUMERATE_DESTROY:
         return self->NewEnumerateDestroy(cx, *statep);
     }
 
+    NS_NOTREACHED("Unknown enum_op value in CPOW_NewEnumerate");
     return JS_FALSE;
 }
 
 /*static*/ JSBool
 ObjectWrapperParent::CPOW_NewResolve(JSContext *cx, JSObject *obj, jsval id,
                                      uintN flags, JSObject **objp)
 {
     CPOW_LOG(("Calling CPOW_NewResolve (%s)...",
               JSVAL_TO_CSTR(cx, id)));
 
     ObjectWrapperParent* self = Unwrap(cx, obj);
     if (!self)
-        return JS_FALSE;
+        return with_error(cx, JS_FALSE, "Unwrapping failed in CPOW_NewResolve");
+
+    AutoCheckOperation aco(cx, self);
 
     nsString in_id;
 
     if (!jsval_to_nsString(cx, id, &in_id))
         return JS_FALSE;
 
-    JSBool out_ok;
     PObjectWrapperParent* out_pobj;
 
     if (!self->Manager()->RequestRunToCompletion() ||
         !self->CallNewResolve(in_id, flags,
-                              &out_ok, &out_pobj) ||
-        !out_ok ||
+                              aco.StatusPtr(), &out_pobj) ||
+        !aco.Ok() ||
         !JSObject_from_PObjectWrapperParent(cx, out_pobj, objp))
         return JS_FALSE;
 
     jsid interned_id;
     if (*objp &&
         JS_ValueToId(cx, id, &interned_id)) {
         AutoResolveFlag arf(cx, *objp);
         JS_DefinePropertyById(cx, *objp, interned_id, JSVAL_VOID, NULL, NULL,
@@ -542,17 +617,17 @@ ObjectWrapperParent::CPOW_NewResolve(JSC
 ObjectWrapperParent::CPOW_Convert(JSContext *cx, JSObject *obj, JSType type,
                                   jsval *vp)
 {
     CPOW_LOG(("Calling CPOW_Convert (to %s)...",
               JS_GetTypeName(cx, type)));
 
     ObjectWrapperParent* self = Unwrap(cx, obj);
     if (!self)
-        return JS_FALSE;
+        return with_error(cx, JS_FALSE, "Unwrapping failed in CPOW_Convert");
 
     *vp = OBJECT_TO_JSVAL(obj);
 
     return JS_TRUE;
 }
 
 /*static*/ void
 ObjectWrapperParent::CPOW_Finalize(JSContext* cx, JSObject* obj)
@@ -568,104 +643,106 @@ ObjectWrapperParent::CPOW_Finalize(JSCon
 ObjectWrapperParent::CPOW_Call(JSContext* cx, JSObject* obj, uintN argc,
                                jsval* argv, jsval* rval)
 {
     CPOW_LOG(("Calling CPOW_Call..."));
 
     ObjectWrapperParent* function =
         Unwrap(cx, JSVAL_TO_OBJECT(JS_ARGV_CALLEE(argv)));
     if (!function)
-        return JS_FALSE;
+        return with_error(cx, JS_FALSE, "Could not unwrap CPOW function");
+
+    AutoCheckOperation aco(cx, function);
 
     ObjectWrapperParent* receiver = Unwrap(cx, obj);
     if (!receiver) {
         // Substitute child global for parent global object.
         // TODO First make sure we're really replacing the global object?
         ContextWrapperParent* manager =
             static_cast<ContextWrapperParent*>(function->Manager());
         receiver = manager->GetGlobalObjectWrapper();
     }
 
     nsTArray<JSVariant> in_argv(argc);
     for (uintN i = 0; i < argc; i++)
         if (!jsval_to_JSVariant(cx, argv[i], in_argv.AppendElement()))
             return JS_FALSE;
-    
-    JSBool out_ok;
+
     JSVariant out_rval;
 
     return (function->Manager()->RequestRunToCompletion() &&
             function->CallCall(receiver, in_argv,
-                               &out_ok, &out_rval) &&
-            out_ok &&
+                               aco.StatusPtr(), &out_rval) &&
+            aco.Ok() &&
             jsval_from_JSVariant(cx, out_rval, rval));
 }
 
 /*static*/ JSBool
 ObjectWrapperParent::CPOW_Construct(JSContext *cx, JSObject *obj, uintN argc,
                                     jsval *argv, jsval *rval)
 {
     CPOW_LOG(("Calling CPOW_Construct..."));
     
     ObjectWrapperParent* constructor =
         Unwrap(cx, JSVAL_TO_OBJECT(JS_ARGV_CALLEE(argv)));
     if (!constructor)
-        return JS_FALSE;
+        return with_error(cx, JS_FALSE, "Could not unwrap CPOW constructor function");
+
+    AutoCheckOperation aco(cx, constructor);
 
     nsTArray<JSVariant> in_argv(argc);
     for (uintN i = 0; i < argc; i++)
         if (!jsval_to_JSVariant(cx, argv[i], in_argv.AppendElement()))
             return JS_FALSE;
 
-    JSBool out_ok;
     PObjectWrapperParent* out_powp;
 
     return (constructor->Manager()->RequestRunToCompletion() &&
             constructor->CallConstruct(in_argv,
-                                       &out_ok, &out_powp) &&
-            out_ok &&
+                                       aco.StatusPtr(), &out_powp) &&
+            aco.Ok() &&
             jsval_from_PObjectWrapperParent(cx, out_powp, rval));
 }
 
 /*static*/ JSBool
 ObjectWrapperParent::CPOW_HasInstance(JSContext *cx, JSObject *obj, jsval v,
                                       JSBool *bp)
 {
     CPOW_LOG(("Calling CPOW_HasInstance..."));
 
     *bp = JS_FALSE;
 
     ObjectWrapperParent* self = Unwrap(cx, obj);
     if (!self)
-        return JS_FALSE;
+        return with_error(cx, JS_FALSE, "Unwrapping failed in CPOW_HasInstance");
+
+    AutoCheckOperation aco(cx, self);
 
     JSVariant in_v;
 
     if (!jsval_to_JSVariant(cx, v, &in_v))
         return JS_FALSE;
 
-    JSBool out_ok;
-
     return (self->Manager()->RequestRunToCompletion() &&
             self->CallHasInstance(in_v,
-                                  &out_ok, bp) &&
-            out_ok);
+                                  aco.StatusPtr(), bp) &&
+            aco.Ok());
 }
 
 /*static*/ JSBool
 ObjectWrapperParent::CPOW_Equality(JSContext *cx, JSObject *obj, jsval v,
                                    JSBool *bp)
 {
     CPOW_LOG(("Calling CPOW_Equality..."));
 
     *bp = JS_FALSE;
     
     ObjectWrapperParent* self = Unwrap(cx, obj);
     if (!self)
-        return JS_FALSE;
+        return with_error(cx, JS_FALSE, "Unwrapping failed in CPOW_Equality");
 
     if (JSVAL_IS_PRIMITIVE(v))
         return JS_TRUE;
 
     ObjectWrapperParent* other = Unwrap(cx, JSVAL_TO_OBJECT(v));
     if (!other)
         return JS_TRUE;
 
diff --git a/js/src/ipc/ObjectWrapperParent.h b/js/src/ipc/ObjectWrapperParent.h
--- a/js/src/ipc/ObjectWrapperParent.h
+++ b/js/src/ipc/ObjectWrapperParent.h
@@ -45,31 +45,41 @@
 #include "jsapi.h"
 #include "nsAutoJSValHolder.h"
 
 namespace mozilla {
 namespace jsipc {
 
 class ContextWrapperParent;
 
+class OperationChecker {
+public:
+    virtual void CheckOperation(JSContext* cx,
+                                OperationStatus* status) = 0;
+};
+
 class ObjectWrapperParent
     : public PObjectWrapperParent
+    , public OperationChecker
 {
 public:
 
     ObjectWrapperParent()
         : mObj(NULL)
     {}
 
     JSObject* GetJSObject(JSContext* cx) const;
 
     jsval GetJSVal(JSContext* cx) const {
         return OBJECT_TO_JSVAL(GetJSObject(cx));
     }
 
+    void CheckOperation(JSContext* cx,
+                        OperationStatus* status);
+
     static const JSExtendedClass sCPOW_JSClass;
 
 protected:
 
     void ActorDestroy(ActorDestroyReason why);
 
     ContextWrapperParent* Manager();
 
@@ -131,11 +141,38 @@ private:
                                        const PObjectWrapperParent* from,
                                        JSObject** to);
     static bool
     jsval_from_PObjectWrapperParent(JSContext* cx,
                                     const PObjectWrapperParent* from,
                                     jsval* to);
 };
 
+template <class StatusOwnerPolicy>
+class AutoCheckOperationBase
+    : public StatusOwnerPolicy
+{
+    JSContext* const mContext;
+    OperationChecker* const mChecker;
+
+protected:
+
+    AutoCheckOperationBase(JSContext* cx,
+                           OperationChecker* checker)
+        : mContext(cx)
+        , mChecker(checker)
+    {}
+
+    virtual ~AutoCheckOperationBase() {
+        mChecker->CheckOperation(mContext, StatusOwnerPolicy::StatusPtr());
+    }
+
+public:
+
+    bool Ok() {
+        return (StatusOwnerPolicy::StatusPtr()->type() == OperationStatus::TJSBool &&
+                StatusOwnerPolicy::StatusPtr()->get_JSBool());
+    }
+};
+
 }}
-  
+
 #endif
diff --git a/js/src/ipc/PObjectWrapper.ipdl b/js/src/ipc/PObjectWrapper.ipdl
--- a/js/src/ipc/PObjectWrapper.ipdl
+++ b/js/src/ipc/PObjectWrapper.ipdl
@@ -54,67 +54,72 @@ union JSVariant {
     nullable PObjectWrapper;
     nsString;
     int;
     double;
     bool; // We'd like to use JSBool here, but JSBool is really JSIntn,
           // and IPC::ParamTraits mistakes JSIntn for int.
 };
 
+union OperationStatus {
+    JSBool;
+    JSVariant; // Exception thrown.
+};
+
 rpc protocol PObjectWrapper
 {
     manager PContextWrapper;
 
 child:
     __delete__(); // unroot
 
     rpc AddProperty(nsString id)
-        returns (JSBool ok);
+        returns (OperationStatus status);
 
     rpc GetProperty(nsString id)
-        returns (JSBool ok,
+        returns (OperationStatus status,
                  JSVariant vp);
 
     rpc SetProperty(nsString id,
                     JSVariant v)
-        returns (JSBool ok,
+        returns (OperationStatus status,
                  JSVariant vp);
 
     rpc DelProperty(nsString id)
-        returns (JSBool ok,
+        returns (OperationStatus status,
                  JSVariant vp);
 
     rpc NewEnumerateInit()
-        returns (JSBool ok,
+        returns (OperationStatus status,
                  JSVariant statep,
                  int idp);
 
     rpc NewEnumerateNext(JSVariant in_state)
-        returns (JSBool ok,
+        returns (OperationStatus status,
                  JSVariant statep,
                  nsString idp);
 
     async NewEnumerateDestroy(JSVariant in_state);
 
     rpc NewResolve(nsString id,
                    int flags)
-        returns (JSBool ok,
+        returns (OperationStatus status,
                  nullable PObjectWrapper obj2);
 
     rpc Convert(JSType type)
-        returns (JSBool ok,
+        returns (OperationStatus status,
                  JSVariant vp);
 
     rpc Call(PObjectWrapper receiver,
              JSVariant[] argv)
-        returns (JSBool ok,
+        returns (OperationStatus status,
                  JSVariant rval);
 
     rpc Construct(JSVariant[] argv)
-        returns (JSBool ok,
+        returns (OperationStatus status,
                  nullable PObjectWrapper rval);
 
     rpc HasInstance(JSVariant v)
-        returns (JSBool ok,
+        returns (OperationStatus status,
                  JSBool bp);
 };
 
 }}
